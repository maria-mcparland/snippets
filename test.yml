{
  "openapi": "3.0.3",
  "info": {
    "title": "Embedded Banking API",
    "version": "0.9.23",
    "description": "Embedded Banking services from J.P. Morgan",
    "contact": {
      "name": "JPMC Technical Services Support"
    }
  },
  "servers": [
    {
      "url": "https://apigateway.jpmorgan.com/tsapi/v1/eb",
      "description": "Production API Server"
    },
    {
      "url": "https://apigatewaycat.jpmorgan.com/tsapi/v1/eb",
      "description": "CTE API Testing Server"
    }
  ],
  "security": [
    {
      "IDAnywhere": []
    }
  ],
  "tags": [
    {
      "name": "Clients",
      "description": "Onboard and manage Embedded Banking clients."
    },
    {
      "name": "Accounts",
      "description": "Create, organize and manage Embedded Banking accounts."
    },
    {
      "name": "Debit Cards",
      "description": "Request and manage Embedded Banking debit cards."
    },
    {
      "name": "Recipients",
      "description": "Set up and manage who can be paid through Embedded Banking transactions."
    },
    {
      "name": "Check Deposit",
      "description": "Remotely deposit checks."
    },
    {
      "name": "Reconciliation",
      "description": "APIs to retrieve reconciled transactions as part End of Day(EOD) batch."
    },
    {
      "name": "Transactions",
      "description": "Initiate and track the movement of funds, including payments."
    },
    {
      "name": "Cases",
      "description": "Create and manage support request cases for Embedded Banking users."
    },
    {
      "name": "Legal Documents",
      "description": "Manage and access legal documents related to Embedded Banking."
    },
    {
      "name": "Reference Data",
      "description": "Access reference data to populate Embedded Banking experiences, such as onboarding."
    },
    {
      "name": "Documents",
      "description": "Manage document upload and retrieval."
    },
    {
      "name": "Users",
      "description": "Manage users of an Embedded Banking profile."
    },
    {
      "name": "Statements",
      "description": "Access monthly statements for Embedded Banking accounts."
    },
    {
      "name": "Faq",
      "description": "Retrieve general FAQ content and FAQ content unique to your platform."
    },
    {
      "name": "BillingsConfig",
      "description": "Generate client and associated pay-as-you-go configurations."
    }
  ],
  "paths": {
    "/clients": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "List clients",
        "description": "Retrieves a list of Embedded Banking clients associated with your platform.",
        "operationId": "getAllClients",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "object",
                                    "required": [
                                      "addressLine1",
                                      "city",
                                      "countryCode",
                                      "postalCode"
                                    ],
                                    "properties": {
                                      "addressType": {
                                        "type": "string",
                                        "example": "Principle Place Of Business",
                                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                      },
                                      "addressLine1": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "689 Main St",
                                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                      },
                                      "addressLine2": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "Opposite St. Andrews Church",
                                        "description": "addressLine2 has a maximum of 60 characters."
                                      },
                                      "addressLine3": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "Mini York",
                                        "description": "addressLine3 has a maximum of 60 characters."
                                      },
                                      "city": {
                                        "type": "string",
                                        "maxLength": 30,
                                        "example": "Anchorage",
                                        "description": "city has a maximum of 30 characters."
                                      },
                                      "state": {
                                        "type": "string",
                                        "example": "AZ",
                                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                      },
                                      "postalCode": {
                                        "type": "string",
                                        "maxLength": 14,
                                        "example": "99501",
                                        "description": "Postal/ZIP code."
                                      },
                                      "countryCode": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Country code in alpha-2 format."
                                      }
                                    }
                                  },
                                  "phone": {
                                    "type": "object",
                                    "required": [
                                      "countryCode",
                                      "phoneNumber"
                                    ],
                                    "properties": {
                                      "countryCode": {
                                        "type": "string",
                                        "example": "+1"
                                      },
                                      "phoneNumber": {
                                        "type": "string",
                                        "example": "7785462944"
                                      }
                                    },
                                    "description": "Phone Number Information of the account\n"
                                  },
                                  "identities": {
                                    "type": "array",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "idType",
                                            "idValue",
                                            "idIssuer"
                                          ],
                                          "properties": {
                                            "idType": {
                                              "type": "string",
                                              "example": "EIN",
                                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                            },
                                            "idDescription": {
                                              "type": "string",
                                              "example": "Employee Identification Number",
                                              "description": "Description of identification type e.g. Social Security Number"
                                            },
                                            "idIssuer": {
                                              "type": "string",
                                              "example": "US",
                                              "description": "Identification issuer country name e.g. US"
                                            },
                                            "idValue": {
                                              "type": "string",
                                              "example": "999999999",
                                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "businessType": {
                                    "type": "string",
                                    "example": "Privately Owned Business",
                                    "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                                  },
                                  "legalStructure": {
                                    "type": "string",
                                    "example": "LLC",
                                    "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                                  },
                                  "industryCategory": {
                                    "type": "string",
                                    "example": "Accommodation and Food Services",
                                    "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                                  },
                                  "industryType": {
                                    "type": "string",
                                    "example": "Bed And Breakfast Inns",
                                    "description": "Industry type.\n"
                                  },
                                  "significantOwnership": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                                  },
                                  "entitiesInOwnership": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                                  },
                                  "businessName": {
                                    "type": "string",
                                    "example": "Feltz Printing Service",
                                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                                  },
                                  "businessAliasName": {
                                    "type": "string",
                                    "example": "Feltz Printing Service of New York",
                                    "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                                  },
                                  "businessDescription": {
                                    "type": "string",
                                    "example": "Printing Service of New York",
                                    "description": "The business’s description.\n"
                                  },
                                  "websiteAvailable": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "Does your business have a website? e.g. true|false\n"
                                  },
                                  "website": {
                                    "type": "string",
                                    "example": "https://www.company.com",
                                    "description": "Website of the client. website is required if websiteAvailable is true.\n"
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "client@company.com",
                                    "description": "Email of the client.\n"
                                  },
                                  "countryOfFormation": {
                                    "type": "string",
                                    "example": "US",
                                    "description": "Country code in alpha-2 format"
                                  },
                                  "yearOfFormation": {
                                    "type": "string",
                                    "example": "2020",
                                    "description": "Year of formation. Max and Min length is 4.\n"
                                  },
                                  "parentClientId": {
                                    "type": "string",
                                    "description": "The parent (platform) relationship owner's ID."
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "parentClientId": {
                                "type": "string",
                                "example": "0006739851",
                                "description": "Client ID of the platform entity the client is onboarded to.\n"
                              },
                              "enablePayouts": {
                                "type": "boolean",
                                "example": true,
                                "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
                              },
                              "createdAt": {
                                "type": "string",
                                "example": "2021-11-17T10:04:37.000Z",
                                "description": "Date the profile was created.\n"
                              },
                              "profileStatus": {
                                "type": "string",
                                "description": "active | deleted"
                              },
                              "onboardingStatus": {
                                "type": "string",
                                "example": "In Progress, Completed, Failed",
                                "description": "The Client Onboarding Status"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                                "description": "Client ID. The unique identifier for a client.\n"
                              },
                              "status": {
                                "type": "string",
                                "description": "active | deleted",
                                "example": "active"
                              },
                              "relatedParties": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "allOf": [
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "address": {
                                                  "type": "object",
                                                  "required": [
                                                    "addressLine1",
                                                    "city",
                                                    "countryCode",
                                                    "postalCode"
                                                  ],
                                                  "properties": {
                                                    "addressType": {
                                                      "type": "string",
                                                      "example": "Principle Place Of Business",
                                                      "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                                    },
                                                    "addressLine1": {
                                                      "type": "string",
                                                      "maxLength": 60,
                                                      "example": "689 Main St",
                                                      "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                                    },
                                                    "addressLine2": {
                                                      "type": "string",
                                                      "maxLength": 60,
                                                      "example": "Opposite St. Andrews Church",
                                                      "description": "addressLine2 has a maximum of 60 characters."
                                                    },
                                                    "addressLine3": {
                                                      "type": "string",
                                                      "maxLength": 60,
                                                      "example": "Mini York",
                                                      "description": "addressLine3 has a maximum of 60 characters."
                                                    },
                                                    "city": {
                                                      "type": "string",
                                                      "maxLength": 30,
                                                      "example": "Anchorage",
                                                      "description": "city has a maximum of 30 characters."
                                                    },
                                                    "state": {
                                                      "type": "string",
                                                      "example": "AZ",
                                                      "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                                    },
                                                    "postalCode": {
                                                      "type": "string",
                                                      "maxLength": 14,
                                                      "example": "99501",
                                                      "description": "Postal/ZIP code."
                                                    },
                                                    "countryCode": {
                                                      "type": "string",
                                                      "example": "US",
                                                      "description": "Country code in alpha-2 format."
                                                    }
                                                  }
                                                },
                                                "phone": {
                                                  "type": "object",
                                                  "required": [
                                                    "countryCode",
                                                    "phoneNumber"
                                                  ],
                                                  "properties": {
                                                    "countryCode": {
                                                      "type": "string",
                                                      "example": "+1"
                                                    },
                                                    "phoneNumber": {
                                                      "type": "string",
                                                      "example": "7785462944"
                                                    }
                                                  },
                                                  "description": "Phone Number Information of the account\n"
                                                },
                                                "identities": {
                                                  "type": "array",
                                                  "items": {
                                                    "allOf": [
                                                      {
                                                        "type": "object",
                                                        "required": [
                                                          "idType",
                                                          "idValue",
                                                          "idIssuer"
                                                        ],
                                                        "properties": {
                                                          "idType": {
                                                            "type": "string",
                                                            "example": "EIN",
                                                            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                          },
                                                          "idDescription": {
                                                            "type": "string",
                                                            "example": "Employee Identification Number",
                                                            "description": "Description of identification type e.g. Social Security Number"
                                                          },
                                                          "idIssuer": {
                                                            "type": "string",
                                                            "example": "US",
                                                            "description": "Identification issuer country name e.g. US"
                                                          },
                                                          "idValue": {
                                                            "type": "string",
                                                            "example": "999999999",
                                                            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "businessName": {
                                                  "type": "string",
                                                  "example": "Feltz Printing Service",
                                                  "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                                },
                                                "firstName": {
                                                  "type": "string",
                                                  "minLength": 2,
                                                  "maxLength": 30,
                                                  "example": "Lenna",
                                                  "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                                },
                                                "middleName": {
                                                  "type": "string",
                                                  "maxLength": 30,
                                                  "example": "More",
                                                  "description": "Middle name of the individual in case of party type being an individual.\n"
                                                },
                                                "lastName": {
                                                  "type": "string",
                                                  "minLength": 2,
                                                  "maxLength": 30,
                                                  "example": "Paprocki",
                                                  "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                                },
                                                "jobTitle": {
                                                  "type": "string",
                                                  "example": "CEO",
                                                  "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                                },
                                                "jobTitleDescription": {
                                                  "type": "string",
                                                  "example": "Acting CEO",
                                                  "maxLength": 50,
                                                  "description": "In case on jobTitle is Other then Job title description is required.\n"
                                                },
                                                "birthDate": {
                                                  "type": "string",
                                                  "example": "1983-02-08T00:00:00.000Z",
                                                  "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                                },
                                                "email": {
                                                  "type": "string",
                                                  "example": "client@company.com",
                                                  "description": "Email of the individual.\n"
                                                },
                                                "natureOfOwnership": {
                                                  "type": "string",
                                                  "example": "Direct",
                                                  "description": "Nature of ownership e.g. Direct|Indirect\n"
                                                },
                                                "soleOwner": {
                                                  "type": "boolean"
                                                },
                                                "partyType": {
                                                  "type": "string",
                                                  "example": "Individual",
                                                  "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                                },
                                                "partyRole": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "example": [
                                                    "CONTROLLER",
                                                    "OWNER"
                                                  ],
                                                  "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "id",
                                            "partyType",
                                            "partyRole",
                                            "email"
                                          ],
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "example": "b98355d9-d193-4f50-9957-c699266b1530",
                                              "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                                            },
                                            "status": {
                                              "type": "string",
                                              "description": "Status of the request. Can be active or deleted.",
                                              "example": "active"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "products": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "EB"
                                ],
                                "description": "The products available for clients.\n"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create client",
        "description": "Creates a new client.",
        "operationId": "postClients",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform_id",
            "in": "header",
            "description": "Unique identifier for the platform.",
            "required": true,
            "example": "0005191231 ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "address": {
                                    "type": "object",
                                    "required": [
                                      "addressLine1",
                                      "city",
                                      "countryCode",
                                      "postalCode"
                                    ],
                                    "properties": {
                                      "addressType": {
                                        "type": "string",
                                        "example": "Principle Place Of Business",
                                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                      },
                                      "addressLine1": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "689 Main St",
                                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                      },
                                      "addressLine2": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "Opposite St. Andrews Church",
                                        "description": "addressLine2 has a maximum of 60 characters."
                                      },
                                      "addressLine3": {
                                        "type": "string",
                                        "maxLength": 60,
                                        "example": "Mini York",
                                        "description": "addressLine3 has a maximum of 60 characters."
                                      },
                                      "city": {
                                        "type": "string",
                                        "maxLength": 30,
                                        "example": "Anchorage",
                                        "description": "city has a maximum of 30 characters."
                                      },
                                      "state": {
                                        "type": "string",
                                        "example": "AZ",
                                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                      },
                                      "postalCode": {
                                        "type": "string",
                                        "maxLength": 14,
                                        "example": "99501",
                                        "description": "Postal/ZIP code."
                                      },
                                      "countryCode": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Country code in alpha-2 format."
                                      }
                                    }
                                  },
                                  "phone": {
                                    "type": "object",
                                    "required": [
                                      "countryCode",
                                      "phoneNumber"
                                    ],
                                    "properties": {
                                      "countryCode": {
                                        "type": "string",
                                        "example": "+1"
                                      },
                                      "phoneNumber": {
                                        "type": "string",
                                        "example": "7785462944"
                                      }
                                    },
                                    "description": "Phone Number Information of the account\n"
                                  },
                                  "identities": {
                                    "type": "array",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "idType",
                                            "idValue",
                                            "idIssuer"
                                          ],
                                          "properties": {
                                            "idType": {
                                              "type": "string",
                                              "example": "EIN",
                                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                            },
                                            "idDescription": {
                                              "type": "string",
                                              "example": "Employee Identification Number",
                                              "description": "Description of identification type e.g. Social Security Number"
                                            },
                                            "idIssuer": {
                                              "type": "string",
                                              "example": "US",
                                              "description": "Identification issuer country name e.g. US"
                                            },
                                            "idValue": {
                                              "type": "string",
                                              "example": "999999999",
                                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "businessType": {
                                    "type": "string",
                                    "example": "Privately Owned Business",
                                    "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                                  },
                                  "legalStructure": {
                                    "type": "string",
                                    "example": "LLC",
                                    "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                                  },
                                  "industryCategory": {
                                    "type": "string",
                                    "example": "Accommodation and Food Services",
                                    "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                                  },
                                  "industryType": {
                                    "type": "string",
                                    "example": "Bed And Breakfast Inns",
                                    "description": "Industry type.\n"
                                  },
                                  "significantOwnership": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                                  },
                                  "entitiesInOwnership": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                                  },
                                  "businessName": {
                                    "type": "string",
                                    "example": "Feltz Printing Service",
                                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                                  },
                                  "businessAliasName": {
                                    "type": "string",
                                    "example": "Feltz Printing Service of New York",
                                    "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                                  },
                                  "businessDescription": {
                                    "type": "string",
                                    "example": "Printing Service of New York",
                                    "description": "The business’s description.\n"
                                  },
                                  "websiteAvailable": {
                                    "type": "boolean",
                                    "example": true,
                                    "description": "Does your business have a website? e.g. true|false\n"
                                  },
                                  "website": {
                                    "type": "string",
                                    "example": "https://www.company.com",
                                    "description": "Website of the client. website is required if websiteAvailable is true.\n"
                                  },
                                  "email": {
                                    "type": "string",
                                    "example": "client@company.com",
                                    "description": "Email of the client.\n"
                                  },
                                  "countryOfFormation": {
                                    "type": "string",
                                    "example": "US",
                                    "description": "Country code in alpha-2 format"
                                  },
                                  "yearOfFormation": {
                                    "type": "string",
                                    "example": "2020",
                                    "description": "Year of formation. Max and Min length is 4.\n"
                                  },
                                  "parentClientId": {
                                    "type": "string",
                                    "description": "The parent (platform) relationship owner's ID."
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "type": "object",
                            "required": [
                              "businessName",
                              "businessType",
                              "industryType",
                              "industryCategory",
                              "businessDescription",
                              "countryOfFormation",
                              "websiteAvailable",
                              "yearOfFormation",
                              "address",
                              "phone",
                              "identities"
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "required": [
                      "relatedParties",
                      "products"
                    ],
                    "properties": {
                      "relatedParties": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "object",
                                          "required": [
                                            "addressLine1",
                                            "city",
                                            "countryCode",
                                            "postalCode"
                                          ],
                                          "properties": {
                                            "addressType": {
                                              "type": "string",
                                              "example": "Principle Place Of Business",
                                              "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                            },
                                            "addressLine1": {
                                              "type": "string",
                                              "maxLength": 60,
                                              "example": "689 Main St",
                                              "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                            },
                                            "addressLine2": {
                                              "type": "string",
                                              "maxLength": 60,
                                              "example": "Opposite St. Andrews Church",
                                              "description": "addressLine2 has a maximum of 60 characters."
                                            },
                                            "addressLine3": {
                                              "type": "string",
                                              "maxLength": 60,
                                              "example": "Mini York",
                                              "description": "addressLine3 has a maximum of 60 characters."
                                            },
                                            "city": {
                                              "type": "string",
                                              "maxLength": 30,
                                              "example": "Anchorage",
                                              "description": "city has a maximum of 30 characters."
                                            },
                                            "state": {
                                              "type": "string",
                                              "example": "AZ",
                                              "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                            },
                                            "postalCode": {
                                              "type": "string",
                                              "maxLength": 14,
                                              "example": "99501",
                                              "description": "Postal/ZIP code."
                                            },
                                            "countryCode": {
                                              "type": "string",
                                              "example": "US",
                                              "description": "Country code in alpha-2 format."
                                            }
                                          }
                                        },
                                        "phone": {
                                          "type": "object",
                                          "required": [
                                            "countryCode",
                                            "phoneNumber"
                                          ],
                                          "properties": {
                                            "countryCode": {
                                              "type": "string",
                                              "example": "+1"
                                            },
                                            "phoneNumber": {
                                              "type": "string",
                                              "example": "7785462944"
                                            }
                                          },
                                          "description": "Phone Number Information of the account\n"
                                        },
                                        "identities": {
                                          "type": "array",
                                          "items": {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "required": [
                                                  "idType",
                                                  "idValue",
                                                  "idIssuer"
                                                ],
                                                "properties": {
                                                  "idType": {
                                                    "type": "string",
                                                    "example": "EIN",
                                                    "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                  },
                                                  "idDescription": {
                                                    "type": "string",
                                                    "example": "Employee Identification Number",
                                                    "description": "Description of identification type e.g. Social Security Number"
                                                  },
                                                  "idIssuer": {
                                                    "type": "string",
                                                    "example": "US",
                                                    "description": "Identification issuer country name e.g. US"
                                                  },
                                                  "idValue": {
                                                    "type": "string",
                                                    "example": "999999999",
                                                    "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "businessName": {
                                          "type": "string",
                                          "example": "Feltz Printing Service",
                                          "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                        },
                                        "firstName": {
                                          "type": "string",
                                          "minLength": 2,
                                          "maxLength": 30,
                                          "example": "Lenna",
                                          "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                        },
                                        "middleName": {
                                          "type": "string",
                                          "maxLength": 30,
                                          "example": "More",
                                          "description": "Middle name of the individual in case of party type being an individual.\n"
                                        },
                                        "lastName": {
                                          "type": "string",
                                          "minLength": 2,
                                          "maxLength": 30,
                                          "example": "Paprocki",
                                          "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                        },
                                        "jobTitle": {
                                          "type": "string",
                                          "example": "CEO",
                                          "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                        },
                                        "jobTitleDescription": {
                                          "type": "string",
                                          "example": "Acting CEO",
                                          "maxLength": 50,
                                          "description": "In case on jobTitle is Other then Job title description is required.\n"
                                        },
                                        "birthDate": {
                                          "type": "string",
                                          "example": "1983-02-08T00:00:00.000Z",
                                          "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                        },
                                        "email": {
                                          "type": "string",
                                          "example": "client@company.com",
                                          "description": "Email of the individual.\n"
                                        },
                                        "natureOfOwnership": {
                                          "type": "string",
                                          "example": "Direct",
                                          "description": "Nature of ownership e.g. Direct|Indirect\n"
                                        },
                                        "soleOwner": {
                                          "type": "boolean"
                                        },
                                        "partyType": {
                                          "type": "string",
                                          "example": "Individual",
                                          "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                        },
                                        "partyRole": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "example": [
                                            "CONTROLLER",
                                            "OWNER"
                                          ],
                                          "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "birthDate",
                                    "firstName",
                                    "lastName",
                                    "partyType",
                                    "partyRole",
                                    "email"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "products": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "EB"
                        ],
                        "description": "The products available for clients.\n"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "CreateClientSolePropReq": {
                  "summary": "Create Client - Sole Prop",
                  "description": "Create Client - Sole Prop",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Sole Proprietorship",
                    "legalStructure": "Sole Proprietorship",
                    "businessName": "Unitedhealth Group Incorporated 003",
                    "significantOwnership": false,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "identities": [
                      {
                        "idType": "SSN",
                        "idDescription": "Employer Identification Number",
                        "idIssuer": "US",
                        "idValue": "100081236"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make fabulous food for your four-legged best friend",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "email": "rgs@rgs.com",
                    "websiteAvailable": true,
                    "website": "https://www.robsgolfshop.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "Alex",
                        "middleName": "XR",
                        "lastName": "Mitch",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100081236"
                          }
                        ],
                        "email": "Alex.mitch@rgs.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "3453453450"
                        }
                      }
                    ]
                  }
                },
                "CreateClientSolePropItinReq": {
                  "summary": "Create Client - Sole Prop ITIN",
                  "description": "Create Client - Sole Prop ITIN",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Sole Proprietorship",
                    "businessName": "Unitedhealth Group Incorporated",
                    "significantOwnership": false,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "legalStructure": "Sole Proprietorship",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Individual Taxpayer Identification Number",
                        "idIssuer": "US",
                        "idValue": "107595004"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make fabulous food for your four-legged best friend",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "email": "rgs@rgs.com",
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "websiteAvailable": true,
                    "website": "https://www.robsgolfshop.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "Alex",
                        "middleName": "XR",
                        "lastName": "Mitch",
                        "suffix": "M.D.",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081234"
                          }
                        ],
                        "email": "Alex.mitch@rgs.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "3453453450"
                        }
                      }
                    ]
                  }
                },
                "CreateClientLlcReq": {
                  "summary": "Create Client - LLC",
                  "description": "Create Client - LLC",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Privately Owned Business",
                    "legalStructure": "Limited Liability Company",
                    "businessName": "Rollo PVT LLC",
                    "significantOwnership": true,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Employer Identification Number",
                        "idIssuer": "US",
                        "idValue": "457750412"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make delicious food for you and your friends",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "email": "info@rollo.com",
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "websiteAvailable": true,
                    "website": "https://www.rollopvtltd.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "CONTROLLERFN",
                        "middleName": "CONTROLLERMN",
                        "lastName": "CONTROLLERLN",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "451 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100081242"
                          }
                        ],
                        "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304561"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTWO",
                        "middleName": "OWNERMNTWO",
                        "lastName": "OWNERLNTWO",
                        "address": {
                          "addressLine1": "454 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-04T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100081245"
                          }
                        ],
                        "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304564"
                        },
                        "natureOfOwnership": "Direct"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "DECISION_MAKER"
                        ],
                        "firstName": "DMFN",
                        "middleName": "DMMN",
                        "lastName": "DMLN",
                        "jobTitle": "CFO",
                        "address": {
                          "addressLine1": "451 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100081246"
                          }
                        ],
                        "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304561"
                        }
                      }
                    ]
                  }
                },
                "CreateClientLlcItinReq": {
                  "summary": "Create Client - LLC ITIN",
                  "description": "Create Client - LLC ITIN",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Privately Owned Business",
                    "legalStructure": "Limited Liability Company",
                    "businessName": "Rollo PVT LLC",
                    "significantOwnership": true,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Individual Taxpayer Identification Number",
                        "idIssuer": "US",
                        "idValue": "457750412"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make delicious food for you and your friends",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "email": "info@rollo.com",
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "websiteAvailable": true,
                    "website": "https://www.rollopvtltd.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "CONTROLLERFN",
                        "middleName": "CONTROLLERMN",
                        "lastName": "CONTROLLERLN",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "451 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081242"
                          }
                        ],
                        "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304561"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "DECISION_MAKER"
                        ],
                        "firstName": "DECISIONFN",
                        "middleName": "DECISIONMN",
                        "lastName": "DECISIONLN",
                        "jobTitle": "CFO",
                        "address": {
                          "addressLine1": "452 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-02T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081243"
                          }
                        ],
                        "email": "DECISIONFN.DECISIONLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304562"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNONE",
                        "middleName": "OWNERMNONE",
                        "lastName": "OWNERLNONE",
                        "address": {
                          "addressLine1": "453 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-03T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081244"
                          }
                        ],
                        "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304563"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTWO",
                        "middleName": "OWNERMNTWO",
                        "lastName": "OWNERLNTWO",
                        "address": {
                          "addressLine1": "454 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-04T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081245"
                          }
                        ],
                        "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304564"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTHREE",
                        "middleName": "OWNERMNTHREE",
                        "lastName": "OWNERLNTHREE",
                        "address": {
                          "addressLine1": "455 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-05T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081246"
                          }
                        ],
                        "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304565"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNFOUR",
                        "middleName": "OWNERMNFOUR",
                        "lastName": "OWNERLNFOUR",
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-06T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081247"
                          }
                        ],
                        "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304566"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      }
                    ]
                  }
                },
                "CreateClientCorpReq": {
                  "summary": "Create Client - Corp",
                  "description": "Create Client - Corp",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessName": "Caterease Banking First Client",
                    "businessType": "Privately Owned Business",
                    "legalStructure": "Corporation",
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make fabulous food for your four-legged best friend",
                    "websiteAvailable": true,
                    "email": "rgs@rgs.com",
                    "phone": {
                      "countryCode": "1",
                      "phoneNumber": "2024304567"
                    },
                    "website": "https://www.robsgolfshop.com",
                    "significantOwnership": true,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "partyType": "Organization",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Employer identification number",
                        "idIssuer": "US",
                        "idValue": "147099273"
                      }
                    ],
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "jobTitle": "CEO",
                        "firstName": "Alex",
                        "middleName": "XR",
                        "lastName": "Mitch",
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "partyRole": [
                          "CONTROLLER",
                          "OWNER"
                        ],
                        "partyType": "Individual",
                        "email": "Alex.mitch@rgs.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "3453453450"
                        },
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100091984"
                          }
                        ],
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "50"
                      },
                      {
                        "jobTitle": "CEO",
                        "firstName": "Dave",
                        "middleName": "XR",
                        "lastName": "Mitch",
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "partyRole": [
                          "OWNER"
                        ],
                        "partyType": "Individual",
                        "email": "dave.mitch@rgs.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "3453453450"
                        },
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100095284"
                          }
                        ],
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "50"
                      }
                    ]
                  }
                },
                "CreateClientCorporationItinReq": {
                  "summary": "Create Client - Corporation ITIN",
                  "description": "Create Client - Corporation ITIN",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Privately Owned Business",
                    "legalStructure": "Corporation",
                    "businessName": "Rollo PVT Corporation",
                    "significantOwnership": true,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Individual Taxpayer Identification Number",
                        "idIssuer": "US",
                        "idValue": "457750412"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make delicious food for you and your friends",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "email": "info@rollo.com",
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "websiteAvailable": true,
                    "website": "https://www.rollopvtltd.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "CONTROLLERFN",
                        "middleName": "CONTROLLERMN",
                        "lastName": "CONTROLLERLN",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "451 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081242"
                          }
                        ],
                        "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304561"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "DECISION_MAKER"
                        ],
                        "firstName": "DECISIONFN",
                        "middleName": "DECISIONMN",
                        "lastName": "DECISIONLN",
                        "jobTitle": "CFO",
                        "address": {
                          "addressLine1": "452 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-02T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081243"
                          }
                        ],
                        "email": "DECISIONFN.DECISIONLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304562"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNONE",
                        "middleName": "OWNERMNONE",
                        "lastName": "OWNERLNONE",
                        "address": {
                          "addressLine1": "453 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-03T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081244"
                          }
                        ],
                        "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304563"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTWO",
                        "middleName": "OWNERMNTWO",
                        "lastName": "OWNERLNTWO",
                        "address": {
                          "addressLine1": "454 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-04T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081245"
                          }
                        ],
                        "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304564"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTHREE",
                        "middleName": "OWNERMNTHREE",
                        "lastName": "OWNERLNTHREE",
                        "address": {
                          "addressLine1": "455 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-05T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081246"
                          }
                        ],
                        "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304565"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNFOUR",
                        "middleName": "OWNERMNFOUR",
                        "lastName": "OWNERLNFOUR",
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-06T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "ITIN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081247"
                          }
                        ],
                        "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304566"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      }
                    ]
                  }
                },
                "CreateClientLpSsnReq": {
                  "summary": "Create Client - LP SSN",
                  "description": "Create Client - LP SSN",
                  "value": {
                    "products": [
                      "EB"
                    ],
                    "businessType": "Privately Owned Business",
                    "legalStructure": "Limited Partnership",
                    "businessName": "Rollo PVT LLP",
                    "significantOwnership": true,
                    "entitiesInOwnership": false,
                    "businessAliasName": "Accommodation and Food Services Alias Name",
                    "identities": [
                      {
                        "idType": "EIN",
                        "idDescription": "Individual Taxpayer Identification Number",
                        "idIssuer": "US",
                        "idValue": "457750412"
                      }
                    ],
                    "industryCategory": "Accommodation and Food Services",
                    "industryType": "Full-Service Restaurants",
                    "businessDescription": "We make delicious food for you and your friends",
                    "address": {
                      "addressLine1": "2550 Landmeier Rd",
                      "addressLine2": "Elk Groove village",
                      "addressLine3": "Elk Groove lane",
                      "city": "Chicago",
                      "state": "IL",
                      "postalCode": "60007",
                      "countryCode": "US"
                    },
                    "email": "info@rollo.com",
                    "phone": {
                      "countryCode": "+1",
                      "phoneNumber": "2024304567"
                    },
                    "websiteAvailable": true,
                    "website": "https://www.rollopvtltd.com",
                    "countryOfFormation": "US",
                    "yearOfFormation": "2015",
                    "relatedParties": [
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "CONTROLLER"
                        ],
                        "firstName": "CONTROLLERFN",
                        "middleName": "CONTROLLERMN",
                        "lastName": "CONTROLLERLN",
                        "jobTitle": "CEO",
                        "address": {
                          "addressLine1": "451 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-01T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Social Security Number",
                            "idIssuer": "US",
                            "idValue": "100081242"
                          }
                        ],
                        "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304561"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "DECISION_MAKER"
                        ],
                        "firstName": "DECISIONFN",
                        "middleName": "DECISIONMN",
                        "lastName": "DECISIONLN",
                        "jobTitle": "CFO",
                        "address": {
                          "addressLine1": "452 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-02T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081243"
                          }
                        ],
                        "email": "DECISIONFN.DECISIONLN@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304562"
                        }
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNONE",
                        "middleName": "OWNERMNONE",
                        "lastName": "OWNERLNONE",
                        "address": {
                          "addressLine1": "453 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-03T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081244"
                          }
                        ],
                        "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304563"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTWO",
                        "middleName": "OWNERMNTWO",
                        "lastName": "OWNERLNTWO",
                        "address": {
                          "addressLine1": "454 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-04T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081245"
                          }
                        ],
                        "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304564"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNTHREE",
                        "middleName": "OWNERMNTHREE",
                        "lastName": "OWNERLNTHREE",
                        "address": {
                          "addressLine1": "455 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-05T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081246"
                          }
                        ],
                        "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304565"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      },
                      {
                        "partyType": "Individual",
                        "partyRole": [
                          "OWNER"
                        ],
                        "firstName": "OWNERFNFOUR",
                        "middleName": "OWNERMNFOUR",
                        "lastName": "OWNERLNFOUR",
                        "address": {
                          "addressLine1": "456 Rose Garden",
                          "addressLine2": "Rose Lane",
                          "addressLine3": "Rose House",
                          "city": "Newyork",
                          "state": "NY",
                          "postalCode": "10006",
                          "countryCode": "US"
                        },
                        "birthDate": "1990-01-06T00:00:00.000Z",
                        "identities": [
                          {
                            "idType": "SSN",
                            "idDescription": "Individual Taxpayer Identification Number",
                            "idIssuer": "US",
                            "idValue": "100081247"
                          }
                        ],
                        "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                        "phone": {
                          "countryCode": "+1",
                          "phoneNumber": "2024304566"
                        },
                        "natureOfOwnership": "Direct",
                        "percentageOfOwnership": "25"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "object",
                              "required": [
                                "addressLine1",
                                "city",
                                "countryCode",
                                "postalCode"
                              ],
                              "properties": {
                                "addressType": {
                                  "type": "string",
                                  "example": "Principle Place Of Business",
                                  "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                },
                                "addressLine1": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "689 Main St",
                                  "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Opposite St. Andrews Church",
                                  "description": "addressLine2 has a maximum of 60 characters."
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Mini York",
                                  "description": "addressLine3 has a maximum of 60 characters."
                                },
                                "city": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "Anchorage",
                                  "description": "city has a maximum of 30 characters."
                                },
                                "state": {
                                  "type": "string",
                                  "example": "AZ",
                                  "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "maxLength": 14,
                                  "example": "99501",
                                  "description": "Postal/ZIP code."
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format."
                                }
                              }
                            },
                            "phone": {
                              "type": "object",
                              "required": [
                                "countryCode",
                                "phoneNumber"
                              ],
                              "properties": {
                                "countryCode": {
                                  "type": "string",
                                  "example": "+1"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "7785462944"
                                }
                              },
                              "description": "Phone Number Information of the account\n"
                            },
                            "identities": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "idType",
                                      "idValue",
                                      "idIssuer"
                                    ],
                                    "properties": {
                                      "idType": {
                                        "type": "string",
                                        "example": "EIN",
                                        "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                      },
                                      "idDescription": {
                                        "type": "string",
                                        "example": "Employee Identification Number",
                                        "description": "Description of identification type e.g. Social Security Number"
                                      },
                                      "idIssuer": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Identification issuer country name e.g. US"
                                      },
                                      "idValue": {
                                        "type": "string",
                                        "example": "999999999",
                                        "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "businessType": {
                              "type": "string",
                              "example": "Privately Owned Business",
                              "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                            },
                            "legalStructure": {
                              "type": "string",
                              "example": "LLC",
                              "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                            },
                            "industryCategory": {
                              "type": "string",
                              "example": "Accommodation and Food Services",
                              "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                            },
                            "industryType": {
                              "type": "string",
                              "example": "Bed And Breakfast Inns",
                              "description": "Industry type.\n"
                            },
                            "significantOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                            },
                            "entitiesInOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                            },
                            "businessName": {
                              "type": "string",
                              "example": "Feltz Printing Service",
                              "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                            },
                            "businessAliasName": {
                              "type": "string",
                              "example": "Feltz Printing Service of New York",
                              "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                            },
                            "businessDescription": {
                              "type": "string",
                              "example": "Printing Service of New York",
                              "description": "The business’s description.\n"
                            },
                            "websiteAvailable": {
                              "type": "boolean",
                              "example": true,
                              "description": "Does your business have a website? e.g. true|false\n"
                            },
                            "website": {
                              "type": "string",
                              "example": "https://www.company.com",
                              "description": "Website of the client. website is required if websiteAvailable is true.\n"
                            },
                            "email": {
                              "type": "string",
                              "example": "client@company.com",
                              "description": "Email of the client.\n"
                            },
                            "countryOfFormation": {
                              "type": "string",
                              "example": "US",
                              "description": "Country code in alpha-2 format"
                            },
                            "yearOfFormation": {
                              "type": "string",
                              "example": "2020",
                              "description": "Year of formation. Max and Min length is 4.\n"
                            },
                            "parentClientId": {
                              "type": "string",
                              "description": "The parent (platform) relationship owner's ID."
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parentClientId": {
                          "type": "string",
                          "example": "0006739851",
                          "description": "Client ID of the platform entity the client is onboarded to.\n"
                        },
                        "enablePayouts": {
                          "type": "boolean",
                          "example": true,
                          "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2021-11-17T10:04:37.000Z",
                          "description": "Date the profile was created.\n"
                        },
                        "profileStatus": {
                          "type": "string",
                          "description": "active | deleted"
                        },
                        "onboardingStatus": {
                          "type": "string",
                          "example": "In Progress, Completed, Failed",
                          "description": "The Client Onboarding Status"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                          "description": "Client ID. The unique identifier for a client.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "active | deleted",
                          "example": "active"
                        },
                        "relatedParties": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "allOf": [
                                  {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "type": "object",
                                            "required": [
                                              "addressLine1",
                                              "city",
                                              "countryCode",
                                              "postalCode"
                                            ],
                                            "properties": {
                                              "addressType": {
                                                "type": "string",
                                                "example": "Principle Place Of Business",
                                                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                              },
                                              "addressLine1": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "689 Main St",
                                                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                              },
                                              "addressLine2": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Opposite St. Andrews Church",
                                                "description": "addressLine2 has a maximum of 60 characters."
                                              },
                                              "addressLine3": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Mini York",
                                                "description": "addressLine3 has a maximum of 60 characters."
                                              },
                                              "city": {
                                                "type": "string",
                                                "maxLength": 30,
                                                "example": "Anchorage",
                                                "description": "city has a maximum of 30 characters."
                                              },
                                              "state": {
                                                "type": "string",
                                                "example": "AZ",
                                                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                              },
                                              "postalCode": {
                                                "type": "string",
                                                "maxLength": 14,
                                                "example": "99501",
                                                "description": "Postal/ZIP code."
                                              },
                                              "countryCode": {
                                                "type": "string",
                                                "example": "US",
                                                "description": "Country code in alpha-2 format."
                                              }
                                            }
                                          },
                                          "phone": {
                                            "type": "object",
                                            "required": [
                                              "countryCode",
                                              "phoneNumber"
                                            ],
                                            "properties": {
                                              "countryCode": {
                                                "type": "string",
                                                "example": "+1"
                                              },
                                              "phoneNumber": {
                                                "type": "string",
                                                "example": "7785462944"
                                              }
                                            },
                                            "description": "Phone Number Information of the account\n"
                                          },
                                          "identities": {
                                            "type": "array",
                                            "items": {
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "required": [
                                                    "idType",
                                                    "idValue",
                                                    "idIssuer"
                                                  ],
                                                  "properties": {
                                                    "idType": {
                                                      "type": "string",
                                                      "example": "EIN",
                                                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                    },
                                                    "idDescription": {
                                                      "type": "string",
                                                      "example": "Employee Identification Number",
                                                      "description": "Description of identification type e.g. Social Security Number"
                                                    },
                                                    "idIssuer": {
                                                      "type": "string",
                                                      "example": "US",
                                                      "description": "Identification issuer country name e.g. US"
                                                    },
                                                    "idValue": {
                                                      "type": "string",
                                                      "example": "999999999",
                                                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "businessName": {
                                            "type": "string",
                                            "example": "Feltz Printing Service",
                                            "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                          },
                                          "firstName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Lenna",
                                            "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "middleName": {
                                            "type": "string",
                                            "maxLength": 30,
                                            "example": "More",
                                            "description": "Middle name of the individual in case of party type being an individual.\n"
                                          },
                                          "lastName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Paprocki",
                                            "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "jobTitle": {
                                            "type": "string",
                                            "example": "CEO",
                                            "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                          },
                                          "jobTitleDescription": {
                                            "type": "string",
                                            "example": "Acting CEO",
                                            "maxLength": 50,
                                            "description": "In case on jobTitle is Other then Job title description is required.\n"
                                          },
                                          "birthDate": {
                                            "type": "string",
                                            "example": "1983-02-08T00:00:00.000Z",
                                            "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                          },
                                          "email": {
                                            "type": "string",
                                            "example": "client@company.com",
                                            "description": "Email of the individual.\n"
                                          },
                                          "natureOfOwnership": {
                                            "type": "string",
                                            "example": "Direct",
                                            "description": "Nature of ownership e.g. Direct|Indirect\n"
                                          },
                                          "soleOwner": {
                                            "type": "boolean"
                                          },
                                          "partyType": {
                                            "type": "string",
                                            "example": "Individual",
                                            "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                          },
                                          "partyRole": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "example": [
                                              "CONTROLLER",
                                              "OWNER"
                                            ],
                                            "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "partyType",
                                      "partyRole",
                                      "email"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "b98355d9-d193-4f50-9957-c699266b1530",
                                        "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "Status of the request. Can be active or deleted.",
                                        "example": "active"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "products": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "EB"
                          ],
                          "description": "The products available for clients.\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "object",
                              "required": [
                                "addressLine1",
                                "city",
                                "countryCode",
                                "postalCode"
                              ],
                              "properties": {
                                "addressType": {
                                  "type": "string",
                                  "example": "Principle Place Of Business",
                                  "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                },
                                "addressLine1": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "689 Main St",
                                  "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Opposite St. Andrews Church",
                                  "description": "addressLine2 has a maximum of 60 characters."
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Mini York",
                                  "description": "addressLine3 has a maximum of 60 characters."
                                },
                                "city": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "Anchorage",
                                  "description": "city has a maximum of 30 characters."
                                },
                                "state": {
                                  "type": "string",
                                  "example": "AZ",
                                  "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "maxLength": 14,
                                  "example": "99501",
                                  "description": "Postal/ZIP code."
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format."
                                }
                              }
                            },
                            "phone": {
                              "type": "object",
                              "required": [
                                "countryCode",
                                "phoneNumber"
                              ],
                              "properties": {
                                "countryCode": {
                                  "type": "string",
                                  "example": "+1"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "7785462944"
                                }
                              },
                              "description": "Phone Number Information of the account\n"
                            },
                            "identities": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "idType",
                                      "idValue",
                                      "idIssuer"
                                    ],
                                    "properties": {
                                      "idType": {
                                        "type": "string",
                                        "example": "EIN",
                                        "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                      },
                                      "idDescription": {
                                        "type": "string",
                                        "example": "Employee Identification Number",
                                        "description": "Description of identification type e.g. Social Security Number"
                                      },
                                      "idIssuer": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Identification issuer country name e.g. US"
                                      },
                                      "idValue": {
                                        "type": "string",
                                        "example": "999999999",
                                        "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "businessType": {
                              "type": "string",
                              "example": "Privately Owned Business",
                              "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                            },
                            "legalStructure": {
                              "type": "string",
                              "example": "LLC",
                              "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                            },
                            "industryCategory": {
                              "type": "string",
                              "example": "Accommodation and Food Services",
                              "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                            },
                            "industryType": {
                              "type": "string",
                              "example": "Bed And Breakfast Inns",
                              "description": "Industry type.\n"
                            },
                            "significantOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                            },
                            "entitiesInOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                            },
                            "businessName": {
                              "type": "string",
                              "example": "Feltz Printing Service",
                              "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                            },
                            "businessAliasName": {
                              "type": "string",
                              "example": "Feltz Printing Service of New York",
                              "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                            },
                            "businessDescription": {
                              "type": "string",
                              "example": "Printing Service of New York",
                              "description": "The business’s description.\n"
                            },
                            "websiteAvailable": {
                              "type": "boolean",
                              "example": true,
                              "description": "Does your business have a website? e.g. true|false\n"
                            },
                            "website": {
                              "type": "string",
                              "example": "https://www.company.com",
                              "description": "Website of the client. website is required if websiteAvailable is true.\n"
                            },
                            "email": {
                              "type": "string",
                              "example": "client@company.com",
                              "description": "Email of the client.\n"
                            },
                            "countryOfFormation": {
                              "type": "string",
                              "example": "US",
                              "description": "Country code in alpha-2 format"
                            },
                            "yearOfFormation": {
                              "type": "string",
                              "example": "2020",
                              "description": "Year of formation. Max and Min length is 4.\n"
                            },
                            "parentClientId": {
                              "type": "string",
                              "description": "The parent (platform) relationship owner's ID."
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parentClientId": {
                          "type": "string",
                          "example": "0006739851",
                          "description": "Client ID of the platform entity the client is onboarded to.\n"
                        },
                        "enablePayouts": {
                          "type": "boolean",
                          "example": true,
                          "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2021-11-17T10:04:37.000Z",
                          "description": "Date the profile was created.\n"
                        },
                        "profileStatus": {
                          "type": "string",
                          "description": "active | deleted"
                        },
                        "onboardingStatus": {
                          "type": "string",
                          "example": "In Progress, Completed, Failed",
                          "description": "The Client Onboarding Status"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                          "description": "Client ID. The unique identifier for a client.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "active | deleted",
                          "example": "active"
                        },
                        "relatedParties": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "allOf": [
                                  {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "type": "object",
                                            "required": [
                                              "addressLine1",
                                              "city",
                                              "countryCode",
                                              "postalCode"
                                            ],
                                            "properties": {
                                              "addressType": {
                                                "type": "string",
                                                "example": "Principle Place Of Business",
                                                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                              },
                                              "addressLine1": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "689 Main St",
                                                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                              },
                                              "addressLine2": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Opposite St. Andrews Church",
                                                "description": "addressLine2 has a maximum of 60 characters."
                                              },
                                              "addressLine3": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Mini York",
                                                "description": "addressLine3 has a maximum of 60 characters."
                                              },
                                              "city": {
                                                "type": "string",
                                                "maxLength": 30,
                                                "example": "Anchorage",
                                                "description": "city has a maximum of 30 characters."
                                              },
                                              "state": {
                                                "type": "string",
                                                "example": "AZ",
                                                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                              },
                                              "postalCode": {
                                                "type": "string",
                                                "maxLength": 14,
                                                "example": "99501",
                                                "description": "Postal/ZIP code."
                                              },
                                              "countryCode": {
                                                "type": "string",
                                                "example": "US",
                                                "description": "Country code in alpha-2 format."
                                              }
                                            }
                                          },
                                          "phone": {
                                            "type": "object",
                                            "required": [
                                              "countryCode",
                                              "phoneNumber"
                                            ],
                                            "properties": {
                                              "countryCode": {
                                                "type": "string",
                                                "example": "+1"
                                              },
                                              "phoneNumber": {
                                                "type": "string",
                                                "example": "7785462944"
                                              }
                                            },
                                            "description": "Phone Number Information of the account\n"
                                          },
                                          "identities": {
                                            "type": "array",
                                            "items": {
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "required": [
                                                    "idType",
                                                    "idValue",
                                                    "idIssuer"
                                                  ],
                                                  "properties": {
                                                    "idType": {
                                                      "type": "string",
                                                      "example": "EIN",
                                                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                    },
                                                    "idDescription": {
                                                      "type": "string",
                                                      "example": "Employee Identification Number",
                                                      "description": "Description of identification type e.g. Social Security Number"
                                                    },
                                                    "idIssuer": {
                                                      "type": "string",
                                                      "example": "US",
                                                      "description": "Identification issuer country name e.g. US"
                                                    },
                                                    "idValue": {
                                                      "type": "string",
                                                      "example": "999999999",
                                                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "businessName": {
                                            "type": "string",
                                            "example": "Feltz Printing Service",
                                            "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                          },
                                          "firstName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Lenna",
                                            "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "middleName": {
                                            "type": "string",
                                            "maxLength": 30,
                                            "example": "More",
                                            "description": "Middle name of the individual in case of party type being an individual.\n"
                                          },
                                          "lastName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Paprocki",
                                            "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "jobTitle": {
                                            "type": "string",
                                            "example": "CEO",
                                            "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                          },
                                          "jobTitleDescription": {
                                            "type": "string",
                                            "example": "Acting CEO",
                                            "maxLength": 50,
                                            "description": "In case on jobTitle is Other then Job title description is required.\n"
                                          },
                                          "birthDate": {
                                            "type": "string",
                                            "example": "1983-02-08T00:00:00.000Z",
                                            "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                          },
                                          "email": {
                                            "type": "string",
                                            "example": "client@company.com",
                                            "description": "Email of the individual.\n"
                                          },
                                          "natureOfOwnership": {
                                            "type": "string",
                                            "example": "Direct",
                                            "description": "Nature of ownership e.g. Direct|Indirect\n"
                                          },
                                          "soleOwner": {
                                            "type": "boolean"
                                          },
                                          "partyType": {
                                            "type": "string",
                                            "example": "Individual",
                                            "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                          },
                                          "partyRole": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "example": [
                                              "CONTROLLER",
                                              "OWNER"
                                            ],
                                            "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "partyType",
                                      "partyRole",
                                      "email"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "b98355d9-d193-4f50-9957-c699266b1530",
                                        "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "Status of the request. Can be active or deleted.",
                                        "example": "active"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "products": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "EB"
                          ],
                          "description": "The products available for clients.\n"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "CreateClientSolePropRes": {
                    "summary": "Create Client - Sole Prop",
                    "description": "Create Client - Sole Prop",
                    "value": {
                      "id": "1000011676",
                      "businessName": "Unitedhealth Group Incorporated 003",
                      "businessType": "Sole Proprietorship",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make fabulous food for your four-legged best friend",
                      "websiteAvailable": true,
                      "email": "rgs@rgs.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.robsgolfshop.com",
                      "legalStructure": "Sole Proprietorship",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": false,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "e4c14bbb-8238-442b-a752-940ad71ad6c8",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Alex",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "Alex.mitch@rgs.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:01.000Z"
                    }
                  },
                  "CreateClientSolePropItinRes": {
                    "summary": "Create Client - Sole Prop ITIN",
                    "description": "Create Client - Sole Prop ITIN",
                    "value": {
                      "id": "1000011673",
                      "businessName": "Unitedhealth Group Incorporated",
                      "businessType": "Sole Proprietorship",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make fabulous food for your four-legged best friend",
                      "websiteAvailable": true,
                      "email": "rgs@rgs.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.robsgolfshop.com",
                      "legalStructure": "Sole Proprietorship",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": false,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "10aa439e-abf9-4d3c-9f61-bfe6aac2e17c",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Alex",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "Alex.mitch@rgs.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T10:09:39.000Z"
                    }
                  },
                  "CreateClientLlcRes": {
                    "summary": "Create Client - LLC",
                    "description": "Create Client - LLC",
                    "value": {
                      "id": "1000011677",
                      "businessName": "Rollo PVT LLC",
                      "businessType": "Privately Owned Business",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": true,
                      "email": "info@rollo.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.rollopvtltd.com",
                      "legalStructure": "Limited Liability Company",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": true,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "10123037-5879-41ff-a9c5-0992f5d4496f",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "CONTROLLERFN",
                          "middleName": "CONTROLLERMN",
                          "lastName": "CONTROLLERLN",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304561"
                          },
                          "address": {
                            "addressLine1": "451 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        },
                        {
                          "id": "87d64f5a-b63d-48a1-8213-e13c10277ab6",
                          "status": "active",
                          "firstName": "OWNERFNTWO",
                          "middleName": "OWNERMNTWO",
                          "lastName": "OWNERLNTWO",
                          "birthDate": "1990-01-04T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304564"
                          },
                          "address": {
                            "addressLine1": "454 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "e165d19d-9514-410c-bec5-33b28a25d4a4",
                          "status": "active",
                          "jobTitle": "CFO",
                          "firstName": "DMFN",
                          "middleName": "DMMN",
                          "lastName": "DMLN",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "DECISION_MAKER"
                          ],
                          "partyType": "Individual",
                          "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304561"
                          },
                          "address": {
                            "addressLine1": "451 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:16.000Z"
                    }
                  },
                  "CreateClientLlcItinRes": {
                    "summary": "Create Client - LLC ITIN",
                    "description": "Create Client - LLC ITIN",
                    "value": {
                      "id": "1000011678",
                      "businessName": "Rollo PVT LLC",
                      "businessType": "Privately Owned Business",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": true,
                      "email": "info@rollo.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.rollopvtltd.com",
                      "legalStructure": "Limited Liability Company",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": true,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "c4730b6e-6276-48c3-98c0-09e42bd1895b",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "CONTROLLERFN",
                          "middleName": "CONTROLLERMN",
                          "lastName": "CONTROLLERLN",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304561"
                          },
                          "address": {
                            "addressLine1": "451 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        },
                        {
                          "id": "e4fbc61c-5706-4796-966c-b11d7579fcf1",
                          "status": "active",
                          "firstName": "OWNERFNTWO",
                          "middleName": "OWNERMNTWO",
                          "lastName": "OWNERLNTWO",
                          "birthDate": "1990-01-04T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304564"
                          },
                          "address": {
                            "addressLine1": "454 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "c7f97a1e-64e3-43e1-b0e9-ce1c2b3a996e",
                          "status": "active",
                          "firstName": "OWNERFNONE",
                          "middleName": "OWNERMNONE",
                          "lastName": "OWNERLNONE",
                          "birthDate": "1990-01-03T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304563"
                          },
                          "address": {
                            "addressLine1": "453 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "3e439e22-6ae4-4ac6-8046-9e51614340aa",
                          "status": "active",
                          "firstName": "OWNERFNFOUR",
                          "middleName": "OWNERMNFOUR",
                          "lastName": "OWNERLNFOUR",
                          "birthDate": "1990-01-06T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304566"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "41c57153-8110-484f-a2b6-6defb7230801",
                          "status": "active",
                          "firstName": "OWNERFNTHREE",
                          "middleName": "OWNERMNTHREE",
                          "lastName": "OWNERLNTHREE",
                          "birthDate": "1990-01-05T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304565"
                          },
                          "address": {
                            "addressLine1": "455 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "fe4c7cea-02ba-4197-bf45-ab6db3fa2529",
                          "status": "active",
                          "jobTitle": "CFO",
                          "firstName": "DECISIONFN",
                          "middleName": "DECISIONMN",
                          "lastName": "DECISIONLN",
                          "birthDate": "1990-01-02T00:00:00.000Z",
                          "partyRole": [
                            "DECISION_MAKER"
                          ],
                          "partyType": "Individual",
                          "email": "DECISIONFN.DECISIONLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304562"
                          },
                          "address": {
                            "addressLine1": "452 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:23.000Z"
                    }
                  },
                  "CreateClientCorpRes": {
                    "summary": "Create Client - Corp",
                    "description": "Create Client - Corp",
                    "value": {
                      "id": "1000011679",
                      "businessName": "Caterease Banking First Client",
                      "businessType": "Privately Owned Business",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make fabulous food for your four-legged best friend",
                      "websiteAvailable": true,
                      "email": "rgs@rgs.com",
                      "phone": {
                        "countryCode": "1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.robsgolfshop.com",
                      "legalStructure": "Corporation",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": true,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "fd48765c-f753-4d1e-97ab-8f3fb6aa4142",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Alex",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER",
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "Alex.mitch@rgs.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "29c43101-7234-44c3-8e01-350d585df20f",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Dave",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "dave.mitch@rgs.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:29.000Z"
                    }
                  },
                  "CreateClientCorporationItinRes": {
                    "summary": "Create Client - Corporation ITIN",
                    "description": "Create Client - Corporation ITIN",
                    "value": {
                      "id": "1000011680",
                      "businessName": "Rollo PVT Corporation",
                      "businessType": "Privately Owned Business",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": true,
                      "email": "info@rollo.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.rollopvtltd.com",
                      "legalStructure": "Corporation",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": true,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "5a2ef358-f2e2-46a8-af6f-873f35694680",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "CONTROLLERFN",
                          "middleName": "CONTROLLERMN",
                          "lastName": "CONTROLLERLN",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304561"
                          },
                          "address": {
                            "addressLine1": "451 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        },
                        {
                          "id": "3d0b699a-b62d-43fd-a264-1f4b8ebf6484",
                          "status": "active",
                          "firstName": "OWNERFNTWO",
                          "middleName": "OWNERMNTWO",
                          "lastName": "OWNERLNTWO",
                          "birthDate": "1990-01-04T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304564"
                          },
                          "address": {
                            "addressLine1": "454 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "e5f34f9d-8678-482a-abbe-760f4336e28d",
                          "status": "active",
                          "firstName": "OWNERFNFOUR",
                          "middleName": "OWNERMNFOUR",
                          "lastName": "OWNERLNFOUR",
                          "birthDate": "1990-01-06T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304566"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "f2d987f9-9be2-4f4b-b356-9a3b79046ee2",
                          "status": "active",
                          "firstName": "OWNERFNTHREE",
                          "middleName": "OWNERMNTHREE",
                          "lastName": "OWNERLNTHREE",
                          "birthDate": "1990-01-05T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304565"
                          },
                          "address": {
                            "addressLine1": "455 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "c961175e-f0f0-4bed-beca-0e27208fd9e4",
                          "status": "active",
                          "firstName": "OWNERFNONE",
                          "middleName": "OWNERMNONE",
                          "lastName": "OWNERLNONE",
                          "birthDate": "1990-01-03T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304563"
                          },
                          "address": {
                            "addressLine1": "453 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "27ba007d-6bbb-4cf6-a07a-967d10ea01aa",
                          "status": "active",
                          "jobTitle": "CFO",
                          "firstName": "DECISIONFN",
                          "middleName": "DECISIONMN",
                          "lastName": "DECISIONLN",
                          "birthDate": "1990-01-02T00:00:00.000Z",
                          "partyRole": [
                            "DECISION_MAKER"
                          ],
                          "partyType": "Individual",
                          "email": "DECISIONFN.DECISIONLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304562"
                          },
                          "address": {
                            "addressLine1": "452 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:35.000Z"
                    }
                  },
                  "CreateClientLpSsnRes": {
                    "summary": "Create Client - LP SSN",
                    "description": "Create Client - LP SSN",
                    "value": {
                      "id": "1000011681",
                      "businessName": "Rollo PVT LLP",
                      "businessType": "Privately Owned Business",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": true,
                      "email": "info@rollo.com",
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "website": "https://www.rollopvtltd.com",
                      "legalStructure": "Limited Partnership",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": true,
                      "entitiesInOwnership": false,
                      "businessAliasName": "Accommodation and Food Services Alias Name",
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "78e4b9a5-d77b-467f-9c58-0dd790545b21",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "CONTROLLERFN",
                          "middleName": "CONTROLLERMN",
                          "lastName": "CONTROLLERLN",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304561"
                          },
                          "address": {
                            "addressLine1": "451 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        },
                        {
                          "id": "ba91838e-6415-4f82-91d8-5ebabcaaa021",
                          "status": "active",
                          "firstName": "OWNERFNONE",
                          "middleName": "OWNERMNONE",
                          "lastName": "OWNERLNONE",
                          "birthDate": "1990-01-03T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNONE.OWNERLNONE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304563"
                          },
                          "address": {
                            "addressLine1": "453 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "d6a881c7-a259-467f-ac8f-6f96aad1622c",
                          "status": "active",
                          "firstName": "OWNERFNFOUR",
                          "middleName": "OWNERMNFOUR",
                          "lastName": "OWNERLNFOUR",
                          "birthDate": "1990-01-06T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304566"
                          },
                          "address": {
                            "addressLine1": "456 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "9abba205-d184-4dcc-9296-0cf7c4973af0",
                          "status": "active",
                          "firstName": "OWNERFNTHREE",
                          "middleName": "OWNERMNTHREE",
                          "lastName": "OWNERLNTHREE",
                          "birthDate": "1990-01-05T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304565"
                          },
                          "address": {
                            "addressLine1": "455 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "c004176b-815a-4c40-8933-e1cc6e2c3ef4",
                          "status": "active",
                          "firstName": "OWNERFNTWO",
                          "middleName": "OWNERMNTWO",
                          "lastName": "OWNERLNTWO",
                          "birthDate": "1990-01-04T00:00:00.000Z",
                          "partyRole": [
                            "OWNER"
                          ],
                          "partyType": "Individual",
                          "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304564"
                          },
                          "address": {
                            "addressLine1": "454 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          },
                          "natureOfOwnership": "Direct"
                        },
                        {
                          "id": "cdac35e9-f5bd-4a24-a53b-348e5607f4f7",
                          "status": "active",
                          "jobTitle": "CFO",
                          "firstName": "DECISIONFN",
                          "middleName": "DECISIONMN",
                          "lastName": "DECISIONLN",
                          "birthDate": "1990-01-02T00:00:00.000Z",
                          "partyRole": [
                            "DECISION_MAKER"
                          ],
                          "partyType": "Individual",
                          "email": "DECISIONFN.DECISIONLN@rollo.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "2024304562"
                          },
                          "address": {
                            "addressLine1": "452 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission",
                      "products": [
                        "EB"
                      ],
                      "profileStatus": "INACTIVE",
                      "createdAt": "2023-03-09T13:15:41.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get client",
        "description": "Returns details for a specific client using their unique identifier.",
        "operationId": "getClientDetails",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for a client.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            },
            "example": "1000011675"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "object",
                              "required": [
                                "addressLine1",
                                "city",
                                "countryCode",
                                "postalCode"
                              ],
                              "properties": {
                                "addressType": {
                                  "type": "string",
                                  "example": "Principle Place Of Business",
                                  "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                },
                                "addressLine1": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "689 Main St",
                                  "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Opposite St. Andrews Church",
                                  "description": "addressLine2 has a maximum of 60 characters."
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Mini York",
                                  "description": "addressLine3 has a maximum of 60 characters."
                                },
                                "city": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "Anchorage",
                                  "description": "city has a maximum of 30 characters."
                                },
                                "state": {
                                  "type": "string",
                                  "example": "AZ",
                                  "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "maxLength": 14,
                                  "example": "99501",
                                  "description": "Postal/ZIP code."
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format."
                                }
                              }
                            },
                            "phone": {
                              "type": "object",
                              "required": [
                                "countryCode",
                                "phoneNumber"
                              ],
                              "properties": {
                                "countryCode": {
                                  "type": "string",
                                  "example": "+1"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "7785462944"
                                }
                              },
                              "description": "Phone Number Information of the account\n"
                            },
                            "identities": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "idType",
                                      "idValue",
                                      "idIssuer"
                                    ],
                                    "properties": {
                                      "idType": {
                                        "type": "string",
                                        "example": "EIN",
                                        "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                      },
                                      "idDescription": {
                                        "type": "string",
                                        "example": "Employee Identification Number",
                                        "description": "Description of identification type e.g. Social Security Number"
                                      },
                                      "idIssuer": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Identification issuer country name e.g. US"
                                      },
                                      "idValue": {
                                        "type": "string",
                                        "example": "999999999",
                                        "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "businessType": {
                              "type": "string",
                              "example": "Privately Owned Business",
                              "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                            },
                            "legalStructure": {
                              "type": "string",
                              "example": "LLC",
                              "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                            },
                            "industryCategory": {
                              "type": "string",
                              "example": "Accommodation and Food Services",
                              "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                            },
                            "industryType": {
                              "type": "string",
                              "example": "Bed And Breakfast Inns",
                              "description": "Industry type.\n"
                            },
                            "significantOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                            },
                            "entitiesInOwnership": {
                              "type": "boolean",
                              "example": true,
                              "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                            },
                            "businessName": {
                              "type": "string",
                              "example": "Feltz Printing Service",
                              "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                            },
                            "businessAliasName": {
                              "type": "string",
                              "example": "Feltz Printing Service of New York",
                              "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                            },
                            "businessDescription": {
                              "type": "string",
                              "example": "Printing Service of New York",
                              "description": "The business’s description.\n"
                            },
                            "websiteAvailable": {
                              "type": "boolean",
                              "example": true,
                              "description": "Does your business have a website? e.g. true|false\n"
                            },
                            "website": {
                              "type": "string",
                              "example": "https://www.company.com",
                              "description": "Website of the client. website is required if websiteAvailable is true.\n"
                            },
                            "email": {
                              "type": "string",
                              "example": "client@company.com",
                              "description": "Email of the client.\n"
                            },
                            "countryOfFormation": {
                              "type": "string",
                              "example": "US",
                              "description": "Country code in alpha-2 format"
                            },
                            "yearOfFormation": {
                              "type": "string",
                              "example": "2020",
                              "description": "Year of formation. Max and Min length is 4.\n"
                            },
                            "parentClientId": {
                              "type": "string",
                              "description": "The parent (platform) relationship owner's ID."
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "parentClientId": {
                          "type": "string",
                          "example": "0006739851",
                          "description": "Client ID of the platform entity the client is onboarded to.\n"
                        },
                        "enablePayouts": {
                          "type": "boolean",
                          "example": true,
                          "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2021-11-17T10:04:37.000Z",
                          "description": "Date the profile was created.\n"
                        },
                        "profileStatus": {
                          "type": "string",
                          "description": "active | deleted"
                        },
                        "onboardingStatus": {
                          "type": "string",
                          "example": "In Progress, Completed, Failed",
                          "description": "The Client Onboarding Status"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                          "description": "Client ID. The unique identifier for a client.\n"
                        },
                        "status": {
                          "type": "string",
                          "description": "active | deleted",
                          "example": "active"
                        },
                        "relatedParties": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "allOf": [
                                  {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "address": {
                                            "type": "object",
                                            "required": [
                                              "addressLine1",
                                              "city",
                                              "countryCode",
                                              "postalCode"
                                            ],
                                            "properties": {
                                              "addressType": {
                                                "type": "string",
                                                "example": "Principle Place Of Business",
                                                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                              },
                                              "addressLine1": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "689 Main St",
                                                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                              },
                                              "addressLine2": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Opposite St. Andrews Church",
                                                "description": "addressLine2 has a maximum of 60 characters."
                                              },
                                              "addressLine3": {
                                                "type": "string",
                                                "maxLength": 60,
                                                "example": "Mini York",
                                                "description": "addressLine3 has a maximum of 60 characters."
                                              },
                                              "city": {
                                                "type": "string",
                                                "maxLength": 30,
                                                "example": "Anchorage",
                                                "description": "city has a maximum of 30 characters."
                                              },
                                              "state": {
                                                "type": "string",
                                                "example": "AZ",
                                                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                              },
                                              "postalCode": {
                                                "type": "string",
                                                "maxLength": 14,
                                                "example": "99501",
                                                "description": "Postal/ZIP code."
                                              },
                                              "countryCode": {
                                                "type": "string",
                                                "example": "US",
                                                "description": "Country code in alpha-2 format."
                                              }
                                            }
                                          },
                                          "phone": {
                                            "type": "object",
                                            "required": [
                                              "countryCode",
                                              "phoneNumber"
                                            ],
                                            "properties": {
                                              "countryCode": {
                                                "type": "string",
                                                "example": "+1"
                                              },
                                              "phoneNumber": {
                                                "type": "string",
                                                "example": "7785462944"
                                              }
                                            },
                                            "description": "Phone Number Information of the account\n"
                                          },
                                          "identities": {
                                            "type": "array",
                                            "items": {
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "required": [
                                                    "idType",
                                                    "idValue",
                                                    "idIssuer"
                                                  ],
                                                  "properties": {
                                                    "idType": {
                                                      "type": "string",
                                                      "example": "EIN",
                                                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                    },
                                                    "idDescription": {
                                                      "type": "string",
                                                      "example": "Employee Identification Number",
                                                      "description": "Description of identification type e.g. Social Security Number"
                                                    },
                                                    "idIssuer": {
                                                      "type": "string",
                                                      "example": "US",
                                                      "description": "Identification issuer country name e.g. US"
                                                    },
                                                    "idValue": {
                                                      "type": "string",
                                                      "example": "999999999",
                                                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "businessName": {
                                            "type": "string",
                                            "example": "Feltz Printing Service",
                                            "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                          },
                                          "firstName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Lenna",
                                            "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "middleName": {
                                            "type": "string",
                                            "maxLength": 30,
                                            "example": "More",
                                            "description": "Middle name of the individual in case of party type being an individual.\n"
                                          },
                                          "lastName": {
                                            "type": "string",
                                            "minLength": 2,
                                            "maxLength": 30,
                                            "example": "Paprocki",
                                            "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                          },
                                          "jobTitle": {
                                            "type": "string",
                                            "example": "CEO",
                                            "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                          },
                                          "jobTitleDescription": {
                                            "type": "string",
                                            "example": "Acting CEO",
                                            "maxLength": 50,
                                            "description": "In case on jobTitle is Other then Job title description is required.\n"
                                          },
                                          "birthDate": {
                                            "type": "string",
                                            "example": "1983-02-08T00:00:00.000Z",
                                            "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                          },
                                          "email": {
                                            "type": "string",
                                            "example": "client@company.com",
                                            "description": "Email of the individual.\n"
                                          },
                                          "natureOfOwnership": {
                                            "type": "string",
                                            "example": "Direct",
                                            "description": "Nature of ownership e.g. Direct|Indirect\n"
                                          },
                                          "soleOwner": {
                                            "type": "boolean"
                                          },
                                          "partyType": {
                                            "type": "string",
                                            "example": "Individual",
                                            "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                          },
                                          "partyRole": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "example": [
                                              "CONTROLLER",
                                              "OWNER"
                                            ],
                                            "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "partyType",
                                      "partyRole",
                                      "email"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "b98355d9-d193-4f50-9957-c699266b1530",
                                        "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                                      },
                                      "status": {
                                        "type": "string",
                                        "description": "Status of the request. Can be active or deleted.",
                                        "example": "active"
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "products": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "EB"
                          ],
                          "description": "The products available for clients.\n"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "SkeletonClientClientShouldRetrieveItsOwnInformationRes": {
                    "summary": "Skeleton Client - Client should retrieve its own information",
                    "description": "Skeleton Client - Client should retrieve its own information",
                    "value": {
                      "id": "1000011675",
                      "businessName": "Postman bunisess businessName",
                      "websiteAvailable": false,
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": false,
                      "entitiesInOwnership": false,
                      "partyRole": [
                        "CLIENT"
                      ],
                      "partyType": "Organization",
                      "relatedParties": [
                        {
                          "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
                          "status": "active",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "controller@email.com"
                        }
                      ],
                      "enablePayouts": false,
                      "onboardingStatus": "Pending Submission"
                    }
                  },
                  "IncompleteOnboardingClientShouldRetrieveItsOwnInformationRes": {
                    "summary": "Incomplete Onboarding - Client should retrieve its own information",
                    "description": "Incomplete Onboarding - Client should retrieve its own information",
                    "value": {
                      "id": "1000011675",
                      "businessName": "Postman bunisess businessName",
                      "businessType": "Sole Proprietorship",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": false,
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "legalStructure": "Sole Proprietorship",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": false,
                      "entitiesInOwnership": false,
                      "partyRole": [
                        "CLIENT"
                      ],
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Alex",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "controller@email.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "453 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": false,
                      "onboardingStatus": "Review in Progress"
                    }
                  },
                  "FullyOnboardedClientClientShouldRetrieveItsOwnInformationRes": {
                    "summary": "Fully Onboarded Client - Client should retrieve its own information",
                    "description": "Fully Onboarded Client - Client should retrieve its own information",
                    "value": {
                      "id": "1000011675",
                      "businessName": "Postman bunisess businessName",
                      "businessType": "Sole Proprietorship",
                      "industryCategory": "Accommodation and Food Services",
                      "industryType": "Full-Service Restaurants",
                      "businessDescription": "We make delicious food for you and your friends",
                      "websiteAvailable": false,
                      "phone": {
                        "countryCode": "+1",
                        "phoneNumber": "2024304567"
                      },
                      "legalStructure": "Sole Proprietorship",
                      "status": "ACTIVE",
                      "parentClientId": "0005191231",
                      "significantOwnership": false,
                      "entitiesInOwnership": false,
                      "partyRole": [
                        "CLIENT"
                      ],
                      "partyType": "Organization",
                      "address": {
                        "addressLine1": "2550 Landmeier Rd",
                        "addressLine2": "Elk Groove village",
                        "addressLine3": "Elk Groove lane",
                        "city": "Chicago",
                        "state": "IL",
                        "postalCode": "60007",
                        "countryCode": "US",
                        "addressType": "Principal place of business"
                      },
                      "relatedParties": [
                        {
                          "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
                          "status": "active",
                          "jobTitle": "CEO",
                          "firstName": "Alex",
                          "middleName": "XR",
                          "lastName": "Mitch",
                          "birthDate": "1990-01-01T00:00:00.000Z",
                          "partyRole": [
                            "CONTROLLER"
                          ],
                          "partyType": "Individual",
                          "email": "controller@email.com",
                          "phone": {
                            "countryCode": "+1",
                            "phoneNumber": "3453453450"
                          },
                          "address": {
                            "addressLine1": "453 Rose Garden",
                            "addressLine2": "Rose Lane",
                            "addressLine3": "Rose House",
                            "city": "Newyork",
                            "state": "NY",
                            "postalCode": "10006",
                            "countryCode": "US",
                            "addressType": "Primary Residence"
                          }
                        }
                      ],
                      "countryOfFormation": "US",
                      "yearOfFormation": "2015",
                      "enablePayouts": true,
                      "onboardingStatus": "Complete"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Update client",
        "description": "Updates information about a specified client.",
        "operationId": "updateClients",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for a client.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "object",
                                "properties": {
                                  "addressType": {
                                    "type": "string",
                                    "example": "Principle Place Of Business",
                                    "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                  },
                                  "addressLine1": {
                                    "type": "string",
                                    "maxLength": 60,
                                    "example": "689 Main St",
                                    "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                  },
                                  "addressLine2": {
                                    "type": "string",
                                    "maxLength": 60,
                                    "example": "Opposite St. Andrews Church",
                                    "description": "addressLine2 has a maximum of 60 characters."
                                  },
                                  "addressLine3": {
                                    "type": "string",
                                    "maxLength": 60,
                                    "example": "Mini York",
                                    "description": "addressLine3 has a maximum of 60 characters."
                                  },
                                  "city": {
                                    "type": "string",
                                    "maxLength": 30,
                                    "example": "Anchorage",
                                    "description": "city has a maximum of 30 characters."
                                  },
                                  "state": {
                                    "type": "string",
                                    "example": "AZ",
                                    "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                  },
                                  "postalCode": {
                                    "type": "string",
                                    "maxLength": 14,
                                    "example": "99501",
                                    "description": "Postal/ZIP code."
                                  },
                                  "countryCode": {
                                    "type": "string",
                                    "example": "US",
                                    "description": "Country code in alpha-2 format."
                                  }
                                }
                              },
                              "phone": {
                                "type": "object",
                                "properties": {
                                  "countryCode": {
                                    "type": "string",
                                    "example": "+1"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "example": "7785462944"
                                  }
                                },
                                "description": "Phone Number Information of the account\n"
                              },
                              "identities": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "action",
                                        "idType",
                                        "idIssuer",
                                        "idValue"
                                      ],
                                      "properties": {
                                        "idType": {
                                          "type": "string",
                                          "example": "EIN",
                                          "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                        },
                                        "idDescription": {
                                          "type": "string",
                                          "example": "Employee Identification Number",
                                          "description": "Description of identification type e.g. Social Security Number"
                                        },
                                        "idIssuer": {
                                          "type": "string",
                                          "example": "US",
                                          "description": "Identification issuer country name e.g. US"
                                        },
                                        "idValue": {
                                          "type": "string",
                                          "example": "999999999",
                                          "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                        },
                                        "action": {
                                          "type": "string",
                                          "example": "ADD",
                                          "description": "The action like ADD, UPDATE, REMOVE\n"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "businessType": {
                                "type": "string",
                                "example": "Privately Owned Business",
                                "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                              },
                              "legalStructure": {
                                "type": "string",
                                "example": "LLC",
                                "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                              },
                              "industryCategory": {
                                "type": "string",
                                "example": "Accommodation and Food Services",
                                "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                              },
                              "industryType": {
                                "type": "string",
                                "example": "Bed And Breakfast Inns",
                                "description": "Industry type.\n"
                              },
                              "significantOwnership": {
                                "type": "boolean",
                                "example": true,
                                "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                              },
                              "entitiesInOwnership": {
                                "type": "boolean",
                                "example": true,
                                "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                              },
                              "businessName": {
                                "type": "string",
                                "example": "Feltz Printing Service",
                                "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                              },
                              "businessAliasName": {
                                "type": "string",
                                "example": "Feltz Printing Service of New York",
                                "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                              },
                              "businessDescription": {
                                "type": "string",
                                "example": "Printing Service of New York",
                                "description": "The business’s description.\n"
                              },
                              "websiteAvailable": {
                                "type": "boolean",
                                "example": true,
                                "description": "Does your business have a website? e.g. true|false\n"
                              },
                              "website": {
                                "type": "string",
                                "example": "https://www.company.com",
                                "description": "Website of the client. website is required if websiteAvailable is true.\n"
                              },
                              "email": {
                                "type": "string",
                                "example": "client@company.com",
                                "description": "Email of the client.\n"
                              },
                              "countryOfFormation": {
                                "type": "string",
                                "example": "US",
                                "description": "Country code in alpha-2 format"
                              },
                              "yearOfFormation": {
                                "type": "string",
                                "example": "2020",
                                "description": "Year of formation. Max and Min length is 4.\n"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "1234567891",
                            "description": "Client id, that uniquely identifies the client.\n"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "relatedParties": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "type": "object",
                                      "properties": {
                                        "addressType": {
                                          "type": "string",
                                          "example": "Principle Place Of Business",
                                          "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                        },
                                        "addressLine1": {
                                          "type": "string",
                                          "maxLength": 60,
                                          "example": "689 Main St",
                                          "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                        },
                                        "addressLine2": {
                                          "type": "string",
                                          "maxLength": 60,
                                          "example": "Opposite St. Andrews Church",
                                          "description": "addressLine2 has a maximum of 60 characters."
                                        },
                                        "addressLine3": {
                                          "type": "string",
                                          "maxLength": 60,
                                          "example": "Mini York",
                                          "description": "addressLine3 has a maximum of 60 characters."
                                        },
                                        "city": {
                                          "type": "string",
                                          "maxLength": 30,
                                          "example": "Anchorage",
                                          "description": "city has a maximum of 30 characters."
                                        },
                                        "state": {
                                          "type": "string",
                                          "example": "AZ",
                                          "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                        },
                                        "postalCode": {
                                          "type": "string",
                                          "maxLength": 14,
                                          "example": "99501",
                                          "description": "Postal/ZIP code."
                                        },
                                        "countryCode": {
                                          "type": "string",
                                          "example": "US",
                                          "description": "Country code in alpha-2 format."
                                        }
                                      }
                                    },
                                    "phone": {
                                      "type": "object",
                                      "properties": {
                                        "countryCode": {
                                          "type": "string",
                                          "example": "+1"
                                        },
                                        "phoneNumber": {
                                          "type": "string",
                                          "example": "7785462944"
                                        }
                                      },
                                      "description": "Phone Number Information of the account\n"
                                    },
                                    "identities": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "required": [
                                              "action",
                                              "idType",
                                              "idIssuer",
                                              "idValue"
                                            ],
                                            "properties": {
                                              "idType": {
                                                "type": "string",
                                                "example": "EIN",
                                                "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                              },
                                              "idDescription": {
                                                "type": "string",
                                                "example": "Employee Identification Number",
                                                "description": "Description of identification type e.g. Social Security Number"
                                              },
                                              "idIssuer": {
                                                "type": "string",
                                                "example": "US",
                                                "description": "Identification issuer country name e.g. US"
                                              },
                                              "idValue": {
                                                "type": "string",
                                                "example": "999999999",
                                                "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                              },
                                              "action": {
                                                "type": "string",
                                                "example": "ADD",
                                                "description": "The action like ADD, UPDATE, REMOVE\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                                      "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                                    },
                                    "businessName": {
                                      "type": "string",
                                      "example": "Feltz Printing Service",
                                      "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                    },
                                    "firstName": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 30,
                                      "example": "Lenna",
                                      "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                    },
                                    "middleName": {
                                      "type": "string",
                                      "maxLength": 30,
                                      "example": "More",
                                      "description": "Middle name of the individual in case of party type being an individual.\n"
                                    },
                                    "lastName": {
                                      "type": "string",
                                      "minLength": 2,
                                      "maxLength": 30,
                                      "example": "Paprocki",
                                      "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                    },
                                    "jobTitle": {
                                      "type": "string",
                                      "example": "CEO",
                                      "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                    },
                                    "jobTitleDescription": {
                                      "type": "string",
                                      "example": "Acting CEO",
                                      "maxLength": 50,
                                      "description": "In case on jobTitle is Other then Job title description is required.\n"
                                    },
                                    "birthDate": {
                                      "type": "string",
                                      "example": "1983-02-08T00:00:00.000Z",
                                      "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                    },
                                    "email": {
                                      "type": "string",
                                      "example": "client@company.com",
                                      "description": "Email of the individual.\n"
                                    },
                                    "natureOfOwnership": {
                                      "type": "string",
                                      "example": "Direct",
                                      "description": "Nature of ownership e.g. Direct|Indirect\n"
                                    },
                                    "soleOwner": {
                                      "type": "boolean"
                                    },
                                    "partyType": {
                                      "type": "string",
                                      "example": "Individual",
                                      "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                    },
                                    "partyRole": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "example": [
                                        "CONTROLLER",
                                        "OWNER"
                                      ],
                                      "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "object",
                              "required": [
                                "action"
                              ],
                              "properties": {
                                "action": {
                                  "type": "string",
                                  "example": "ADD",
                                  "description": "The action like ADD, UPDATE, REMOVE\n"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "type": "object",
                                  "properties": {
                                    "addressType": {
                                      "type": "string",
                                      "example": "Principle Place Of Business",
                                      "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                    },
                                    "addressLine1": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "689 Main St",
                                      "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                    },
                                    "addressLine2": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Opposite St. Andrews Church",
                                      "description": "addressLine2 has a maximum of 60 characters."
                                    },
                                    "addressLine3": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Mini York",
                                      "description": "addressLine3 has a maximum of 60 characters."
                                    },
                                    "city": {
                                      "type": "string",
                                      "maxLength": 30,
                                      "example": "Anchorage",
                                      "description": "city has a maximum of 30 characters."
                                    },
                                    "state": {
                                      "type": "string",
                                      "example": "AZ",
                                      "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                    },
                                    "postalCode": {
                                      "type": "string",
                                      "maxLength": 14,
                                      "example": "99501",
                                      "description": "Postal/ZIP code."
                                    },
                                    "countryCode": {
                                      "type": "string",
                                      "example": "US",
                                      "description": "Country code in alpha-2 format."
                                    }
                                  }
                                },
                                "phone": {
                                  "type": "object",
                                  "properties": {
                                    "countryCode": {
                                      "type": "string",
                                      "example": "+1"
                                    },
                                    "phoneNumber": {
                                      "type": "string",
                                      "example": "7785462944"
                                    }
                                  },
                                  "description": "Phone Number Information of the account\n"
                                },
                                "identities": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "required": [
                                          "action",
                                          "idType",
                                          "idIssuer",
                                          "idValue"
                                        ],
                                        "properties": {
                                          "idType": {
                                            "type": "string",
                                            "example": "EIN",
                                            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                          },
                                          "idDescription": {
                                            "type": "string",
                                            "example": "Employee Identification Number",
                                            "description": "Description of identification type e.g. Social Security Number"
                                          },
                                          "idIssuer": {
                                            "type": "string",
                                            "example": "US",
                                            "description": "Identification issuer country name e.g. US"
                                          },
                                          "idValue": {
                                            "type": "string",
                                            "example": "999999999",
                                            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                          },
                                          "action": {
                                            "type": "string",
                                            "example": "ADD",
                                            "description": "The action like ADD, UPDATE, REMOVE\n"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "businessType": {
                                  "type": "string",
                                  "example": "Privately Owned Business",
                                  "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                                },
                                "legalStructure": {
                                  "type": "string",
                                  "example": "LLC",
                                  "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                                },
                                "industryCategory": {
                                  "type": "string",
                                  "example": "Accommodation and Food Services",
                                  "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                                },
                                "industryType": {
                                  "type": "string",
                                  "example": "Bed And Breakfast Inns",
                                  "description": "Industry type.\n"
                                },
                                "significantOwnership": {
                                  "type": "boolean",
                                  "example": true,
                                  "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                                },
                                "entitiesInOwnership": {
                                  "type": "boolean",
                                  "example": true,
                                  "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                                },
                                "businessName": {
                                  "type": "string",
                                  "example": "Feltz Printing Service",
                                  "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                                },
                                "businessAliasName": {
                                  "type": "string",
                                  "example": "Feltz Printing Service of New York",
                                  "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                                },
                                "businessDescription": {
                                  "type": "string",
                                  "example": "Printing Service of New York",
                                  "description": "The business’s description.\n"
                                },
                                "websiteAvailable": {
                                  "type": "boolean",
                                  "example": true,
                                  "description": "Does your business have a website? e.g. true|false\n"
                                },
                                "website": {
                                  "type": "string",
                                  "example": "https://www.company.com",
                                  "description": "Website of the client. website is required if websiteAvailable is true.\n"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "client@company.com",
                                  "description": "Email of the client.\n"
                                },
                                "countryOfFormation": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format"
                                },
                                "yearOfFormation": {
                                  "type": "string",
                                  "example": "2020",
                                  "description": "Year of formation. Max and Min length is 4.\n"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "1234567891",
                              "description": "Client id, that uniquely identifies the client.\n"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "relatedParties": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "allOf": [
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "type": "object",
                                        "properties": {
                                          "addressType": {
                                            "type": "string",
                                            "example": "Principle Place Of Business",
                                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                          },
                                          "addressLine1": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "689 Main St",
                                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                          },
                                          "addressLine2": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "Opposite St. Andrews Church",
                                            "description": "addressLine2 has a maximum of 60 characters."
                                          },
                                          "addressLine3": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "Mini York",
                                            "description": "addressLine3 has a maximum of 60 characters."
                                          },
                                          "city": {
                                            "type": "string",
                                            "maxLength": 30,
                                            "example": "Anchorage",
                                            "description": "city has a maximum of 30 characters."
                                          },
                                          "state": {
                                            "type": "string",
                                            "example": "AZ",
                                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                          },
                                          "postalCode": {
                                            "type": "string",
                                            "maxLength": 14,
                                            "example": "99501",
                                            "description": "Postal/ZIP code."
                                          },
                                          "countryCode": {
                                            "type": "string",
                                            "example": "US",
                                            "description": "Country code in alpha-2 format."
                                          }
                                        }
                                      },
                                      "phone": {
                                        "type": "object",
                                        "properties": {
                                          "countryCode": {
                                            "type": "string",
                                            "example": "+1"
                                          },
                                          "phoneNumber": {
                                            "type": "string",
                                            "example": "7785462944"
                                          }
                                        },
                                        "description": "Phone Number Information of the account\n"
                                      },
                                      "identities": {
                                        "type": "array",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "action",
                                                "idType",
                                                "idIssuer",
                                                "idValue"
                                              ],
                                              "properties": {
                                                "idType": {
                                                  "type": "string",
                                                  "example": "EIN",
                                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                },
                                                "idDescription": {
                                                  "type": "string",
                                                  "example": "Employee Identification Number",
                                                  "description": "Description of identification type e.g. Social Security Number"
                                                },
                                                "idIssuer": {
                                                  "type": "string",
                                                  "example": "US",
                                                  "description": "Identification issuer country name e.g. US"
                                                },
                                                "idValue": {
                                                  "type": "string",
                                                  "example": "999999999",
                                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                },
                                                "action": {
                                                  "type": "string",
                                                  "example": "ADD",
                                                  "description": "The action like ADD, UPDATE, REMOVE\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                                        "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                                      },
                                      "businessName": {
                                        "type": "string",
                                        "example": "Feltz Printing Service",
                                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                      },
                                      "firstName": {
                                        "type": "string",
                                        "minLength": 2,
                                        "maxLength": 30,
                                        "example": "Lenna",
                                        "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                      },
                                      "middleName": {
                                        "type": "string",
                                        "maxLength": 30,
                                        "example": "More",
                                        "description": "Middle name of the individual in case of party type being an individual.\n"
                                      },
                                      "lastName": {
                                        "type": "string",
                                        "minLength": 2,
                                        "maxLength": 30,
                                        "example": "Paprocki",
                                        "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                      },
                                      "jobTitle": {
                                        "type": "string",
                                        "example": "CEO",
                                        "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                      },
                                      "jobTitleDescription": {
                                        "type": "string",
                                        "example": "Acting CEO",
                                        "maxLength": 50,
                                        "description": "In case on jobTitle is Other then Job title description is required.\n"
                                      },
                                      "birthDate": {
                                        "type": "string",
                                        "example": "1983-02-08T00:00:00.000Z",
                                        "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                      },
                                      "email": {
                                        "type": "string",
                                        "example": "client@company.com",
                                        "description": "Email of the individual.\n"
                                      },
                                      "natureOfOwnership": {
                                        "type": "string",
                                        "example": "Direct",
                                        "description": "Nature of ownership e.g. Direct|Indirect\n"
                                      },
                                      "soleOwner": {
                                        "type": "boolean"
                                      },
                                      "partyType": {
                                        "type": "string",
                                        "example": "Individual",
                                        "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                      },
                                      "partyRole": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "example": [
                                          "CONTROLLER",
                                          "OWNER"
                                        ],
                                        "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "1234567891",
                                    "description": "Client id, that uniquely identifies the client.\n"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "products": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "EB"
                          ],
                          "description": "The products available for clients.\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/clients/{id}/verifications": {
      "get": {
        "summary": "Get client verifications",
        "description": "Get current and outstanding verifications for a given client. These tell clients what is required to complete onboarding.",
        "tags": [
          "Clients"
        ],
        "operationId": "getClientVerification",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier for a client.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "PENDING_VALIDATION"
                    },
                    "verifications": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "verification": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "A01148"
                                  },
                                  "label": {
                                    "type": "string",
                                    "example": "If so, select which ones (multiple possible)"
                                  }
                                }
                              },
                              "response": {
                                "type": "array",
                                "properties": {
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "CUB",
                                      "SYR"
                                    ],
                                    "description": "The answer/s of a question. Can contain one or more elements.\n"
                                  },
                                  "updatedDateTime": {
                                    "type": "string",
                                    "example": "2022-05-17T12:24:09.000Z",
                                    "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                                  },
                                  "format": {
                                    "type": "string",
                                    "example": "list",
                                    "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
                                  },
                                  "maxLength": {
                                    "type": "number",
                                    "format": "int64",
                                    "example": 255,
                                    "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
                                  },
                                  "parentId": {
                                    "type": "string",
                                    "example": "A00033",
                                    "description": "Id of parent Question"
                                  },
                                  "answerOptions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "example": "CUB"
                                        },
                                        "label": {
                                          "type": "string",
                                          "example": "Cuba"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "attestations": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "fullName": {
                                "type": "string",
                                "example": "Rob Allen"
                              },
                              "ipAddress": {
                                "type": "string",
                                "example": "192.168.0.1"
                              },
                              "attestationDateTime": {
                                "type": "string",
                                "example": "2022-05-17T12:24:09.000Z",
                                "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                              },
                              "documentType": {
                                "type": "string",
                                "example": "DISCLOSURE_AND_CONSENT"
                              },
                              "documentId": {
                                "type": "string",
                                "example": "123"
                              },
                              "documentVersion": {
                                "type": "string",
                                "example": "v1.0"
                              },
                              "documentName": {
                                "type": "string",
                                "example": "Disclosure and consent"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "additionalDocuments": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "partyId": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "documentType": {
                                "type": "string"
                              },
                              "documentLevel": {
                                "type": "string"
                              },
                              "documentId": {
                                "type": "string"
                              },
                              "partyType": {
                                "type": "string"
                              },
                              "supportedDocuments": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add client verifications",
        "description": "Adds verification information provided by the client to continue onboarding.",
        "operationId": "addClientVerification",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Unique identifier for a client.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "1000011659"
          }
        ],
        "requestBody": {
          "description": "Client verification to add to the system.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "verifications": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "verification",
                            "response"
                          ],
                          "properties": {
                            "verification": {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "A01148"
                                }
                              }
                            },
                            "response": {
                              "type": "object",
                              "required": [
                                "values"
                              ],
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "CUB",
                                    "SYR"
                                  ],
                                  "description": "The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.\n"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "attestations": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "fullName",
                            "ipAddress",
                            "documentId"
                          ],
                          "properties": {
                            "fullName": {
                              "type": "string",
                              "example": "Rob Allen"
                            },
                            "ipAddress": {
                              "type": "string",
                              "example": "192.168.0.1"
                            },
                            "documentId": {
                              "type": "string",
                              "example": "123"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "ClientShouldSuccessfullyPostVerificationAnswersReq": {
                  "summary": "Client should successfully post verification answers",
                  "description": "Client should successfully post verification answers",
                  "value": {
                    "verifications": [
                      {
                        "verification": {
                          "id": "A00033"
                        },
                        "response": {
                          "values": [
                            "TRUE"
                          ]
                        }
                      },
                      {
                        "verification": {
                          "id": "A00034"
                        },
                        "response": {
                          "values": [
                            "We sell more food in Summer"
                          ]
                        }
                      },
                      {
                        "verification": {
                          "id": "A00043"
                        },
                        "response": {
                          "values": [
                            "FALSE"
                          ]
                        }
                      }
                    ],
                    "attestations": [
                      {
                        "documentType": "TERMS_CONDITION",
                        "documentId": "f8634cff-4335-4110-aacc-ffe39468e811",
                        "fullName": "Alex James",
                        "ipAddress": "192.0.0.1"
                      },
                      {
                        "documentType": "DISCLOSURE_AND_CONSENT",
                        "documentId": "ca55d694-b2f0-4bc0-9544-57df7eeaa722",
                        "fullName": "Alex James",
                        "ipAddress": "192.0.0.1"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "PENDING_VALIDATION"
                    },
                    "verifications": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "verification": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "A01148"
                                  },
                                  "label": {
                                    "type": "string",
                                    "example": "If so, select which ones (multiple possible)"
                                  }
                                }
                              },
                              "response": {
                                "type": "array",
                                "properties": {
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "CUB",
                                      "SYR"
                                    ],
                                    "description": "The answer/s of a question. Can contain one or more elements.\n"
                                  },
                                  "updatedDateTime": {
                                    "type": "string",
                                    "example": "2022-05-17T12:24:09.000Z",
                                    "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                                  },
                                  "format": {
                                    "type": "string",
                                    "example": "list",
                                    "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
                                  },
                                  "maxLength": {
                                    "type": "number",
                                    "format": "int64",
                                    "example": 255,
                                    "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
                                  },
                                  "parentId": {
                                    "type": "string",
                                    "example": "A00033",
                                    "description": "Id of parent Question"
                                  },
                                  "answerOptions": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "example": "CUB"
                                        },
                                        "label": {
                                          "type": "string",
                                          "example": "Cuba"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "attestations": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "fullName": {
                                "type": "string",
                                "example": "Rob Allen"
                              },
                              "ipAddress": {
                                "type": "string",
                                "example": "192.168.0.1"
                              },
                              "attestationDateTime": {
                                "type": "string",
                                "example": "2022-05-17T12:24:09.000Z",
                                "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                              },
                              "documentType": {
                                "type": "string",
                                "example": "DISCLOSURE_AND_CONSENT"
                              },
                              "documentId": {
                                "type": "string",
                                "example": "123"
                              },
                              "documentVersion": {
                                "type": "string",
                                "example": "v1.0"
                              },
                              "documentName": {
                                "type": "string",
                                "example": "Disclosure and consent"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "additionalDocuments": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "partyId": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "documentType": {
                                "type": "string"
                              },
                              "documentLevel": {
                                "type": "string"
                              },
                              "documentId": {
                                "type": "string"
                              },
                              "partyType": {
                                "type": "string"
                              },
                              "supportedDocuments": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "ClientShouldSuccessfullyPostVerificationAnswersRes": {
                    "summary": "Client should successfully post verification answers",
                    "description": "Client should successfully post verification answers",
                    "value": {
                      "status": "PENDING_VALIDATION",
                      "verifications": [
                        {
                          "verification": {
                            "id": "A00033",
                            "label": "Will there be any seasonal volume and value threshold fluctuations from the expected average monthly activity? If yes, please describe including causes and timing."
                          },
                          "response": {
                            "values": [
                              "FALSE"
                            ],
                            "updatedDateTime": "2023-03-09T12:35:46.000Z",
                            "format": "single",
                            "maxLength": 255,
                            "answerOptions": [
                              {
                                "id": "FALSE",
                                "label": "No"
                              },
                              {
                                "id": "TRUE",
                                "label": "Yes"
                              }
                            ]
                          }
                        },
                        {
                          "verification": {
                            "id": "A00043",
                            "label": "Do you have any operations, vendors, suppliers or sell goods or services in, or support other activities directly or indirectly relating to Cuba, Iran, Syria, North Korea or Crimea?"
                          },
                          "response": {
                            "values": [
                              "FALSE"
                            ],
                            "updatedDateTime": "2023-03-09T12:35:46.000Z",
                            "format": "single",
                            "maxLength": 255,
                            "answerOptions": [
                              {
                                "id": "FALSE",
                                "label": "No"
                              },
                              {
                                "id": "TRUE",
                                "label": "Yes"
                              }
                            ]
                          }
                        }
                      ],
                      "attestations": [
                        {
                          "fullName": "Alex James",
                          "ipAddress": "192.0.0.1",
                          "attestationDateTime": "2023-03-09T12:35:46.000Z",
                          "documentType": "DISCLOSURE_AND_CONSENT",
                          "documentVersion": "1",
                          "documentName": "disclosure_and_consent-eb-1.pdf",
                          "documentId": "f8634cff-4335-4110-aacc-ffe39468e811"
                        },
                        {
                          "fullName": "Alex James",
                          "ipAddress": "192.0.0.1",
                          "attestationDateTime": "2023-03-09T12:35:46.000Z",
                          "documentType": "TERMS_CONDITION",
                          "documentVersion": "1",
                          "documentName": "terms_condition-eb-petsy-1.pdf",
                          "documentId": "ca55d694-b2f0-4bc0-9544-57df7eeaa722"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/documents": {
      "post": {
        "summary": "Upload document",
        "description": "- This end point allows the end user to upload document.\n- File types allowed are : heic, jpeg, jpg, pdf, png.\n- The maximum size allowed for the document through this API is 5MB.\n",
        "operationId": "uploadDocument",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "requestBody": {
          "description": "This section allows the user to attach the binary file upload  and meta-data associated with the document.\n",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "documentData": {
                    "type": "object",
                    "properties": {
                      "documentType": {
                        "description": "Supported document types.",
                        "type": "string",
                        "enum": [
                          "IRS_DOCUMENT_TIN",
                          "ARTICLES_OF_INCORPORATION",
                          "MOA",
                          "MAA",
                          "CONSTITUTIONAL_DOCUMENT",
                          "TRUST_DEED",
                          "PARTNERSHIP_AGREEMENT",
                          "LLC_AGREEMENT",
                          "OPERATING_AGREEMENT",
                          "OFFERING_MEMO",
                          "BANKING_LICENSE",
                          "BUSINESS_LICENSE",
                          "BUSINESS_REGISTRATION_CERT",
                          "OTHER_GOV_REGISTRATION_DOCS",
                          "SEC_FILINGS_10K",
                          "PASSPORT",
                          "SSN_CARD",
                          "DRIVERS_LICENSE",
                          "GOV_ISSUED_ID_CARD",
                          "TERMS_CONDITION",
                          "DISCLOSURE_AND_CONSENT"
                        ]
                      },
                      "productType": {
                        "description": "Product type identifies which domain the document is being uploaded to.",
                        "type": "string",
                        "enum": [
                          "EB"
                        ]
                      },
                      "metadata": {
                        "type": "array",
                        "items": {
                          "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "example": "partyId"
                            },
                            "value": {
                              "type": "string",
                              "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "documentType",
                      "productType"
                    ]
                  }
                },
                "required": [
                  "file",
                  "documentData"
                ]
              },
              "encoding": {
                "file": {
                  "contentType": "application/pdf, image/heic, image/jpeg, image/png"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The unique id generated by the system for the uploaded document,  which can be used for future retrieval.\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "abcd1c1d-6635-43ff-a8e5-b252926bddef"
                    },
                    "documentType": {
                      "description": "Supported document types.",
                      "type": "string",
                      "enum": [
                        "IRS_DOCUMENT_TIN",
                        "ARTICLES_OF_INCORPORATION",
                        "MOA",
                        "MAA",
                        "CONSTITUTIONAL_DOCUMENT",
                        "TRUST_DEED",
                        "PARTNERSHIP_AGREEMENT",
                        "LLC_AGREEMENT",
                        "OPERATING_AGREEMENT",
                        "OFFERING_MEMO",
                        "BANKING_LICENSE",
                        "BUSINESS_LICENSE",
                        "BUSINESS_REGISTRATION_CERT",
                        "OTHER_GOV_REGISTRATION_DOCS",
                        "SEC_FILINGS_10K",
                        "PASSPORT",
                        "SSN_CARD",
                        "DRIVERS_LICENSE",
                        "GOV_ISSUED_ID_CARD",
                        "TERMS_CONDITION",
                        "DISCLOSURE_AND_CONSENT"
                      ]
                    },
                    "productType": {
                      "description": "Product type identifies which domain the document is being uploaded to.",
                      "type": "string",
                      "enum": [
                        "EB"
                      ]
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "partyId"
                          },
                          "value": {
                            "type": "string",
                            "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/documents/{id}": {
      "get": {
        "summary": "Retrieve details of a document",
        "description": "Retrieve details of a document using the document unique identifier.",
        "operationId": "getDocumentDetails",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Document unique identifier.",
            "example": "73bd1c1d-6635-43ff-a8e5-b252926bddef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The unique id generated by the system for the uploaded document,  which can be used for future retrieval.\n",
                      "type": "string",
                      "format": "uuid",
                      "example": "abcd1c1d-6635-43ff-a8e5-b252926bddef"
                    },
                    "documentType": {
                      "description": "Supported document types.",
                      "type": "string",
                      "enum": [
                        "IRS_DOCUMENT_TIN",
                        "ARTICLES_OF_INCORPORATION",
                        "MOA",
                        "MAA",
                        "CONSTITUTIONAL_DOCUMENT",
                        "TRUST_DEED",
                        "PARTNERSHIP_AGREEMENT",
                        "LLC_AGREEMENT",
                        "OPERATING_AGREEMENT",
                        "OFFERING_MEMO",
                        "BANKING_LICENSE",
                        "BUSINESS_LICENSE",
                        "BUSINESS_REGISTRATION_CERT",
                        "OTHER_GOV_REGISTRATION_DOCS",
                        "SEC_FILINGS_10K",
                        "PASSPORT",
                        "SSN_CARD",
                        "DRIVERS_LICENSE",
                        "GOV_ISSUED_ID_CARD",
                        "TERMS_CONDITION",
                        "DISCLOSURE_AND_CONSENT"
                      ]
                    },
                    "productType": {
                      "description": "Product type identifies which domain the document is being uploaded to.",
                      "type": "string",
                      "enum": [
                        "EB"
                      ]
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "partyId"
                          },
                          "value": {
                            "type": "string",
                            "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/documents/{id}/file": {
      "get": {
        "summary": "Download a document",
        "description": "Download a document using the document unique identifier.",
        "operationId": "downloadDocument",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Document unique identifier.",
            "example": "73bd1c1d-6635-43ff-a8e5-b252926bddba",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "image/heic": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "Create transaction",
        "description": "Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).",
        "operationId": "createTransaction",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "requestBody": {
          "description": "Contains the required information to create a payment transaction.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "originatingAccount",
                  "recipient",
                  "amount",
                  "currency",
                  "paymentDate"
                ],
                "properties": {
                  "type": {
                    "description": "Payment method - RTP, WIRE, ACH or TRANSFER",
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "RTP",
                      "WIRE",
                      "ACH",
                      "TRANSFER"
                    ],
                    "example": "ACH"
                  },
                  "originatingAccount": {
                    "description": "ID of the account to make the payment from",
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                  },
                  "recipient": {
                    "description": "Payment recipient",
                    "nullable": false,
                    "type": "object",
                    "required": [
                      "account"
                    ],
                    "properties": {
                      "partyDetails": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
                            "type": "object",
                            "required": [
                              "addressLine1",
                              "city",
                              "state",
                              "countryCode",
                              "zip"
                            ],
                            "properties": {
                              "addressLine1": {
                                "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 70,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "example": "345 Wouda St"
                              },
                              "addressLine2": {
                                "type": "string",
                                "description": "Second line of the recipient's postal address",
                                "minLength": 1,
                                "maxLength": 70,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "example": "Malibu Point"
                              },
                              "addressLine3": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 70,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Third line of the recipient's postal address",
                                "example": "Greater Woking"
                              },
                              "city": {
                                "type": "string",
                                "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 35,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "example": "Springfield"
                              },
                              "countryCode": {
                                "type": "string",
                                "enum": [
                                  "US"
                                ],
                                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                                "example": "US"
                              },
                              "state": {
                                "type": "string",
                                "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 35,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "example": "ND"
                              },
                              "zip": {
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 16,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Zip code of the recipient's postal address",
                                "example": "58008"
                              }
                            }
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "INDIVIDUAL",
                              "ORGANIZATION"
                            ],
                            "nullable": false,
                            "example": "INDIVIDUAL"
                          },
                          "firstName": {
                            "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                            "type": "string",
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "example": "Jon"
                          },
                          "lastName": {
                            "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                            "type": "string",
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "example": "Smith"
                          },
                          "businessName": {
                            "type": "string",
                            "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
                            "maxLength": 140,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "example": "Widget Co."
                          },
                          "contacts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "contactType",
                                "value"
                              ],
                              "properties": {
                                "contactType": {
                                  "type": "string",
                                  "nullable": false,
                                  "enum": [
                                    "EMAIL",
                                    "WEBSITE",
                                    "PHONE"
                                  ],
                                  "description": "Type of contact information being provided",
                                  "example": "PHONE"
                                },
                                "countryCode": {
                                  "type": "string",
                                  "pattern": "^\\+[1-9]\\d{0,2}$",
                                  "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                  "example": "+44"
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": false,
                                  "minLength": 1,
                                  "maxLength": 2048,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                  "example": "5343245789"
                                }
                              }
                            }
                          }
                        }
                      },
                      "account": {
                        "type": "object",
                        "required": [
                          "number"
                        ],
                        "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
                        "properties": {
                          "number": {
                            "type": "string",
                            "nullable": false,
                            "pattern": "^\\d{1,35}$",
                            "description": "Payment Routing Number or Demand Deposit Account number.",
                            "example": "021000021"
                          },
                          "type": {
                            "type": "string",
                            "nullable": false,
                            "enum": [
                              "CHECKING",
                              "SAVINGS"
                            ],
                            "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                            "example": "CHECKING"
                          },
                          "routingCodeType": {
                            "type": "string",
                            "nullable": false,
                            "enum": [
                              "USABA"
                            ],
                            "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                            "example": "USABA"
                          },
                          "routingNumber": {
                            "type": "string",
                            "nullable": false,
                            "pattern": "^\\d{9}$",
                            "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                            "example": "021000021"
                          },
                          "countryCode": {
                            "type": "string",
                            "enum": [
                              "US"
                            ],
                            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                            "example": "US"
                          }
                        }
                      }
                    }
                  },
                  "amount": {
                    "type": "number",
                    "nullable": false,
                    "minimum": 0.01,
                    "example": 100
                  },
                  "currency": {
                    "description": "Payment currency - currently supported: USD",
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "USD"
                    ],
                    "example": "USD"
                  },
                  "memo": {
                    "type": "string",
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "minLength": 1,
                    "maxLength": 140,
                    "description": "Memorandum",
                    "example": "Invoice 1234"
                  },
                  "paymentDate": {
                    "description": "ISO date format - yyyy-MM-dd",
                    "type": "string",
                    "nullable": false,
                    "format": "date",
                    "example": "2022-12-31T00:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "123434534"
                    },
                    "status": {
                      "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "CANCELED",
                        "COMPLETED",
                        "COMPLETED_WITH_EXCEPTIONS",
                        "COMPLETED_NOT_IN_TARGET_WALLET",
                        "REJECTED",
                        "RETURNED",
                        "PARTIALLY_COMPLETED",
                        "UNDEFINED"
                      ],
                      "example": "PENDING"
                    },
                    "type": {
                      "description": "Payment method - RTP, WIRE, ACH or TRANSFER",
                      "type": "string",
                      "nullable": false,
                      "enum": [
                        "RTP",
                        "WIRE",
                        "ACH",
                        "TRANSFER"
                      ],
                      "example": "ACH"
                    },
                    "accountId": {
                      "type": "string",
                      "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                    },
                    "accountNumber": {
                      "type": "string",
                      "example": "20000023556044"
                    },
                    "recipient": {
                      "type": "object",
                      "required": [
                        "account"
                      ],
                      "properties": {
                        "partyDetails": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
                              "type": "object",
                              "required": [
                                "addressLine1",
                                "city",
                                "state",
                                "countryCode",
                                "zip"
                              ],
                              "properties": {
                                "addressLine1": {
                                  "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                                  "type": "string",
                                  "nullable": false,
                                  "minLength": 1,
                                  "maxLength": 70,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "example": "345 Wouda St"
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "description": "Second line of the recipient's postal address",
                                  "minLength": 1,
                                  "maxLength": 70,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "example": "Malibu Point"
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 70,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "description": "Third line of the recipient's postal address",
                                  "example": "Greater Woking"
                                },
                                "city": {
                                  "type": "string",
                                  "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                                  "nullable": false,
                                  "minLength": 1,
                                  "maxLength": 35,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "example": "Springfield"
                                },
                                "countryCode": {
                                  "type": "string",
                                  "enum": [
                                    "US"
                                  ],
                                  "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                                  "example": "US"
                                },
                                "state": {
                                  "type": "string",
                                  "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                                  "nullable": false,
                                  "minLength": 1,
                                  "maxLength": 35,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "example": "ND"
                                },
                                "zip": {
                                  "type": "string",
                                  "nullable": false,
                                  "minLength": 1,
                                  "maxLength": 16,
                                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                  "description": "Zip code of the recipient's postal address",
                                  "example": "58008"
                                }
                              }
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "INDIVIDUAL",
                                "ORGANIZATION"
                              ],
                              "nullable": false,
                              "example": "INDIVIDUAL"
                            },
                            "firstName": {
                              "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                              "type": "string",
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "example": "Jon"
                            },
                            "lastName": {
                              "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                              "type": "string",
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "example": "Smith"
                            },
                            "businessName": {
                              "type": "string",
                              "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
                              "maxLength": 140,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "example": "Widget Co."
                            },
                            "contacts": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "contactType",
                                  "value"
                                ],
                                "properties": {
                                  "contactType": {
                                    "type": "string",
                                    "nullable": false,
                                    "enum": [
                                      "EMAIL",
                                      "WEBSITE",
                                      "PHONE"
                                    ],
                                    "description": "Type of contact information being provided",
                                    "example": "PHONE"
                                  },
                                  "countryCode": {
                                    "type": "string",
                                    "pattern": "^\\+[1-9]\\d{0,2}$",
                                    "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                    "example": "+44"
                                  },
                                  "value": {
                                    "type": "string",
                                    "nullable": false,
                                    "minLength": 1,
                                    "maxLength": 2048,
                                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                    "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                    "example": "5343245789"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "account": {
                          "type": "object",
                          "required": [
                            "number"
                          ],
                          "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
                          "properties": {
                            "number": {
                              "type": "string",
                              "nullable": false,
                              "pattern": "^\\d{1,35}$",
                              "description": "Payment Routing Number or Demand Deposit Account number.",
                              "example": "021000021"
                            },
                            "type": {
                              "type": "string",
                              "nullable": false,
                              "enum": [
                                "CHECKING",
                                "SAVINGS"
                              ],
                              "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                              "example": "CHECKING"
                            },
                            "routingCodeType": {
                              "type": "string",
                              "nullable": false,
                              "enum": [
                                "USABA"
                              ],
                              "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                              "example": "USABA"
                            },
                            "routingNumber": {
                              "type": "string",
                              "nullable": false,
                              "pattern": "^\\d{9}$",
                              "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                              "example": "021000021"
                            },
                            "countryCode": {
                              "type": "string",
                              "enum": [
                                "US"
                              ],
                              "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                              "example": "US"
                            }
                          }
                        }
                      }
                    },
                    "amount": {
                      "type": "number",
                      "example": 100
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD"
                    },
                    "memo": {
                      "type": "string",
                      "example": "Invoice 1234"
                    },
                    "paymentDate": {
                      "description": "ISO date format - yyyy-MM-dd",
                      "type": "string",
                      "format": "date",
                      "example": "2022-12-31T00:00:00.000Z"
                    },
                    "c2ProfileId": {
                      "type": "string",
                      "example": "0030000132"
                    },
                    "debitCardDetails": {
                      "type": "object",
                      "properties": {
                        "cardPaymentRoutingNumber": {
                          "type": "string",
                          "example": "2000303444"
                        },
                        "cardLast4": {
                          "type": "string",
                          "example": "0000"
                        },
                        "cardSerialNumber": {
                          "type": "string",
                          "example": "100000158935"
                        },
                        "messageType": {
                          "type": "string",
                          "example": "1200"
                        },
                        "cardTransactionType": {
                          "type": "string",
                          "example": "CR"
                        },
                        "isa": {
                          "type": "string",
                          "example": "0"
                        },
                        "surcharge": {
                          "type": "number",
                          "example": 1
                        },
                        "merchant": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "XYZ001"
                            },
                            "address": {
                              "type": "object",
                              "properties": {
                                "addressLine1": {
                                  "type": "string",
                                  "example": "345 Wouda St"
                                },
                                "city": {
                                  "type": "string",
                                  "example": "Springfield"
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US"
                                },
                                "state": {
                                  "type": "string",
                                  "example": "ND"
                                },
                                "zip": {
                                  "type": "string",
                                  "example": "58008"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List and filter transactions",
        "description": "Lists transactions for a specific client, which can be filtered using optional parameters.",
        "operationId": "listTransactions",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "client_id",
            "description": "Unique identifier for a client.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "description": "The types of transaction that the client is allowed to search by.",
              "type": "string",
              "enum": [
                "PAYIN",
                "PAYOUT",
                "TRANSFER",
                "REVERSAL",
                "UNDEFINED",
                "RETURN",
                "CARD",
                "HOLD"
              ],
              "example": "PAYIN"
            },
            "description": "Filters by type of transaction.",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "The statuses of the transaction that the client is allowed to search by.",
              "type": "string",
              "enum": [
                "PENDING",
                "CANCELED",
                "COMPLETED",
                "COMPLETED_WITH_EXCEPTIONS",
                "REJECTED",
                "RETURNED",
                "PARTIALLY_COMPLETED",
                "UNDEFINED"
              ],
              "example": "PENDING"
            },
            "description": "Filters by transaction status.",
            "required": false
          },
          {
            "in": "query",
            "name": "accountNumber",
            "example": "200293631511",
            "schema": {
              "type": "string"
            },
            "description": "Filters by the Embedded Banking client account number connected to the transaction.",
            "required": false
          },
          {
            "in": "query",
            "name": "amountEquals",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filters by an exact amount.",
            "required": false
          },
          {
            "in": "query",
            "name": "amountGreaterThan",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filters by amounts greater than a specified value.",
            "required": false
          },
          {
            "in": "query",
            "name": "amountLessThan",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filters by amounts less than a specified value.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateEquals",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filters transactions by an exact date.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateGreaterThan",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filters for transactions made after this date.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateLessThan",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filters for transactions made before this date."
          },
          {
            "in": "query",
            "name": "recipientAccount",
            "example": "200293631511",
            "schema": {
              "type": "string"
            },
            "description": "Filters by the recipient's account number.",
            "required": false
          },
          {
            "in": "query",
            "name": "transactionId",
            "example": "2451821d-e6f9-450d-b041-a20ae9d08f14",
            "schema": {
              "type": "string"
            },
            "description": "Filters for a transaction that matches a specific transaction ID. The transaction ID is generated by Embedded Banking when a transaction is created or received."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "metadata": {
                      "nullable": false,
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "nullable": false,
                      "description": "List of transactions meeting the request criteria",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                            "type": "string",
                            "enum": [
                              "PENDING",
                              "CANCELED",
                              "COMPLETED",
                              "COMPLETED_WITH_EXCEPTIONS",
                              "COMPLETED_NOT_IN_TARGET_WALLET",
                              "REJECTED",
                              "RETURNED",
                              "PARTIALLY_COMPLETED",
                              "UNDEFINED"
                            ],
                            "example": "PENDING"
                          },
                          "transactionType": {
                            "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                            "type": "string",
                            "enum": [
                              "PAYIN",
                              "PAYTO",
                              "PAYINTO",
                              "TRANSFER",
                              "PAYOUT",
                              "PAYIN_REVERSAL",
                              "PAYOUT_REVERSAL",
                              "MISC_CREDIT",
                              "MISC_DEBIT",
                              "UNDEFINED",
                              "PAYINTORECEIPT",
                              "PAYOUTCOLLECTION",
                              "PAYINTOCOLLECTION",
                              "PAYINTO_RETURN",
                              "PAYOUTCOLLECTION_RETURN",
                              "PAYINTOCOLLECTION_RETURN",
                              "RETURN",
                              "CARD",
                              "FEE"
                            ],
                            "example": "PAYIN"
                          },
                          "ledgerBalance": {
                            "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                            "type": "number",
                            "example": 10000
                          },
                          "creationTimestamp": {
                            "description": "The date and time the transaction was created.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-02-22T15:05:46.952+0000"
                          },
                          "effectiveDate": {
                            "description": "The time and date when the ledger balance was updated.",
                            "type": "string",
                            "format": "date",
                            "example": "2023-02-22T00:00:00.000Z"
                          },
                          "postingVersion": {
                            "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                            "type": "integer",
                            "example": 1
                          },
                          "transactionId": {
                            "type": "string",
                            "example": "qsajdb3ybv3",
                            "description": "Unique identifier of a transaction"
                          },
                          "debtorAccount": {
                            "type": "string",
                            "example": "200293631511",
                            "description": "Debtor account number (PRN)"
                          },
                          "creditorAccount": {
                            "type": "string",
                            "example": "200293631511",
                            "description": "Creditor account number (PRN)"
                          },
                          "currency": {
                            "type": "string",
                            "example": "USD",
                            "description": "Transaction currency"
                          },
                          "createdDate": {
                            "type": "string",
                            "example": "01-01-2022",
                            "description": "Transaction creation date"
                          },
                          "amount": {
                            "type": "string",
                            "example": "12.45",
                            "description": "Transaction amount"
                          },
                          "debtorName": {
                            "type": "string",
                            "example": "Modells Sporting Goods",
                            "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
                          },
                          "creditorName": {
                            "type": "string",
                            "example": "HSBC Holding",
                            "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
                          },
                          "accountingType": {
                            "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                            "type": "string",
                            "nullable": false,
                            "enum": [
                              "DR",
                              "CR"
                            ],
                            "example": "DR"
                          },
                          "paymentRoute": {
                            "description": "The method by which the payment was made - RTP, WIRE, ACH",
                            "type": "string",
                            "enum": [
                              "RTP",
                              "WIRE",
                              "ACH"
                            ],
                            "example": "ACH"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/old-transactions": {
      "get": {
        "summary": "Get all transactions",
        "description": "Lists transactions for a specific client, filtered by the parameters given.",
        "operationId": "listTransactionsOld",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "client_id",
            "description": "Unique Client Identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "description": "The types of transaction that the client is allowed to search by.",
              "type": "string",
              "enum": [
                "PAYIN",
                "PAYOUT",
                "TRANSFER",
                "REVERSAL",
                "UNDEFINED",
                "RETURN",
                "CARD",
                "HOLD"
              ],
              "example": "PAYIN"
            },
            "description": "Filter on the type of transactions retrieved.",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "The statuses of the transaction that the client is allowed to search by.",
              "type": "string",
              "enum": [
                "PENDING",
                "CANCELED",
                "COMPLETED",
                "COMPLETED_WITH_EXCEPTIONS",
                "REJECTED",
                "RETURNED",
                "PARTIALLY_COMPLETED",
                "UNDEFINED"
              ],
              "example": "PENDING"
            },
            "description": "Filter on the status of transactions retrieved.",
            "required": false
          },
          {
            "in": "query",
            "name": "accountNumber",
            "example": "200293631511",
            "schema": {
              "type": "string"
            },
            "description": "Filter on number of the client account",
            "required": false
          },
          {
            "in": "query",
            "name": "amountEquals",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filter on amount of transaction equals this.",
            "required": false
          },
          {
            "in": "query",
            "name": "amountGreaterThan",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filter on amount of transaction is greater than this.",
            "required": false
          },
          {
            "in": "query",
            "name": "amountLessThan",
            "example": "100",
            "schema": {
              "type": "string"
            },
            "description": "Filter on amount of transaction is less than this.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateEquals",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filter transactions made on this date.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateGreaterThan",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filter transactions made after this date.",
            "required": false
          },
          {
            "in": "query",
            "name": "dateLessThan",
            "example": "01-01-2022",
            "schema": {
              "type": "string"
            },
            "description": "Filter transactions made before this date."
          },
          {
            "in": "query",
            "name": "recipientAccount",
            "example": "200293631511",
            "schema": {
              "type": "string"
            },
            "description": "Filter on number of the recipient account.",
            "required": false
          },
          {
            "in": "query",
            "name": "transactionId",
            "example": "2451821d-e6f9-450d-b041-a20ae9d08f14",
            "schema": {
              "type": "string"
            },
            "description": "Filter on the ID of the transaction."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                        "type": "string",
                        "enum": [
                          "PENDING",
                          "CANCELED",
                          "COMPLETED",
                          "COMPLETED_WITH_EXCEPTIONS",
                          "COMPLETED_NOT_IN_TARGET_WALLET",
                          "REJECTED",
                          "RETURNED",
                          "PARTIALLY_COMPLETED",
                          "UNDEFINED"
                        ],
                        "example": "PENDING"
                      },
                      "transactionType": {
                        "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                        "type": "string",
                        "enum": [
                          "PAYIN",
                          "PAYTO",
                          "PAYINTO",
                          "TRANSFER",
                          "PAYOUT",
                          "PAYIN_REVERSAL",
                          "PAYOUT_REVERSAL",
                          "MISC_CREDIT",
                          "MISC_DEBIT",
                          "UNDEFINED",
                          "PAYINTORECEIPT",
                          "PAYOUTCOLLECTION",
                          "PAYINTOCOLLECTION",
                          "PAYINTO_RETURN",
                          "PAYOUTCOLLECTION_RETURN",
                          "PAYINTOCOLLECTION_RETURN",
                          "RETURN",
                          "CARD",
                          "FEE"
                        ],
                        "example": "PAYIN"
                      },
                      "ledgerBalance": {
                        "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                        "type": "number",
                        "example": 10000
                      },
                      "creationTimestamp": {
                        "description": "The date and time the transaction was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-02-22T15:05:46.952+0000"
                      },
                      "effectiveDate": {
                        "description": "The time and date when the ledger balance was updated.",
                        "type": "string",
                        "format": "date",
                        "example": "2023-02-22T00:00:00.000Z"
                      },
                      "postingVersion": {
                        "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                        "type": "integer",
                        "example": 1
                      },
                      "transactionId": {
                        "type": "string",
                        "example": "qsajdb3ybv3",
                        "description": "Unique identifier of a transaction"
                      },
                      "debtorAccount": {
                        "type": "string",
                        "example": "200293631511",
                        "description": "Debtor account number (PRN)"
                      },
                      "creditorAccount": {
                        "type": "string",
                        "example": "200293631511",
                        "description": "Creditor account number (PRN)"
                      },
                      "currency": {
                        "type": "string",
                        "example": "USD",
                        "description": "Transaction currency"
                      },
                      "createdDate": {
                        "type": "string",
                        "example": "01-01-2022",
                        "description": "Transaction creation date"
                      },
                      "amount": {
                        "type": "string",
                        "example": "12.45",
                        "description": "Transaction amount"
                      },
                      "debtorName": {
                        "type": "string",
                        "example": "Modells Sporting Goods",
                        "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
                      },
                      "creditorName": {
                        "type": "string",
                        "example": "HSBC Holding",
                        "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
                      },
                      "accountingType": {
                        "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "DR",
                          "CR"
                        ],
                        "example": "DR"
                      },
                      "paymentRoute": {
                        "description": "The method by which the payment was made - RTP, WIRE, ACH",
                        "type": "string",
                        "enum": [
                          "RTP",
                          "WIRE",
                          "ACH"
                        ],
                        "example": "ACH"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Get transaction",
        "description": "Retrieves details for a specific transaction using its unique identifier.",
        "operationId": "getTransaction",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "examples": {
              "TransactionCompleted": {
                "value": 1000000001
              },
              "TransactionInProgress": {
                "value": 1000000002
              },
              "TransactionRejected": {
                "value": 1000000003
              }
            },
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for a transaction.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "TransactionCompleted": {
                "value": "pRLY9bJqiqG1SGqe"
              },
              "TransactionInProgress": {
                "value": "pRLY9bJqiqG1SGqe"
              },
              "TransactionRejected": {
                "value": "pRLY9bJqiqG1SGqe"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "creditorAccount",
                    "creditorName",
                    "debtorAccount",
                    "debtorName",
                    "amount",
                    "currency",
                    "memo",
                    "paymentDate",
                    "accountingType",
                    "status",
                    "transactionType"
                  ],
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Transaction ID",
                          "example": "123434534"
                        },
                        "creditorAccount": {
                          "description": "Creditor account number - PRN or DDA",
                          "type": "string",
                          "example": "20000023556044"
                        },
                        "creditorName": {
                          "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.",
                          "type": "string",
                          "example": "JPMC"
                        },
                        "debtorAccount": {
                          "description": "Debtor account number - PRN or DDA",
                          "type": "string",
                          "example": "20000023556044"
                        },
                        "debtorName": {
                          "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.",
                          "type": "string",
                          "example": "JPMC C2"
                        },
                        "amount": {
                          "description": "Transaction value",
                          "type": "number",
                          "example": 100
                        },
                        "currency": {
                          "description": "Transaction currency",
                          "type": "string",
                          "example": "USD"
                        },
                        "memo": {
                          "description": "Memorandum",
                          "type": "string",
                          "example": "Invoice 1234"
                        },
                        "paymentDate": {
                          "description": "Date of transaction",
                          "type": "string",
                          "example": "01-01-2022"
                        },
                        "debitCardDetails": {
                          "type": "object",
                          "properties": {
                            "cardPaymentRoutingNumber": {
                              "type": "string",
                              "example": "2000303444"
                            },
                            "cardLast4": {
                              "type": "string",
                              "example": "0000"
                            },
                            "cardSerialNumber": {
                              "type": "string",
                              "example": "100000158935"
                            },
                            "messageType": {
                              "type": "string",
                              "example": "1200"
                            },
                            "cardTransactionType": {
                              "type": "string",
                              "example": "CR"
                            },
                            "isa": {
                              "type": "string",
                              "example": "0"
                            },
                            "surcharge": {
                              "type": "number",
                              "example": 1
                            },
                            "merchant": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "XYZ001"
                                },
                                "address": {
                                  "type": "object",
                                  "properties": {
                                    "addressLine1": {
                                      "type": "string",
                                      "example": "345 Wouda St"
                                    },
                                    "city": {
                                      "type": "string",
                                      "example": "Springfield"
                                    },
                                    "countryCode": {
                                      "type": "string",
                                      "example": "US"
                                    },
                                    "state": {
                                      "type": "string",
                                      "example": "ND"
                                    },
                                    "zip": {
                                      "type": "string",
                                      "example": "58008"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingType": {
                          "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "DR",
                            "CR"
                          ],
                          "example": "DR"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                          "type": "string",
                          "enum": [
                            "PENDING",
                            "CANCELED",
                            "COMPLETED",
                            "COMPLETED_WITH_EXCEPTIONS",
                            "COMPLETED_NOT_IN_TARGET_WALLET",
                            "REJECTED",
                            "RETURNED",
                            "PARTIALLY_COMPLETED",
                            "UNDEFINED"
                          ],
                          "example": "PENDING"
                        },
                        "transactionType": {
                          "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                          "type": "string",
                          "enum": [
                            "PAYIN",
                            "PAYTO",
                            "PAYINTO",
                            "TRANSFER",
                            "PAYOUT",
                            "PAYIN_REVERSAL",
                            "PAYOUT_REVERSAL",
                            "MISC_CREDIT",
                            "MISC_DEBIT",
                            "UNDEFINED",
                            "PAYINTORECEIPT",
                            "PAYOUTCOLLECTION",
                            "PAYINTOCOLLECTION",
                            "PAYINTO_RETURN",
                            "PAYOUTCOLLECTION_RETURN",
                            "PAYINTOCOLLECTION_RETURN",
                            "RETURN",
                            "CARD",
                            "FEE"
                          ],
                          "example": "PAYIN"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/transactions/search": {
      "post": {
        "summary": "Search transactions",
        "description": "Retrieves a list of transactions based on search criteria.",
        "operationId": "searchTransactions",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountNumber": {
                    "type": "string",
                    "example": "200293631511"
                  },
                  "transactionId": {
                    "type": "string",
                    "example": "2451821d-e6f9-450d-b041-a20ae9d08f14"
                  },
                  "amountEquals": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "amountLessThan": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "amountGreaterThan": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "recipientAccount": {
                    "type": "string",
                    "example": "200293632041"
                  },
                  "paymentType": {
                    "example": "CARD",
                    "description": "The types of transaction that the client is allowed to search by.",
                    "type": "string",
                    "enum": [
                      "PAYIN",
                      "PAYOUT",
                      "TRANSFER",
                      "REVERSAL",
                      "UNDEFINED",
                      "RETURN",
                      "CARD",
                      "HOLD"
                    ]
                  },
                  "dateLessThan": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "dateGreaterThan": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "dateEquals": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "status": {
                    "example": "PENDING",
                    "description": "The statuses of the transaction that the client is allowed to search by.",
                    "type": "string",
                    "enum": [
                      "PENDING",
                      "CANCELED",
                      "COMPLETED",
                      "COMPLETED_WITH_EXCEPTIONS",
                      "REJECTED",
                      "RETURNED",
                      "PARTIALLY_COMPLETED",
                      "UNDEFINED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "metadata": {
                      "nullable": false,
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "nullable": false,
                      "description": "List of transactions meeting the request criteria",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                            "type": "string",
                            "enum": [
                              "PENDING",
                              "CANCELED",
                              "COMPLETED",
                              "COMPLETED_WITH_EXCEPTIONS",
                              "COMPLETED_NOT_IN_TARGET_WALLET",
                              "REJECTED",
                              "RETURNED",
                              "PARTIALLY_COMPLETED",
                              "UNDEFINED"
                            ],
                            "example": "PENDING"
                          },
                          "transactionType": {
                            "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                            "type": "string",
                            "enum": [
                              "PAYIN",
                              "PAYTO",
                              "PAYINTO",
                              "TRANSFER",
                              "PAYOUT",
                              "PAYIN_REVERSAL",
                              "PAYOUT_REVERSAL",
                              "MISC_CREDIT",
                              "MISC_DEBIT",
                              "UNDEFINED",
                              "PAYINTORECEIPT",
                              "PAYOUTCOLLECTION",
                              "PAYINTOCOLLECTION",
                              "PAYINTO_RETURN",
                              "PAYOUTCOLLECTION_RETURN",
                              "PAYINTOCOLLECTION_RETURN",
                              "RETURN",
                              "CARD",
                              "FEE"
                            ],
                            "example": "PAYIN"
                          },
                          "ledgerBalance": {
                            "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                            "type": "number",
                            "example": 10000
                          },
                          "creationTimestamp": {
                            "description": "The date and time the transaction was created.",
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-02-22T15:05:46.952+0000"
                          },
                          "effectiveDate": {
                            "description": "The time and date when the ledger balance was updated.",
                            "type": "string",
                            "format": "date",
                            "example": "2023-02-22T00:00:00.000Z"
                          },
                          "postingVersion": {
                            "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                            "type": "integer",
                            "example": 1
                          },
                          "transactionId": {
                            "type": "string",
                            "example": "qsajdb3ybv3",
                            "description": "Unique identifier of a transaction"
                          },
                          "debtorAccount": {
                            "type": "string",
                            "example": "200293631511",
                            "description": "Debtor account number (PRN)"
                          },
                          "creditorAccount": {
                            "type": "string",
                            "example": "200293631511",
                            "description": "Creditor account number (PRN)"
                          },
                          "currency": {
                            "type": "string",
                            "example": "USD",
                            "description": "Transaction currency"
                          },
                          "createdDate": {
                            "type": "string",
                            "example": "01-01-2022",
                            "description": "Transaction creation date"
                          },
                          "amount": {
                            "type": "string",
                            "example": "12.45",
                            "description": "Transaction amount"
                          },
                          "debtorName": {
                            "type": "string",
                            "example": "Modells Sporting Goods",
                            "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
                          },
                          "creditorName": {
                            "type": "string",
                            "example": "HSBC Holding",
                            "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
                          },
                          "accountingType": {
                            "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                            "type": "string",
                            "nullable": false,
                            "enum": [
                              "DR",
                              "CR"
                            ],
                            "example": "DR"
                          },
                          "paymentRoute": {
                            "description": "The method by which the payment was made - RTP, WIRE, ACH",
                            "type": "string",
                            "enum": [
                              "RTP",
                              "WIRE",
                              "ACH"
                            ],
                            "example": "ACH"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/old-transactions/search": {
      "post": {
        "summary": "Search Transactions",
        "description": "Retrieves a list of transactions based on search criteria",
        "operationId": "searchTransactionsOld",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountNumber": {
                    "type": "string",
                    "example": "200293631511"
                  },
                  "transactionId": {
                    "type": "string",
                    "example": "2451821d-e6f9-450d-b041-a20ae9d08f14"
                  },
                  "amountEquals": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "amountLessThan": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "amountGreaterThan": {
                    "type": "string",
                    "example": "100",
                    "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
                  },
                  "recipientAccount": {
                    "type": "string",
                    "example": "200293632041"
                  },
                  "paymentType": {
                    "example": "CARD",
                    "description": "The types of transaction that the client is allowed to search by.",
                    "type": "string",
                    "enum": [
                      "PAYIN",
                      "PAYOUT",
                      "TRANSFER",
                      "REVERSAL",
                      "UNDEFINED",
                      "RETURN",
                      "CARD",
                      "HOLD"
                    ]
                  },
                  "dateLessThan": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "dateGreaterThan": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "dateEquals": {
                    "type": "string",
                    "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
                    "example": "2022-01-01T00:00:00.000Z"
                  },
                  "status": {
                    "example": "PENDING",
                    "description": "The statuses of the transaction that the client is allowed to search by.",
                    "type": "string",
                    "enum": [
                      "PENDING",
                      "CANCELED",
                      "COMPLETED",
                      "COMPLETED_WITH_EXCEPTIONS",
                      "REJECTED",
                      "RETURNED",
                      "PARTIALLY_COMPLETED",
                      "UNDEFINED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                        "type": "string",
                        "enum": [
                          "PENDING",
                          "CANCELED",
                          "COMPLETED",
                          "COMPLETED_WITH_EXCEPTIONS",
                          "COMPLETED_NOT_IN_TARGET_WALLET",
                          "REJECTED",
                          "RETURNED",
                          "PARTIALLY_COMPLETED",
                          "UNDEFINED"
                        ],
                        "example": "PENDING"
                      },
                      "transactionType": {
                        "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                        "type": "string",
                        "enum": [
                          "PAYIN",
                          "PAYTO",
                          "PAYINTO",
                          "TRANSFER",
                          "PAYOUT",
                          "PAYIN_REVERSAL",
                          "PAYOUT_REVERSAL",
                          "MISC_CREDIT",
                          "MISC_DEBIT",
                          "UNDEFINED",
                          "PAYINTORECEIPT",
                          "PAYOUTCOLLECTION",
                          "PAYINTOCOLLECTION",
                          "PAYINTO_RETURN",
                          "PAYOUTCOLLECTION_RETURN",
                          "PAYINTOCOLLECTION_RETURN",
                          "RETURN",
                          "CARD",
                          "FEE"
                        ],
                        "example": "PAYIN"
                      },
                      "ledgerBalance": {
                        "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                        "type": "number",
                        "example": 10000
                      },
                      "creationTimestamp": {
                        "description": "The date and time the transaction was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-02-22T15:05:46.952+0000"
                      },
                      "effectiveDate": {
                        "description": "The time and date when the ledger balance was updated.",
                        "type": "string",
                        "format": "date",
                        "example": "2023-02-22T00:00:00.000Z"
                      },
                      "postingVersion": {
                        "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                        "type": "integer",
                        "example": 1
                      },
                      "transactionId": {
                        "type": "string",
                        "example": "qsajdb3ybv3",
                        "description": "Unique identifier of a transaction"
                      },
                      "debtorAccount": {
                        "type": "string",
                        "example": "200293631511",
                        "description": "Debtor account number (PRN)"
                      },
                      "creditorAccount": {
                        "type": "string",
                        "example": "200293631511",
                        "description": "Creditor account number (PRN)"
                      },
                      "currency": {
                        "type": "string",
                        "example": "USD",
                        "description": "Transaction currency"
                      },
                      "createdDate": {
                        "type": "string",
                        "example": "01-01-2022",
                        "description": "Transaction creation date"
                      },
                      "amount": {
                        "type": "string",
                        "example": "12.45",
                        "description": "Transaction amount"
                      },
                      "debtorName": {
                        "type": "string",
                        "example": "Modells Sporting Goods",
                        "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
                      },
                      "creditorName": {
                        "type": "string",
                        "example": "HSBC Holding",
                        "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
                      },
                      "accountingType": {
                        "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "DR",
                          "CR"
                        ],
                        "example": "DR"
                      },
                      "paymentRoute": {
                        "description": "The method by which the payment was made - RTP, WIRE, ACH",
                        "type": "string",
                        "enum": [
                          "RTP",
                          "WIRE",
                          "ACH"
                        ],
                        "example": "ACH"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/check-deposits": {
      "post": {
        "summary": "Deposit a check.",
        "description": "Submit check for processing.",
        "operationId": "depositCheck",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Check information required to process the deposit.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An object containing the check deposit request.\n",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "example": "12345678912345",
                    "description": "Account Identifier/ Payment Routing Number.\n"
                  },
                  "amount": {
                    "type": "number",
                    "example": 2500.5,
                    "description": "Financial value (amount of money) of the check deposit.\n"
                  },
                  "memo": {
                    "type": "string",
                    "example": "Rent",
                    "default": "Check Deposit",
                    "description": "A message or description of the check for the end user's reference.\n"
                  },
                  "currency": {
                    "type": "string",
                    "example": "USD",
                    "description": "The currency of the check, in three-character ISO currency code.\n"
                  }
                },
                "required": [
                  "accountId",
                  "amount",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object containing the response to a check deposit request.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "501012502503",
                      "description": "A unique identifier for the check.\n"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-11-17T10:04:37.000Z",
                      "description": "Date the check was submitted.\n"
                    },
                    "amount": {
                      "type": "number",
                      "example": 2500.5,
                      "description": "Financial value (amount of money) of the check deposit.\n"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD",
                      "description": "The currency of the check, in three-character ISO currency code.\n"
                    },
                    "memo": {
                      "type": "string",
                      "example": "Rent",
                      "description": "A message or description of the check for the end user's reference.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "CANCELLED",
                        "COMPLETE"
                      ]
                    },
                    "creditorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.\n"
                    },
                    "debtorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the debtor (the party making the payment).\n"
                    },
                    "debtorName": {
                      "type": "string",
                      "example": "ABC Limited",
                      "description": "The name of the debtor (the party making the payment).\n"
                    },
                    "debtorABA": {
                      "type": "string",
                      "example": "3000",
                      "description": "Debtor ABA (American Bankers Association) Routing Number.\n"
                    },
                    "checkImageStatus": {
                      "type": "object",
                      "description": "An object containing the status of a submitted image of a check.\n",
                      "properties": {
                        "front": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        },
                        "back": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Check Deposit"
        ]
      }
    },
    "/check-deposits/{id}": {
      "get": {
        "summary": "Get check details.",
        "description": "Returns information on a check deposit.",
        "operationId": "getCheckDepositInfo",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Check deposit identification number.",
            "required": true,
            "example": "1234567890",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object containing the response to a check deposit request.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "501012502503",
                      "description": "A unique identifier for the check.\n"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-11-17T10:04:37.000Z",
                      "description": "Date the check was submitted.\n"
                    },
                    "amount": {
                      "type": "number",
                      "example": 2500.5,
                      "description": "Financial value (amount of money) of the check deposit.\n"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD",
                      "description": "The currency of the check, in three-character ISO currency code.\n"
                    },
                    "memo": {
                      "type": "string",
                      "example": "Rent",
                      "description": "A message or description of the check for the end user's reference.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "CANCELLED",
                        "COMPLETE"
                      ]
                    },
                    "creditorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.\n"
                    },
                    "debtorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the debtor (the party making the payment).\n"
                    },
                    "debtorName": {
                      "type": "string",
                      "example": "ABC Limited",
                      "description": "The name of the debtor (the party making the payment).\n"
                    },
                    "debtorABA": {
                      "type": "string",
                      "example": "3000",
                      "description": "Debtor ABA (American Bankers Association) Routing Number.\n"
                    },
                    "checkImageStatus": {
                      "type": "object",
                      "description": "An object containing the status of a submitted image of a check.\n",
                      "properties": {
                        "front": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        },
                        "back": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Check Deposit"
        ]
      }
    },
    "/check-deposits/{id}/front": {
      "post": {
        "summary": "Submit an image of the front side of the check.",
        "description": "Sends an image of front side of the check for processing. The front of the check is where the account number, amount and signature are written.",
        "operationId": "submitFrontImageOfCheck",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Check deposit identification number.",
            "required": true,
            "example": "1234567890",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "image/jpeg, image/png"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object containing the response to a check deposit request.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "501012502503",
                      "description": "A unique identifier for the check.\n"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-11-17T10:04:37.000Z",
                      "description": "Date the check was submitted.\n"
                    },
                    "amount": {
                      "type": "number",
                      "example": 2500.5,
                      "description": "Financial value (amount of money) of the check deposit.\n"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD",
                      "description": "The currency of the check, in three-character ISO currency code.\n"
                    },
                    "memo": {
                      "type": "string",
                      "example": "Rent",
                      "description": "A message or description of the check for the end user's reference.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "CANCELLED",
                        "COMPLETE"
                      ]
                    },
                    "creditorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.\n"
                    },
                    "debtorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the debtor (the party making the payment).\n"
                    },
                    "debtorName": {
                      "type": "string",
                      "example": "ABC Limited",
                      "description": "The name of the debtor (the party making the payment).\n"
                    },
                    "debtorABA": {
                      "type": "string",
                      "example": "3000",
                      "description": "Debtor ABA (American Bankers Association) Routing Number.\n"
                    },
                    "checkImageStatus": {
                      "type": "object",
                      "description": "An object containing the status of a submitted image of a check.\n",
                      "properties": {
                        "front": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        },
                        "back": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Check Deposit"
        ]
      }
    },
    "/check-deposits/{id}/back": {
      "post": {
        "summary": "Submit an image of the back of the check.",
        "description": "Sends an image of back of the check for processing.",
        "operationId": "submitBackImageOfCheck",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Check deposit identification number.",
            "required": true,
            "example": "1234567890",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "image/jpeg, image/png"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object containing the response to a check deposit request.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "501012502503",
                      "description": "A unique identifier for the check.\n"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-11-17T10:04:37.000Z",
                      "description": "Date the check was submitted.\n"
                    },
                    "amount": {
                      "type": "number",
                      "example": 2500.5,
                      "description": "Financial value (amount of money) of the check deposit.\n"
                    },
                    "currency": {
                      "type": "string",
                      "example": "USD",
                      "description": "The currency of the check, in three-character ISO currency code.\n"
                    },
                    "memo": {
                      "type": "string",
                      "example": "Rent",
                      "description": "A message or description of the check for the end user's reference.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "CANCELLED",
                        "COMPLETE"
                      ]
                    },
                    "creditorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.\n"
                    },
                    "debtorAccount": {
                      "type": "string",
                      "example": "1234567890",
                      "description": "Account identifier of the debtor (the party making the payment).\n"
                    },
                    "debtorName": {
                      "type": "string",
                      "example": "ABC Limited",
                      "description": "The name of the debtor (the party making the payment).\n"
                    },
                    "debtorABA": {
                      "type": "string",
                      "example": "3000",
                      "description": "Debtor ABA (American Bankers Association) Routing Number.\n"
                    },
                    "checkImageStatus": {
                      "type": "object",
                      "description": "An object containing the status of a submitted image of a check.\n",
                      "properties": {
                        "front": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        },
                        "back": {
                          "type": "string",
                          "enum": [
                            "ACCEPTED",
                            "REJECTED",
                            "NOT_SUBMITTED"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Check Deposit"
        ]
      }
    },
    "/check-deposits/{id}/images": {
      "get": {
        "summary": "Get check images.",
        "description": "Returns a pdf file containing front and back image of check by id.",
        "operationId": "getCheckImages",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Check deposit identification number.",
            "required": true,
            "example": "1234567890",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check downloaded successfully.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Check Deposit"
        ]
      }
    },
    "/debit-cards": {
      "get": {
        "summary": "List Cards",
        "description": "Retrieves a list of debit cards for a specific client.",
        "operationId": "getDebitCards",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "examples": {
              "Default": {
                "value": 1000000001
              }
            },
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Current page number.",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "examples": {
              "Default": {
                "value": 0
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "default": 25
            },
            "required": false,
            "examples": {
              "Default": {
                "value": 25
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of debit cards for a specific client.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "metadata": {
                      "nullable": false,
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "nullable": false,
                      "description": "List of debit cards for a specific client",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "accountId",
                          "firstName",
                          "middleName",
                          "lastName",
                          "last4",
                          "expirationDate",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "100000158367",
                            "description": "Unique identifier for the card."
                          },
                          "accountId": {
                            "type": "string",
                            "example": "12345678912345",
                            "description": "Account identifier or payment routing number."
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John",
                            "description": "First name of the client."
                          },
                          "middleName": {
                            "type": "string",
                            "example": "Daniel",
                            "description": "Middle name of the client."
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe",
                            "description": "Last name of the client."
                          },
                          "last4": {
                            "type": "string",
                            "example": "4444",
                            "description": "Last Four digits of the card number."
                          },
                          "expirationDate": {
                            "type": "string",
                            "example": "30-Sep-2024",
                            "description": "Card expiration date."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "SUSPEND",
                              "DAMAGED",
                              "DEACTIVE",
                              "DEFECTIVE",
                              "LOST",
                              "STOLEN",
                              "UNDELIVER"
                            ],
                            "example": "ACTIVE",
                            "description": "The current status of the card."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "ERROR.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errorDescription"
                  ],
                  "properties": {
                    "errorDescription": {
                      "type": "string",
                      "description": "Freeform explanatory text for the error.\n",
                      "example": "Request params don't match the API request schema"
                    },
                    "serviceErrorCode": {
                      "type": "string",
                      "description": "A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)\n",
                      "example": "INVALID_INPUT"
                    },
                    "externalErrorCode": {
                      "type": "string",
                      "description": "A code defined by the service for the external partner that includes a more specific information of what caused the error.\n",
                      "example": "Unable to parse given input"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "ERROR.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errorDescription"
                  ],
                  "properties": {
                    "errorDescription": {
                      "type": "string",
                      "description": "Freeform explanatory text for the error.\n",
                      "example": "Request params don't match the API request schema"
                    },
                    "serviceErrorCode": {
                      "type": "string",
                      "description": "A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)\n",
                      "example": "INVALID_INPUT"
                    },
                    "externalErrorCode": {
                      "type": "string",
                      "description": "A code defined by the service for the external partner that includes a more specific information of what caused the error.\n",
                      "example": "Unable to parse given input"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Debit Cards"
        ]
      },
      "post": {
        "summary": "Create Debit Card",
        "description": "Creates a new debit card.",
        "operationId": "createDebitCard",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "requestBody": {
          "description": "Customer account details required to create a new debit card.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Object containing Create Debit Card Request\n",
                "properties": {
                  "accountId": {
                    "type": "string",
                    "example": "12345678912345",
                    "description": "Account Identifier/ Payment Routing Number\n"
                  },
                  "relatedPartyId": {
                    "type": "string",
                    "example": "7e2d7459-f045-4520-b408-897754d23f9",
                    "description": "Party Id of the Card Holder\n"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John",
                    "description": "First Name of the Cardholder provided during Onboarding.\n"
                  },
                  "middleName": {
                    "type": "string",
                    "example": "Xavier",
                    "description": "Middle Name of the Cardholder provided during Onboarding.\n"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe",
                    "description": "Last Name of the Cardholder provided during Onboarding.\n"
                  },
                  "birthDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of birth of the Cardholder provided during Onboarding\n",
                    "example": "2000-10-12T00:00:00.000Z"
                  },
                  "citizenshipCountry": {
                    "type": "string",
                    "example": "US",
                    "description": "Citizenship of the Cardholder.\n"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@xyz.com",
                    "description": "Email Address of the Cardholder used for communication of New Cards, Card Updates & Other Lifecycle Events.\n"
                  },
                  "mobilePhone": {
                    "type": "object",
                    "properties": {
                      "contactNumber": {
                        "type": "string",
                        "maxLength": 15,
                        "example": "5558883333"
                      },
                      "countryCode": {
                        "type": "string",
                        "maxLength": 5,
                        "example": "840"
                      }
                    }
                  },
                  "mailingAddress": {
                    "type": "object",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address1": {
                            "type": "string",
                            "example": "345 Wouda St"
                          },
                          "address2": {
                            "type": "string",
                            "example": "Malibu Point"
                          },
                          "address3": {
                            "type": "string",
                            "example": ""
                          },
                          "city": {
                            "type": "string",
                            "example": "Springfield"
                          },
                          "state": {
                            "type": "string",
                            "example": "ND"
                          },
                          "country": {
                            "type": "string",
                            "example": "United States"
                          },
                          "postalCode": {
                            "type": "string",
                            "example": "58008"
                          }
                        },
                        "description": "Address Object\n"
                      }
                    ]
                  },
                  "governmentId": {
                    "type": "object",
                    "properties": {
                      "idType": {
                        "type": "string",
                        "enum": [
                          "L",
                          "P",
                          "R",
                          "T",
                          "U",
                          "V",
                          "X"
                        ],
                        "example": "T"
                      },
                      "idIssuanceCountry": {
                        "type": "string",
                        "example": "US"
                      },
                      "idValue": {
                        "type": "string",
                        "example": "515081972"
                      },
                      "idIssuanceDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2015-10-15T00:00:00.000Z"
                      },
                      "idExpirationDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-03-14T00:00:00.000Z"
                      }
                    }
                  },
                  "maxDailySpend": {
                    "type": "number",
                    "description": "The maximum total amount that can be spent in a single day. Resets at 00:00 each day.\n",
                    "example": 100,
                    "minimum": 0
                  },
                  "maxDailyCashWithdrawal": {
                    "type": "number",
                    "description": "The total amount of cash that can be withdrawn in a single day.\n",
                    "example": 100,
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An Object containing Create Debit Card Response\n",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "example": "501012502503",
                      "description": "Account Identifier/ Payment Routing Number\n"
                    },
                    "message": {
                      "type": "string",
                      "example": "XXXX-XXXX-XXXX-9196 card successfully created. A Physical card will be mailed to the address on file.",
                      "description": "Customer Card Information Message\n"
                    },
                    "link": {
                      "type": "string",
                      "example": "https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==",
                      "description": "Link to the Customer Profile\n"
                    },
                    "id": {
                      "type": "string",
                      "example": "100000161175",
                      "description": "Card Identifier\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Debit Cards"
        ]
      }
    },
    "/old-debit-cards": {
      "get": {
        "summary": "List Cards",
        "description": "Returns a list of Debit Cards for a specific Client Profile",
        "operationId": "getDebitCardsOld",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "examples": {
              "Default": {
                "value": 1000000001
              }
            },
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Current Page Number",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "examples": {
              "Default": {
                "value": 1
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "No of Records Per Page",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "examples": {
              "Default": {
                "value": 100
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "100000158367",
                        "description": "Unique identifier for the card.\n"
                      },
                      "accountId": {
                        "type": "string",
                        "example": "12345678912345",
                        "description": "Account identifier or payment routing number.\n"
                      },
                      "firstName": {
                        "type": "string",
                        "format": "string",
                        "example": "John",
                        "description": "First name of the client.\n"
                      },
                      "middleName": {
                        "type": "string",
                        "example": "Daniel",
                        "description": "Middle name of the client.\n"
                      },
                      "lastName": {
                        "type": "string",
                        "example": "Doe",
                        "description": "Last name of the client.\n"
                      },
                      "last4": {
                        "type": "string",
                        "example": "4444",
                        "description": "Last Four digits of the card number.\n"
                      },
                      "expirationDate": {
                        "type": "string",
                        "example": "30-Sep-2024",
                        "description": "Card expiration date.\n"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "ACTIVE",
                          "SUSPEND",
                          "DAMAGED",
                          "DEACTIVE",
                          "DEFECTIVE",
                          "LOST",
                          "STOLEN",
                          "UNDELIVER"
                        ],
                        "example": "ACTIVE",
                        "description": "The current status of the card.\n"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "ERROR.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errorDescription"
                  ],
                  "properties": {
                    "errorDescription": {
                      "type": "string",
                      "description": "Freeform explanatory text for the error.\n",
                      "example": "Request params don't match the API request schema"
                    },
                    "serviceErrorCode": {
                      "type": "string",
                      "description": "A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)\n",
                      "example": "INVALID_INPUT"
                    },
                    "externalErrorCode": {
                      "type": "string",
                      "description": "A code defined by the service for the external partner that includes a more specific information of what caused the error.\n",
                      "example": "Unable to parse given input"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "ERROR.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errorDescription"
                  ],
                  "properties": {
                    "errorDescription": {
                      "type": "string",
                      "description": "Freeform explanatory text for the error.\n",
                      "example": "Request params don't match the API request schema"
                    },
                    "serviceErrorCode": {
                      "type": "string",
                      "description": "A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)\n",
                      "example": "INVALID_INPUT"
                    },
                    "externalErrorCode": {
                      "type": "string",
                      "description": "A code defined by the service for the external partner that includes a more specific information of what caused the error.\n",
                      "example": "Unable to parse given input"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Debit Cards"
        ]
      }
    },
    "/debit-cards/{id}": {
      "get": {
        "summary": "Get Card",
        "description": "Returns card ID and iFrame link for virtual card details for a specific card.",
        "operationId": "getDebitCard",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "examples": {
              "ActiveCard": {
                "value": 1000000001
              },
              "InactiveCard": {
                "value": 1000000002
              }
            },
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card Identifier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            },
            "examples": {
              "ActiveCard": {
                "value": "100000983036"
              },
              "InactiveCard": {
                "value": "100000983037"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An Object with Card Detail Response for specific Card Id\n",
                  "required": [
                    "accountId",
                    "link"
                  ],
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "example": "12345678912345",
                      "description": "Account Identifier/ Payment Routing Number\n"
                    },
                    "link": {
                      "type": "string",
                      "example": "https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==",
                      "description": "Web link to the Card Holder Profile\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Debit Cards"
        ]
      },
      "post": {
        "summary": "Update Card",
        "description": "Updates card details, such as PIN reset or to lock a lost card.",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "example": "100000158367",
            "in": "path",
            "description": "Unique identifier for the debit card.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Card update info required to either set/reset PIN, lock/unlock card set card as replaced, or set card as cancelled.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An Object containing Card Update Request\n",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier of the Card.\nOptional field, only needed for updating new card identifier.\n"
                  },
                  "pin": {
                    "type": "string",
                    "description": "4 digit ATM pin to be used for associated card.\nOptional field. Only include if setting a new PIN.\n"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "LOCKED",
                      "UNLOCKED",
                      "REPLACED",
                      "CANCELLED"
                    ],
                    "description": "New status of the card after request. Can be locked/unlocked/replaced/cancelled status.\nOptional field. Only use if you want to update the status of the card.\n"
                  },
                  "replacementReason": {
                    "type": "string",
                    "enum": [
                      "LOST",
                      "STOLEN",
                      "DAMAGED",
                      "DEFECTIVE"
                    ],
                    "description": "Reason for replacing card. Only required if status is set to REPLACED.\n"
                  },
                  "cancellingReason": {
                    "type": "string",
                    "enum": [
                      "LOST",
                      "STOLEN",
                      "DAMAGED",
                      "DEFECTIVE",
                      "DEACTIVE"
                    ],
                    "description": "Reason for cancelling card. Only required if status is set to CANCELLED.\n"
                  },
                  "maxDailySpend": {
                    "type": "number",
                    "description": "The maximum total amount that can be spent in a single day. Resets at 00:00 each day.\n",
                    "example": 100,
                    "minimum": 0
                  },
                  "maxDailyCashWithdrawal": {
                    "type": "number",
                    "description": "The total amount of cash that can be withdrawn in a single day.\n",
                    "example": 100,
                    "minimum": 0
                  }
                }
              },
              "examples": {
                "setPinPayload": {
                  "summary": "Payload to set PIN",
                  "value": {
                    "pin": "1234"
                  }
                },
                "setCardLockedPayload": {
                  "summary": "Payload to set card as locked",
                  "value": {
                    "status": "LOCKED"
                  }
                },
                "setCardReplacedPayload": {
                  "summary": "Payload to set card as replaced",
                  "value": {
                    "status": "REPLACED",
                    "replacementReason": "LOST"
                  }
                },
                "setCardCancelledPayload": {
                  "summary": "Payload to set card as cancelled",
                  "value": {
                    "status": "CANCELLED",
                    "cancellingReason": "DAMAGED"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An object with response code corresponding to the status of put request operation\n",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "New Pin Set successfully",
                      "description": "Message for PUT operation status\n"
                    },
                    "id": {
                      "type": "string",
                      "example": "100000160987",
                      "description": "New Card Identifier to Update\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Debit Cards"
        ]
      }
    },
    "/recipients": {
      "get": {
        "summary": "List Recipients",
        "description": "Retrieves a list of all recipients for a given client profile.",
        "operationId": "getAllRecipients",
        "tags": [
          "Recipients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "recipients": {
                          "type": "array",
                          "description": "Recipients available in current page",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "account",
                              "partyDetails"
                            ],
                            "properties": {
                              "partyDetails": {
                                "type": "object",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "address": {
                                    "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                                    "type": "object",
                                    "required": [
                                      "addressLine1",
                                      "city",
                                      "countryCode",
                                      "state",
                                      "zip"
                                    ],
                                    "properties": {
                                      "addressLine1": {
                                        "type": "string",
                                        "nullable": false,
                                        "minLength": 1,
                                        "maxLength": 70,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                                        "example": "345 Wouda St"
                                      },
                                      "addressLine2": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 70,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "Information to complete the street address, such as apartment number or the name of a building.",
                                        "example": "Malibu Point"
                                      },
                                      "addressLine3": {
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 70,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "Further information about an address, such as a locally known area.",
                                        "example": "Greater Woking"
                                      },
                                      "city": {
                                        "type": "string",
                                        "nullable": false,
                                        "minLength": 1,
                                        "maxLength": 35,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "Whole name of the city or town of the address.",
                                        "example": "Springfield"
                                      },
                                      "countryCode": {
                                        "type": "string",
                                        "enum": [
                                          "US"
                                        ],
                                        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                                        "example": "US"
                                      },
                                      "state": {
                                        "type": "string",
                                        "nullable": false,
                                        "minLength": 1,
                                        "maxLength": 35,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                                        "example": "ND"
                                      },
                                      "zip": {
                                        "type": "string",
                                        "nullable": false,
                                        "minLength": 1,
                                        "maxLength": 16,
                                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                        "description": "The postal code, such as a ZIP code in the USA, for the address.",
                                        "example": "58008"
                                      }
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "INDIVIDUAL",
                                      "ORGANIZATION"
                                    ],
                                    "nullable": false,
                                    "example": "INDIVIDUAL"
                                  },
                                  "firstName": {
                                    "type": "string",
                                    "maxLength": 70,
                                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                    "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                                    "example": "Jon"
                                  },
                                  "lastName": {
                                    "type": "string",
                                    "maxLength": 70,
                                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                    "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                                    "example": "Smith"
                                  },
                                  "businessName": {
                                    "type": "string",
                                    "maxLength": 140,
                                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                    "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                                    "example": "Widget Co."
                                  },
                                  "contacts": {
                                    "type": "array",
                                    "description": "Contact details for the recipient.",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "contactType",
                                        "value"
                                      ],
                                      "properties": {
                                        "contactType": {
                                          "type": "string",
                                          "nullable": false,
                                          "enum": [
                                            "EMAIL",
                                            "WEBSITE",
                                            "PHONE"
                                          ],
                                          "description": "Type of contact information being provided",
                                          "example": "PHONE"
                                        },
                                        "countryCode": {
                                          "type": "string",
                                          "pattern": "^\\+[1-9]\\d{0,2}$",
                                          "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                          "example": "+44"
                                        },
                                        "value": {
                                          "type": "string",
                                          "nullable": false,
                                          "minLength": 1,
                                          "maxLength": 2048,
                                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                          "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                          "example": "5343245789"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "account": {
                                "type": "object",
                                "required": [
                                  "number",
                                  "routingCodeType",
                                  "routingNumber",
                                  "countryCode"
                                ],
                                "description": "Bank account details of the recipient.",
                                "properties": {
                                  "number": {
                                    "type": "string",
                                    "nullable": false,
                                    "pattern": "^\\d{1,35}$",
                                    "description": "Payment Routing Number or Demand Deposit Account number.",
                                    "example": "021000021"
                                  },
                                  "type": {
                                    "type": "string",
                                    "nullable": false,
                                    "enum": [
                                      "CHECKING",
                                      "SAVINGS"
                                    ],
                                    "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                                    "example": "CHECKING"
                                  },
                                  "routingCodeType": {
                                    "type": "string",
                                    "nullable": false,
                                    "enum": [
                                      "USABA"
                                    ],
                                    "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                                    "example": "USABA"
                                  },
                                  "routingNumber": {
                                    "type": "string",
                                    "nullable": false,
                                    "pattern": "^\\d{9}$",
                                    "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                                    "example": "021000021"
                                  },
                                  "countryCode": {
                                    "type": "string",
                                    "enum": [
                                      "US"
                                    ],
                                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                                    "example": "US"
                                  }
                                }
                              },
                              "id": {
                                "type": "string",
                                "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Recipient",
        "description": "Creates a new recipient.",
        "operationId": "createRecipient",
        "tags": [
          "Recipients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "account",
                  "partyDetails"
                ],
                "properties": {
                  "partyDetails": {
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "address": {
                        "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                        "type": "object",
                        "required": [
                          "addressLine1",
                          "city",
                          "countryCode",
                          "state",
                          "zip"
                        ],
                        "properties": {
                          "addressLine1": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                            "example": "345 Wouda St"
                          },
                          "addressLine2": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Information to complete the street address, such as apartment number or the name of a building.",
                            "example": "Malibu Point"
                          },
                          "addressLine3": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Further information about an address, such as a locally known area.",
                            "example": "Greater Woking"
                          },
                          "city": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 35,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Whole name of the city or town of the address.",
                            "example": "Springfield"
                          },
                          "countryCode": {
                            "type": "string",
                            "enum": [
                              "US"
                            ],
                            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                            "example": "US"
                          },
                          "state": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 35,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                            "example": "ND"
                          },
                          "zip": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 16,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "The postal code, such as a ZIP code in the USA, for the address.",
                            "example": "58008"
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "INDIVIDUAL",
                          "ORGANIZATION"
                        ],
                        "nullable": false,
                        "example": "INDIVIDUAL"
                      },
                      "firstName": {
                        "type": "string",
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                        "example": "Jon"
                      },
                      "lastName": {
                        "type": "string",
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                        "example": "Smith"
                      },
                      "businessName": {
                        "type": "string",
                        "maxLength": 140,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                        "example": "Widget Co."
                      },
                      "contacts": {
                        "type": "array",
                        "description": "Contact details for the recipient.",
                        "items": {
                          "type": "object",
                          "required": [
                            "contactType",
                            "value"
                          ],
                          "properties": {
                            "contactType": {
                              "type": "string",
                              "nullable": false,
                              "enum": [
                                "EMAIL",
                                "WEBSITE",
                                "PHONE"
                              ],
                              "description": "Type of contact information being provided",
                              "example": "PHONE"
                            },
                            "countryCode": {
                              "type": "string",
                              "pattern": "^\\+[1-9]\\d{0,2}$",
                              "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                              "example": "+44"
                            },
                            "value": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 2048,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                              "example": "5343245789"
                            }
                          }
                        }
                      }
                    }
                  },
                  "account": {
                    "type": "object",
                    "required": [
                      "number",
                      "routingCodeType",
                      "routingNumber",
                      "countryCode"
                    ],
                    "description": "Bank account details of the recipient.",
                    "properties": {
                      "number": {
                        "type": "string",
                        "nullable": false,
                        "pattern": "^\\d{1,35}$",
                        "description": "Payment Routing Number or Demand Deposit Account number.",
                        "example": "021000021"
                      },
                      "type": {
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "CHECKING",
                          "SAVINGS"
                        ],
                        "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                        "example": "CHECKING"
                      },
                      "routingCodeType": {
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "USABA"
                        ],
                        "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                        "example": "USABA"
                      },
                      "routingNumber": {
                        "type": "string",
                        "nullable": false,
                        "pattern": "^\\d{9}$",
                        "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                        "example": "021000021"
                      },
                      "countryCode": {
                        "type": "string",
                        "enum": [
                          "US"
                        ],
                        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                        "example": "US"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The recipient was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "account",
                    "partyDetails"
                  ],
                  "properties": {
                    "partyDetails": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                          "type": "object",
                          "required": [
                            "addressLine1",
                            "city",
                            "countryCode",
                            "state",
                            "zip"
                          ],
                          "properties": {
                            "addressLine1": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                              "example": "345 Wouda St"
                            },
                            "addressLine2": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Information to complete the street address, such as apartment number or the name of a building.",
                              "example": "Malibu Point"
                            },
                            "addressLine3": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Further information about an address, such as a locally known area.",
                              "example": "Greater Woking"
                            },
                            "city": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Whole name of the city or town of the address.",
                              "example": "Springfield"
                            },
                            "countryCode": {
                              "type": "string",
                              "enum": [
                                "US"
                              ],
                              "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                              "example": "US"
                            },
                            "state": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                              "example": "ND"
                            },
                            "zip": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 16,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The postal code, such as a ZIP code in the USA, for the address.",
                              "example": "58008"
                            }
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "INDIVIDUAL",
                            "ORGANIZATION"
                          ],
                          "nullable": false,
                          "example": "INDIVIDUAL"
                        },
                        "firstName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Jon"
                        },
                        "lastName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Smith"
                        },
                        "businessName": {
                          "type": "string",
                          "maxLength": 140,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                          "example": "Widget Co."
                        },
                        "contacts": {
                          "type": "array",
                          "description": "Contact details for the recipient.",
                          "items": {
                            "type": "object",
                            "required": [
                              "contactType",
                              "value"
                            ],
                            "properties": {
                              "contactType": {
                                "type": "string",
                                "nullable": false,
                                "enum": [
                                  "EMAIL",
                                  "WEBSITE",
                                  "PHONE"
                                ],
                                "description": "Type of contact information being provided",
                                "example": "PHONE"
                              },
                              "countryCode": {
                                "type": "string",
                                "pattern": "^\\+[1-9]\\d{0,2}$",
                                "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                "example": "+44"
                              },
                              "value": {
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 2048,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                "example": "5343245789"
                              }
                            }
                          }
                        }
                      }
                    },
                    "account": {
                      "type": "object",
                      "required": [
                        "number",
                        "routingCodeType",
                        "routingNumber",
                        "countryCode"
                      ],
                      "description": "Bank account details of the recipient.",
                      "properties": {
                        "number": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{1,35}$",
                          "description": "Payment Routing Number or Demand Deposit Account number.",
                          "example": "021000021"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "CHECKING",
                            "SAVINGS"
                          ],
                          "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                          "example": "CHECKING"
                        },
                        "routingCodeType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "USABA"
                          ],
                          "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                          "example": "USABA"
                        },
                        "routingNumber": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{9}$",
                          "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                          "example": "021000021"
                        },
                        "countryCode": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                          "example": "US"
                        }
                      }
                    },
                    "id": {
                      "type": "string",
                      "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/recipients/{id}": {
      "get": {
        "summary": "Get Recipient",
        "description": "Retrieves information about a specific recipient.",
        "operationId": "getRecipient",
        "tags": [
          "Recipients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recipient ID. A unique identifier for a recipient.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "dea21834-f876-404b-a240-9977e598da5e"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "account",
                    "partyDetails"
                  ],
                  "properties": {
                    "partyDetails": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                          "type": "object",
                          "required": [
                            "addressLine1",
                            "city",
                            "countryCode",
                            "state",
                            "zip"
                          ],
                          "properties": {
                            "addressLine1": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                              "example": "345 Wouda St"
                            },
                            "addressLine2": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Information to complete the street address, such as apartment number or the name of a building.",
                              "example": "Malibu Point"
                            },
                            "addressLine3": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Further information about an address, such as a locally known area.",
                              "example": "Greater Woking"
                            },
                            "city": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Whole name of the city or town of the address.",
                              "example": "Springfield"
                            },
                            "countryCode": {
                              "type": "string",
                              "enum": [
                                "US"
                              ],
                              "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                              "example": "US"
                            },
                            "state": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                              "example": "ND"
                            },
                            "zip": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 16,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The postal code, such as a ZIP code in the USA, for the address.",
                              "example": "58008"
                            }
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "INDIVIDUAL",
                            "ORGANIZATION"
                          ],
                          "nullable": false,
                          "example": "INDIVIDUAL"
                        },
                        "firstName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Jon"
                        },
                        "lastName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Smith"
                        },
                        "businessName": {
                          "type": "string",
                          "maxLength": 140,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                          "example": "Widget Co."
                        },
                        "contacts": {
                          "type": "array",
                          "description": "Contact details for the recipient.",
                          "items": {
                            "type": "object",
                            "required": [
                              "contactType",
                              "value"
                            ],
                            "properties": {
                              "contactType": {
                                "type": "string",
                                "nullable": false,
                                "enum": [
                                  "EMAIL",
                                  "WEBSITE",
                                  "PHONE"
                                ],
                                "description": "Type of contact information being provided",
                                "example": "PHONE"
                              },
                              "countryCode": {
                                "type": "string",
                                "pattern": "^\\+[1-9]\\d{0,2}$",
                                "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                "example": "+44"
                              },
                              "value": {
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 2048,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                "example": "5343245789"
                              }
                            }
                          }
                        }
                      }
                    },
                    "account": {
                      "type": "object",
                      "required": [
                        "number",
                        "routingCodeType",
                        "routingNumber",
                        "countryCode"
                      ],
                      "description": "Bank account details of the recipient.",
                      "properties": {
                        "number": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{1,35}$",
                          "description": "Payment Routing Number or Demand Deposit Account number.",
                          "example": "021000021"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "CHECKING",
                            "SAVINGS"
                          ],
                          "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                          "example": "CHECKING"
                        },
                        "routingCodeType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "USABA"
                          ],
                          "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                          "example": "USABA"
                        },
                        "routingNumber": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{9}$",
                          "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                          "example": "021000021"
                        },
                        "countryCode": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                          "example": "US"
                        }
                      }
                    },
                    "id": {
                      "type": "string",
                      "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Amend recipient",
        "description": "Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.",
        "operationId": "amendRecipient",
        "tags": [
          "Recipients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recipient ID. A unique identifier for a recipient.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "dea21834-f876-404b-a240-9977e598da5e"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "account",
                  "partyDetails"
                ],
                "properties": {
                  "partyDetails": {
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "address": {
                        "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                        "type": "object",
                        "required": [
                          "addressLine1",
                          "city",
                          "countryCode",
                          "state",
                          "zip"
                        ],
                        "properties": {
                          "addressLine1": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                            "example": "345 Wouda St"
                          },
                          "addressLine2": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Information to complete the street address, such as apartment number or the name of a building.",
                            "example": "Malibu Point"
                          },
                          "addressLine3": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 70,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Further information about an address, such as a locally known area.",
                            "example": "Greater Woking"
                          },
                          "city": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 35,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "Whole name of the city or town of the address.",
                            "example": "Springfield"
                          },
                          "countryCode": {
                            "type": "string",
                            "enum": [
                              "US"
                            ],
                            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                            "example": "US"
                          },
                          "state": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 35,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                            "example": "ND"
                          },
                          "zip": {
                            "type": "string",
                            "nullable": false,
                            "minLength": 1,
                            "maxLength": 16,
                            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                            "description": "The postal code, such as a ZIP code in the USA, for the address.",
                            "example": "58008"
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "INDIVIDUAL",
                          "ORGANIZATION"
                        ],
                        "nullable": false,
                        "example": "INDIVIDUAL"
                      },
                      "firstName": {
                        "type": "string",
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                        "example": "Jon"
                      },
                      "lastName": {
                        "type": "string",
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                        "example": "Smith"
                      },
                      "businessName": {
                        "type": "string",
                        "maxLength": 140,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                        "example": "Widget Co."
                      },
                      "contacts": {
                        "type": "array",
                        "description": "Contact details for the recipient.",
                        "items": {
                          "type": "object",
                          "required": [
                            "contactType",
                            "value"
                          ],
                          "properties": {
                            "contactType": {
                              "type": "string",
                              "nullable": false,
                              "enum": [
                                "EMAIL",
                                "WEBSITE",
                                "PHONE"
                              ],
                              "description": "Type of contact information being provided",
                              "example": "PHONE"
                            },
                            "countryCode": {
                              "type": "string",
                              "pattern": "^\\+[1-9]\\d{0,2}$",
                              "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                              "example": "+44"
                            },
                            "value": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 2048,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                              "example": "5343245789"
                            }
                          }
                        }
                      }
                    }
                  },
                  "account": {
                    "type": "object",
                    "required": [
                      "number",
                      "routingCodeType",
                      "routingNumber",
                      "countryCode"
                    ],
                    "description": "Bank account details of the recipient.",
                    "properties": {
                      "number": {
                        "type": "string",
                        "nullable": false,
                        "pattern": "^\\d{1,35}$",
                        "description": "Payment Routing Number or Demand Deposit Account number.",
                        "example": "021000021"
                      },
                      "type": {
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "CHECKING",
                          "SAVINGS"
                        ],
                        "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                        "example": "CHECKING"
                      },
                      "routingCodeType": {
                        "type": "string",
                        "nullable": false,
                        "enum": [
                          "USABA"
                        ],
                        "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                        "example": "USABA"
                      },
                      "routingNumber": {
                        "type": "string",
                        "nullable": false,
                        "pattern": "^\\d{9}$",
                        "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                        "example": "021000021"
                      },
                      "countryCode": {
                        "type": "string",
                        "enum": [
                          "US"
                        ],
                        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                        "example": "US"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The recipient was amended successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "account",
                    "partyDetails"
                  ],
                  "properties": {
                    "partyDetails": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                          "type": "object",
                          "required": [
                            "addressLine1",
                            "city",
                            "countryCode",
                            "state",
                            "zip"
                          ],
                          "properties": {
                            "addressLine1": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                              "example": "345 Wouda St"
                            },
                            "addressLine2": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Information to complete the street address, such as apartment number or the name of a building.",
                              "example": "Malibu Point"
                            },
                            "addressLine3": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Further information about an address, such as a locally known area.",
                              "example": "Greater Woking"
                            },
                            "city": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Whole name of the city or town of the address.",
                              "example": "Springfield"
                            },
                            "countryCode": {
                              "type": "string",
                              "enum": [
                                "US"
                              ],
                              "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                              "example": "US"
                            },
                            "state": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                              "example": "ND"
                            },
                            "zip": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 16,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The postal code, such as a ZIP code in the USA, for the address.",
                              "example": "58008"
                            }
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "INDIVIDUAL",
                            "ORGANIZATION"
                          ],
                          "nullable": false,
                          "example": "INDIVIDUAL"
                        },
                        "firstName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Jon"
                        },
                        "lastName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Smith"
                        },
                        "businessName": {
                          "type": "string",
                          "maxLength": 140,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                          "example": "Widget Co."
                        },
                        "contacts": {
                          "type": "array",
                          "description": "Contact details for the recipient.",
                          "items": {
                            "type": "object",
                            "required": [
                              "contactType",
                              "value"
                            ],
                            "properties": {
                              "contactType": {
                                "type": "string",
                                "nullable": false,
                                "enum": [
                                  "EMAIL",
                                  "WEBSITE",
                                  "PHONE"
                                ],
                                "description": "Type of contact information being provided",
                                "example": "PHONE"
                              },
                              "countryCode": {
                                "type": "string",
                                "pattern": "^\\+[1-9]\\d{0,2}$",
                                "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                "example": "+44"
                              },
                              "value": {
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 2048,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                "example": "5343245789"
                              }
                            }
                          }
                        }
                      }
                    },
                    "account": {
                      "type": "object",
                      "required": [
                        "number",
                        "routingCodeType",
                        "routingNumber",
                        "countryCode"
                      ],
                      "description": "Bank account details of the recipient.",
                      "properties": {
                        "number": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{1,35}$",
                          "description": "Payment Routing Number or Demand Deposit Account number.",
                          "example": "021000021"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "CHECKING",
                            "SAVINGS"
                          ],
                          "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                          "example": "CHECKING"
                        },
                        "routingCodeType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "USABA"
                          ],
                          "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                          "example": "USABA"
                        },
                        "routingNumber": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{9}$",
                          "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                          "example": "021000021"
                        },
                        "countryCode": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                          "example": "US"
                        }
                      }
                    },
                    "id": {
                      "type": "string",
                      "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete recipient",
        "description": "Deletes information about a recipient.",
        "operationId": "deleteRecipient",
        "tags": [
          "Recipients"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique identifier for a client.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recipient ID. A unique identifier for a recipient.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "AcmePaperSupplies": {
                "value": "2e04375b-da4e-4855-b534-dcdb6186822e"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The recipient was deleted successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/cases": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Returns all cases for client profile.",
        "description": "Get cases for client profile",
        "operationId": "getCases",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "required": [
                        "limit",
                        "page",
                        "totalItems"
                      ],
                      "properties": {
                        "limit": {
                          "type": "integer",
                          "description": "The number of items on a page"
                        },
                        "page": {
                          "type": "integer",
                          "description": "The page number"
                        },
                        "totalItems": {
                          "type": "integer",
                          "description": "Total number of items in all pages"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "type",
                          "status",
                          "subject",
                          "createdDate",
                          "updatedDate",
                          "createdBy"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Case ID. A unique identifier for a case.",
                            "example": "00001154"
                          },
                          "type": {
                            "type": "string",
                            "description": "Case category",
                            "enum": [
                              "ACCOUNT",
                              "CARD",
                              "ENROLLMENT_OR_SIGNUP",
                              "OTHER",
                              "PROFILE",
                              "STATEMENT",
                              "SUSPICIOUS_ACTIVITY",
                              "TRANSACTION"
                            ],
                            "example": "ACCOUNT"
                          },
                          "status": {
                            "type": "string",
                            "description": "Current status on case",
                            "enum": [
                              "CLOSED",
                              "REOPEN",
                              "OPEN"
                            ],
                            "example": "OPEN"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of a case",
                            "example": "Lost my debit card"
                          },
                          "createdDate": {
                            "type": "string",
                            "description": "Date/Time the case was opened",
                            "example": "2022-02-22T18:02:23.000+0000"
                          },
                          "updatedDate": {
                            "type": "string",
                            "description": "Date/Time the case was closed",
                            "example": "2022-02-24T19:02:23.000+0000"
                          },
                          "createdBy": {
                            "type": "object",
                            "required": [
                              "name",
                              "agent"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Contact name",
                                "example": "Service Agent"
                              },
                              "agent": {
                                "type": "boolean",
                                "description": "Agent identifier",
                                "example": false
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Create a new case",
        "description": "Raises a case for support with Embedded Banking.",
        "operationId": "createCase",
        "requestBody": {
          "required": true,
          "description": "Information needed to create a new case.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "subject",
                  "description"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Case category",
                    "enum": [
                      "ACCOUNT",
                      "CARD",
                      "ENROLLMENT_OR_SIGNUP",
                      "PROFILE",
                      "STATEMENT",
                      "SUSPICIOUS_ACTIVITY",
                      "TRANSACTION",
                      "OTHER"
                    ],
                    "example": "STATEMENT"
                  },
                  "subject": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "pattern": "^(?!\\s*$).+",
                    "description": "Subject of a Case",
                    "example": "Information on Statements"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 3000,
                    "pattern": "^(?!\\s*$).+",
                    "description": "More detailed description of the Case",
                    "example": "I would like more information about my statements and about charges on my account"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "createdDate"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Case identifier",
                      "example": "00001159"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "Date/Time the case was opened",
                      "example": "2022-02-24T19:02:23.000+0000"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/old-cases": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "List all the cases for a specific Client Profile",
        "description": "Get cases for client profile",
        "operationId": "getCasesOld",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "metadata",
                      "items"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "limit",
                          "page",
                          "totalItems"
                        ],
                        "properties": {
                          "limit": {
                            "type": "integer",
                            "description": "The number of items on a page"
                          },
                          "page": {
                            "type": "integer",
                            "description": "The page number"
                          },
                          "totalItems": {
                            "type": "integer",
                            "description": "Total number of items in all pages"
                          }
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "id",
                            "type",
                            "status",
                            "subject",
                            "createdDate",
                            "updatedDate",
                            "createdBy"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Case ID. A unique identifier for a case.",
                              "example": "00001154"
                            },
                            "type": {
                              "type": "string",
                              "description": "Case category",
                              "enum": [
                                "ACCOUNT",
                                "CARD",
                                "ENROLLMENT_OR_SIGNUP",
                                "OTHER",
                                "PROFILE",
                                "STATEMENT",
                                "SUSPICIOUS_ACTIVITY",
                                "TRANSACTION"
                              ],
                              "example": "ACCOUNT"
                            },
                            "status": {
                              "type": "string",
                              "description": "Current status on case",
                              "enum": [
                                "CLOSED",
                                "REOPEN",
                                "OPEN"
                              ],
                              "example": "OPEN"
                            },
                            "subject": {
                              "type": "string",
                              "description": "Subject of a case",
                              "example": "Lost my debit card"
                            },
                            "createdDate": {
                              "type": "string",
                              "description": "Date/Time the case was opened",
                              "example": "2022-02-22T18:02:23.000+0000"
                            },
                            "updatedDate": {
                              "type": "string",
                              "description": "Date/Time the case was closed",
                              "example": "2022-02-24T19:02:23.000+0000"
                            },
                            "createdBy": {
                              "type": "object",
                              "required": [
                                "name",
                                "agent"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Contact name",
                                  "example": "Service Agent"
                                },
                                "agent": {
                                  "type": "boolean",
                                  "description": "Agent identifier",
                                  "example": false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/cases/{id}": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Returns details of a case using the unique case ID.",
        "description": "Get case details",
        "operationId": "getCase",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "status",
                    "origin",
                    "subject",
                    "description",
                    "createdDate",
                    "updatedDate",
                    "createdBy"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Case identifier.",
                      "example": "00001154"
                    },
                    "type": {
                      "type": "string",
                      "description": "Case category",
                      "enum": [
                        "ACCOUNT",
                        "CARD",
                        "ENROLLMENT_OR_SIGNUP",
                        "OTHER",
                        "PROFILE",
                        "STATEMENT",
                        "SUSPICIOUS_ACTIVITY",
                        "TRANSACTION"
                      ],
                      "example": "ACCOUNT"
                    },
                    "status": {
                      "type": "string",
                      "description": "Current status on case.",
                      "enum": [
                        "CLOSED",
                        "REOPEN",
                        "OPEN"
                      ],
                      "example": "OPEN"
                    },
                    "origin": {
                      "type": "string",
                      "description": "How the case was originally reported. This can be by form, phone, or email.",
                      "enum": [
                        "PHONE",
                        "FORM",
                        "EMAIL"
                      ],
                      "example": "FORM"
                    },
                    "subject": {
                      "type": "string",
                      "description": "Subject of a case.",
                      "example": "Issue with a payment made on 2/23/2022"
                    },
                    "description": {
                      "type": "string",
                      "description": "More detailed description of the case.",
                      "example": "I noticed that I mistakenly made a payment to the wrong supplier. I would like to revert the charges and send the correct one."
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "Date/Time the case was opened",
                      "example": "2022-02-22T18:02:23.000+0000"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "Date/Time the case was closed",
                      "example": "2022-02-24T19:02:23.000+0000"
                    },
                    "createdBy": {
                      "type": "object",
                      "required": [
                        "name",
                        "agent"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Contact name",
                          "example": "Service Agent"
                        },
                        "agent": {
                          "type": "boolean",
                          "description": "Agent identifier",
                          "example": false
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "createdDate",
                          "comment",
                          "commentedBy"
                        ],
                        "properties": {
                          "createdDate": {
                            "type": "string",
                            "description": "Comment creation date",
                            "example": "2022-01-06T21:53:27.000+0000"
                          },
                          "comment": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 3000,
                            "pattern": "^(?!\\s*$).+",
                            "description": "Comment description or a copy of the main points of the comment.",
                            "example": "Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?"
                          },
                          "commentedBy": {
                            "type": "object",
                            "required": [
                              "name",
                              "agent"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Contact name",
                                "example": "Service Agent"
                              },
                              "agent": {
                                "type": "boolean",
                                "description": "Agent identifier",
                                "example": false
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Case identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Update information on a specific case.",
        "description": "Update case",
        "operationId": "updateCase",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "comment"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN.",
                    "enum": [
                      "CLOSED",
                      "REOPEN"
                    ],
                    "example": "REOPEN"
                  },
                  "comment": {
                    "type": "string",
                    "description": "A comment on the case. Can be the reason for updating the status of a case.",
                    "pattern": "^(?!\\s*$).+",
                    "minLength": 1,
                    "maxLength": 3000,
                    "example": "I'm still having issues with one of my Debit cards. I would like to have a new card re-issued."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "status",
                    "origin",
                    "subject",
                    "description",
                    "createdDate",
                    "updatedDate",
                    "createdBy"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Case identifier.",
                      "example": "00001154"
                    },
                    "type": {
                      "type": "string",
                      "description": "Case category",
                      "enum": [
                        "ACCOUNT",
                        "CARD",
                        "ENROLLMENT_OR_SIGNUP",
                        "OTHER",
                        "PROFILE",
                        "STATEMENT",
                        "SUSPICIOUS_ACTIVITY",
                        "TRANSACTION"
                      ],
                      "example": "ACCOUNT"
                    },
                    "status": {
                      "type": "string",
                      "description": "Current status on case.",
                      "enum": [
                        "CLOSED",
                        "REOPEN",
                        "OPEN"
                      ],
                      "example": "OPEN"
                    },
                    "origin": {
                      "type": "string",
                      "description": "How the case was originally reported. This can be by form, phone, or email.",
                      "enum": [
                        "PHONE",
                        "FORM",
                        "EMAIL"
                      ],
                      "example": "FORM"
                    },
                    "subject": {
                      "type": "string",
                      "description": "Subject of a case.",
                      "example": "Issue with a payment made on 2/23/2022"
                    },
                    "description": {
                      "type": "string",
                      "description": "More detailed description of the case.",
                      "example": "I noticed that I mistakenly made a payment to the wrong supplier. I would like to revert the charges and send the correct one."
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "Date/Time the case was opened",
                      "example": "2022-02-22T18:02:23.000+0000"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "Date/Time the case was closed",
                      "example": "2022-02-24T19:02:23.000+0000"
                    },
                    "createdBy": {
                      "type": "object",
                      "required": [
                        "name",
                        "agent"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Contact name",
                          "example": "Service Agent"
                        },
                        "agent": {
                          "type": "boolean",
                          "description": "Agent identifier",
                          "example": false
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "createdDate",
                          "comment",
                          "commentedBy"
                        ],
                        "properties": {
                          "createdDate": {
                            "type": "string",
                            "description": "Comment creation date",
                            "example": "2022-01-06T21:53:27.000+0000"
                          },
                          "comment": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 3000,
                            "pattern": "^(?!\\s*$).+",
                            "description": "Comment description or a copy of the main points of the comment.",
                            "example": "Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?"
                          },
                          "commentedBy": {
                            "type": "object",
                            "required": [
                              "name",
                              "agent"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Contact name",
                                "example": "Service Agent"
                              },
                              "agent": {
                                "type": "boolean",
                                "description": "Agent identifier",
                                "example": false
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Case ID. The unique identifier for a case.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ]
      }
    },
    "/faqs": {
      "get": {
        "tags": [
          "Faq"
        ],
        "summary": "API to retrieve general FAQ content as well as C1 specific FAQ content",
        "description": "Retrieve FAQs",
        "operationId": "getFaq",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "List of FAQ Questions and Answers",
                  "required": [
                    "faqs"
                  ],
                  "properties": {
                    "faqs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "question",
                          "answer",
                          "type",
                          "tags"
                        ],
                        "properties": {
                          "question": {
                            "type": "string",
                            "description": "Question",
                            "example": "How can I get a new Debit Card?"
                          },
                          "answer": {
                            "type": "string",
                            "description": "Answer",
                            "example": "Login to your profile and request a new card"
                          },
                          "type": {
                            "type": "string",
                            "description": "FAQ Type enum",
                            "enum": [
                              "C1 General",
                              "C1 Specific"
                            ],
                            "example": "C1 Specific"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "FAQ Tags",
                            "example": [
                              "Banking",
                              "Payment"
                            ]
                          }
                        }
                      },
                      "description": "Object of a FAQ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma seperated tag values",
            "required": false,
            "example": [
              "Payments",
              "Banking"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/legal-documents": {
      "get": {
        "summary": "Get latest legal documents by type",
        "description": "Returns the latest legal document.",
        "operationId": "getLegalDocuments",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of legal document. Can be terms and conditions or disclosure and consent documents.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "TERMS_CONDITION",
                "DISCLOSURE_AND_CONSENT"
              ]
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "The product type to which the legal documents apply. Value should always be EB, for Embedded Banking.",
            "schema": {
              "type": "string",
              "enum": [
                "EB"
              ]
            },
            "required": true
          },
          {
            "name": "platformId",
            "in": "query",
            "description": "Unique Platform Identifier",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Legal Documents"
        ]
      }
    },
    "/legal-documents/{id}": {
      "get": {
        "summary": "Get legal document by ID.",
        "description": "Returns a legal document specified by its unique identifier.",
        "operationId": "getLegalDocument",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of a legal document.",
            "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Legal Documents"
        ]
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "Reference Data"
        ],
        "summary": "API to retrieve list of countries",
        "description": "Retrieves a list of Countries",
        "operationId": "getAllCountries",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfCountries": {
                    "summary": "List of countries",
                    "description": "List of countries",
                    "value": {
                      "countries": [
                        {
                          "code": "US",
                          "name": "United States"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "countries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "US"
                          },
                          "name": {
                            "type": "string",
                            "example": "United States"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        }
      }
    },
    "/legal-structures": {
      "get": {
        "summary": "List legal structures",
        "description": "Gets the accepted list of legal structures to be used in .",
        "operationId": "getLegalStructures",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "LegalStructures": {
                    "summary": "Accepted list of legal structures",
                    "description": "Accepted list of legal structures",
                    "value": {
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Limited Partnership",
                        "Sole Proprietorship"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "legalStructures": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The list of client legal structures"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/document-types": {
      "get": {
        "summary": "Get the list of supporting document-types",
        "description": "Get the list of supporting document-types",
        "operationId": "getDocumentTypes",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Two-letter ISO code for a country, such as US for USA.",
            "required": false,
            "examples": {
              "Default": {
                "value": "US"
              }
            },
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "US",
              "description": "ISO 3166-1 Alpha-2 Country Code"
            }
          },
          {
            "name": "documentCategory",
            "in": "query",
            "description": "Document category type.",
            "required": false,
            "example": "IDENTITY_VERIFICATION",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legalStructure",
            "in": "query",
            "description": "url encoded legalStructure type.",
            "required": false,
            "example": "Limited Liability Company",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfAllSupportingDocumentTypes": {
                    "summary": "List of all supporting document types",
                    "description": "List of all supporting document types",
                    "value": {
                      "metadata": {
                        "page": 0,
                        "limit": 25,
                        "total_items": 1
                      },
                      "items": [
                        {
                          "country": "US",
                          "documentTypes": {
                            "category": "IDENTITY_VERIFICATION",
                            "organization": {
                              "primary": [
                                {
                                  "id": "IRS_DOCUMENT_TIN",
                                  "label": "Letter/Document issued by IRS with TIN Assignment",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                }
                              ],
                              "secondary": [
                                {
                                  "id": "MAA",
                                  "label": "Memorandums & Articles of Association",
                                  "legalStructures": []
                                },
                                {
                                  "id": "ARTICLES_OF_INCORPORATION",
                                  "label": "Articles of Incorporation",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "MOA",
                                  "label": "Memorandums of Association",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "CONSTITUTIONAL_DOCUMENT",
                                  "label": "Constitutional document",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "TRUST_DEED",
                                  "label": "Trust Deed",
                                  "legalStructures": []
                                },
                                {
                                  "id": "PARTNERSHIP_AGREEMENT",
                                  "label": "Partnership Agreement",
                                  "legalStructures": [
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "LLC_AGREEMENT",
                                  "label": "LLC Agreement",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "OPERATING_AGREEMENT",
                                  "label": "Operating Agreement",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "OFFERING_MEMO",
                                  "label": "Offering Memorandum",
                                  "legalStructures": []
                                },
                                {
                                  "id": "BANKING_LICENSE",
                                  "label": "Banking License",
                                  "legalStructures": []
                                },
                                {
                                  "id": "BUSINESS_LICENSE",
                                  "label": "Business License",
                                  "legalStructures": [
                                    "Sole Proprietorship"
                                  ]
                                },
                                {
                                  "id": "BUSINESS_REGISTRATION_CERT",
                                  "label": "Business Registration Certificate",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "OTHER_GOV_REGISTRATION_DOCS",
                                  "label": "Other Government/Regulatory Registration Documents",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "SEC_FILINGS_10K",
                                  "label": "10K",
                                  "legalStructures": []
                                }
                              ]
                            },
                            "individual": {
                              "primary": [
                                {
                                  "id": "SSN_CARD",
                                  "label": "Social Security Card",
                                  "legalStructures": []
                                }
                              ],
                              "secondary": [
                                {
                                  "id": "PASSPORT",
                                  "label": "Passport",
                                  "legalStructures": []
                                },
                                {
                                  "id": "DRIVERS_LICENSE",
                                  "label": "Drivers License",
                                  "legalStructures": []
                                },
                                {
                                  "id": "GOV_ISSUED_ID_CARD",
                                  "label": "Government-issued identity card",
                                  "legalStructures": []
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "ListOfSupportingDocumentTypesByLegalStructure": {
                    "summary": "List of supporting document types with legalStructure Limited Liability Company",
                    "description": "List of supporting document types with legalStructure Limited Liability Company",
                    "value": {
                      "metadata": {
                        "page": 0,
                        "limit": 25,
                        "total_items": 1
                      },
                      "items": [
                        {
                          "country": "US",
                          "documentTypes": {
                            "category": "IDENTITY_VERIFICATION",
                            "organization": {
                              "primary": [
                                {
                                  "id": "IRS_DOCUMENT_TIN",
                                  "label": "Letter/Document issued by IRS with TIN Assignment",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                }
                              ],
                              "secondary": [
                                {
                                  "id": "ARTICLES_OF_INCORPORATION",
                                  "label": "Articles of Incorporation",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "MOA",
                                  "label": "Memorandums of Association",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "CONSTITUTIONAL_DOCUMENT",
                                  "label": "Constitutional document",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "LLC_AGREEMENT",
                                  "label": "LLC Agreement",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company"
                                  ]
                                },
                                {
                                  "id": "OPERATING_AGREEMENT",
                                  "label": "Operating Agreement",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "BUSINESS_REGISTRATION_CERT",
                                  "label": "Business Registration Certificate",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                },
                                {
                                  "id": "OTHER_GOV_REGISTRATION_DOCS",
                                  "label": "Other Government/Regulatory Registration Documents",
                                  "legalStructures": [
                                    "Corporation",
                                    "Limited Liability Company",
                                    "Sole Proprietorship",
                                    "Limited Partnership"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "country": {
                            "type": "string",
                            "example": "US"
                          },
                          "documentTypes": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "example": "IDENTITY_VERIFICATION"
                              },
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "primary": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "label": {
                                          "type": "string"
                                        },
                                        "legalStructures": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "secondary": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "label": {
                                          "type": "string"
                                        },
                                        "legalStructures": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "individual": {
                                "type": "object",
                                "properties": {
                                  "primary": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "label": {
                                          "type": "string"
                                        },
                                        "legalStructures": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "secondary": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "label": {
                                          "type": "string"
                                        },
                                        "legalStructures": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/id-types": {
      "get": {
        "summary": "Get the list of id types for the Client",
        "description": "Get the list of id types for the Client.",
        "operationId": "getIdTypes",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfIdTypes": {
                    "summary": "List of id types for the Client",
                    "description": "List of id types for the Client",
                    "value": {
                      "identificationTypes": [
                        {
                          "name": "EIN",
                          "id_value_type": "NUMERIC",
                          "id_value_length": 9,
                          "type": "NUMERIC",
                          "length": 9
                        },
                        {
                          "name": "SSN",
                          "id_value_type": "NUMERIC",
                          "id_value_length": 9,
                          "type": "NUMERIC",
                          "length": 9
                        },
                        {
                          "name": "ITIN",
                          "id_value_type": "NUMERIC",
                          "id_value_length": 9,
                          "type": "NUMERIC",
                          "length": 9
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "identificationTypes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "EIN"
                          },
                          "id_value_type": {
                            "type": "string",
                            "example": "NUMERIC"
                          },
                          "id_value_length": {
                            "type": "integer",
                            "example": 10
                          },
                          "type": {
                            "type": "string",
                            "example": "NUMERIC"
                          },
                          "length": {
                            "type": "integer",
                            "example": 10
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/industry-categories": {
      "get": {
        "summary": "Get the list of industry-categories and industryTypes.",
        "description": "Get the list of industry-categories and industryTypes.",
        "operationId": "getClientIndustryCategories",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "industryCategory": {
                        "type": "string",
                        "example": "Finance and Insurance"
                      },
                      "industryTypes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "Abrasive Product Manufacturing"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/old-industry-categories": {
      "get": {
        "summary": "Get the list of industry-categories and industryTypes.",
        "description": "Get the list of industry-categories and industryTypes.",
        "operationId": "getClientIndustryCategoriesOld",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "industryCategory": {
                        "type": "string",
                        "example": "Finance and Insurance"
                      },
                      "industryTypes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "Abrasive Product Manufacturing"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/new-industry-categories": {
      "get": {
        "summary": "Get the list of industry-categories and industryTypes.",
        "description": "Get the list of industry-categories and industryTypes.",
        "operationId": "getClientIndustryCategoriesNew",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records per page.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 25
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "IndustryCategoriesAndIndustryTypes": {
                    "summary": "List of industry categories and industry types",
                    "description": "List of industry categories and industry types",
                    "value": {
                      "metadata": {
                        "page": 0,
                        "limit": 25,
                        "total_items": 23
                      },
                      "items": [
                        {
                          "industryCategory": "UNASSIGNED",
                          "industryTypes": [
                            "UNASSIGNED"
                          ]
                        },
                        {
                          "industryCategory": "Agriculture, Forestry, Fishing and Hunting",
                          "industryTypes": [
                            "Soybean Farming",
                            "Oilseed (Except Soybean) Farming",
                            "Dry Pea And Bean Farming",
                            "Wheat Farming",
                            "Corn Farming",
                            "Rice Farming",
                            "Oilseed And Grain Combination Farming",
                            "All Other Grain Farming",
                            "Potato Farming",
                            "Other Vegetable (Except Potato) And Melon Farming",
                            "Orange Groves",
                            "Citrus (Except Orange) Groves",
                            "Apple Orchards",
                            "Grape Vineyards",
                            "Strawberry Farming",
                            "Berry (Except Strawberry) Farming",
                            "Tree Nut Farming",
                            "Fruit And Tree Nut Combination Farming",
                            "Other Noncitrus Fruit Farming",
                            "Mushroom Production",
                            "Other Food Crops Grown Under Cover",
                            "Nursery And Tree Production",
                            "Floriculture Production",
                            "Tobacco Farming",
                            "Cotton Farming",
                            "Sugarcane Farming",
                            "Hay Farming",
                            "Sugar Beet Farming",
                            "Peanut Farming",
                            "All Other Miscellaneous Crop Farming",
                            "Beef Cattle Ranching And Farming",
                            "Cattle Feedlots",
                            "Dairy Cattle And Milk Production",
                            "Dual-Purpose Cattle Ranching And Farming",
                            "Hog And Pig Farming",
                            "Chicken Egg Production",
                            "Broilers And Other Meat Type Chicken Production",
                            "Turkey Production",
                            "Poultry Hatcheries",
                            "Other Poultry Production",
                            "Sheep Farming",
                            "Goat Farming",
                            "Finfish Farming And Fish Hatcheries",
                            "Shellfish Farming",
                            "Other Aquaculture",
                            "Apiculture",
                            "Horses And Other Equine Production",
                            "Fur-Bearing Animal And Rabbit Production",
                            "All Other Animal Production",
                            "Timber Tract Operations",
                            "Forest Nurseries And Gathering Of Forest Products",
                            "Logging",
                            "Finfish Fishing",
                            "Shellfish Fishing",
                            "Other Marine Fishing",
                            "Hunting And Trapping",
                            "Cotton Ginning",
                            "Soil Preparation Planting And Cultivating",
                            "Crop Harvesting Primarily By Machine",
                            "Postharvest Crop Activities (Except Cotton Ginning)",
                            "Farm Labor Contractors And Crew Leaders",
                            "Farm Management Services",
                            "Support Activities For Animal Production",
                            "Support Activities For Forestry"
                          ]
                        },
                        {
                          "industryCategory": "Mining, Quarrying, and Oil and Gas Extraction",
                          "industryTypes": [
                            "Crude Petroleum Extraction",
                            "Bituminous Coal And Lignite Surface Mining",
                            "Bituminous Coal Underground Mining",
                            "Anthracite Mining",
                            "Iron Ore Mining",
                            "Gold Ore Mining",
                            "Silver Ore Mining",
                            "Uranium-Radium-Vanadium Ore Mining",
                            "All Other Metal Ore Mining",
                            "Dimension Stone Mining And Quarrying",
                            "Crushed And Broken Limestone Mining And Quarrying",
                            "Crushed And Broken Granite Mining And Quarrying",
                            "Other Crushed And Broken Stone Mining And Quarrying",
                            "Construction Sand And Gravel Mining",
                            "Industrial Sand Mining",
                            "Kaolin And Ball Clay Mining",
                            "Clay And Ceramic And Refractory Minerals Mining",
                            "Potash Soda And Borate Mineral Mining",
                            "Phosphate Rock Mining",
                            "Other Chemical And Fertilizer Mineral Mining",
                            "All Other Non-Metallic Mineral Mining",
                            "Drilling Oil And Gas Wells",
                            "Support Activities For Oil And Gas Operations",
                            "Support Activities For Coal Mining",
                            "Support Activities For Metal Mining",
                            "Support Activities For Non-Metallic Minerals (Except Fuels)",
                            "Natural Gas Extraction",
                            "Copper, Nickel, Lead, and Zinc Mining",
                            "Oilfield Service",
                            "Engineering Contractors",
                            "Natural Gas Extraction And Liquification",
                            "Integrated Oil and Gas",
                            "Diversified Mining",
                            "Diamond And Precious Stone Mining"
                          ]
                        },
                        {
                          "industryCategory": "Utilities",
                          "industryTypes": [
                            "Hydroelectric Power Generation",
                            "Fossil Fuel Electric Power Generation",
                            "Nuclear Electric Power Generation",
                            "Solar Electric Power Generation",
                            "Wind Electric Power Generation",
                            "Geothermal Electric Power Generation",
                            "Biomass Electric Power Generation",
                            "Other Electric Power Generation",
                            "Electric Bulk Power Transmission And Control",
                            "Electric Power Distribution",
                            "Natural Gas Distribution",
                            "Water Supply And Irrigation Systems",
                            "Sewage Treatment Facilities",
                            "Steam And Air-Conditioning Supply",
                            "Integrated Utility",
                            "Merchant Energy"
                          ]
                        },
                        {
                          "industryCategory": "Construction",
                          "industryTypes": [
                            "New Single-Family Housing Construct (ex For-Sale Builders) ",
                            "New Multifamily Housing Construct (ex For-Sale Builders) ",
                            "New Housing For-Sale Builders ",
                            "Residential Remodelers",
                            "Industrial Building Construction (Except Operative Builders)",
                            "Comml & Instit Bldg Construction (Except Operative Builders)",
                            "Water And Sewer Line And Related Structures Construction",
                            "Oil And Gas Pipeline And Related Structures Construction",
                            "Power & Communication Line & Related Structures Construction",
                            "Land Subdivision",
                            "Highway Street And Bridge Construction",
                            "Other Heavy And Civil Engineering Construction",
                            "Poured Concrete Foundation And Structure Contractors",
                            "Structural Steel And Precast Concrete Contractors",
                            "Framing Contractors",
                            "Masonry Contractors",
                            "Glass And Glazing Contractors",
                            "Roofing Contractors",
                            "Siding Contractors",
                            "Other Foundation Structure and Building Exterior Contract",
                            "Electrical Contractors",
                            "Plumbing Heating And Air-Conditioning Contractors",
                            "Other Building Equipment Contractors",
                            "Drywall and Insulation Contractors ",
                            "Painting And Wall Covering Contractors",
                            "Flooring Contractors",
                            "Tile And Terrazzo Contractors",
                            "Finish Carpentry Contractors",
                            "Other Building Finishing Contractors",
                            "Site Preparation Contractors",
                            "All Other Specialty Trade Contractors",
                            "Residential Building Construction (Exc Operative Builders)",
                            "New Housing Operative Builders (Single Family And Condo)",
                            "Apartment Construction Operative Builders (Apartment)",
                            "Industrial/Warehouse Operative Builders (Industrial)",
                            "Office Operative Builders (Office Buildings)",
                            "Retail Operative Builders (Retail Buildings)",
                            "Hotel Operative Builders (Hotels)",
                            "Residential Land Subdividing (Sale To Home Builders)",
                            "Commercial Land Subdividing (Sale To Commercial Builders)"
                          ]
                        },
                        {
                          "industryCategory": "Manufacturing",
                          "industryTypes": [
                            "Dog And Cat Food Manufacturing",
                            "Other Animal Food Manufacturing",
                            "Flour Milling",
                            "Rice Milling",
                            "Malt Manufacturing",
                            "Wet Corn Milling",
                            "Soybean and Other Oilseed Processing",
                            "Fats And Oils Refining And Blending",
                            "Breakfast Cereal Manufacturing",
                            "Beet Sugar Manufacturing",
                            "Cane Sugar Manufacturing",
                            "Non-Chocolate Confectionery Manufacturing",
                            "Chocolate and Confectionery Manufacturing from Cacao Beans",
                            "Confectionery Manufacturing from Purchased Chocolate",
                            "Frozen Fruit Juice And Vegetable Manufacturing",
                            "Frozen Specialty Food Manufacturing",
                            "Fruit And Vegetable Canning",
                            "Specialty Canning",
                            "Dried And Dehydrated Food Manufacturing",
                            "Fluid Milk Manufacturing",
                            "Creamery Butter Manufacturing",
                            "Cheese Manufacturing",
                            "Dry Condensed And Evaporated Dairy Product Manufacturing",
                            "Ice Cream And Frozen Dessert Manufacturing",
                            "Animal (Except Poultry) Slaughtering",
                            "Meat Processed From Carcasses",
                            "Rendering And Meat By-Product Processing",
                            "Poultry Processing",
                            "Seafood Product Preparation And Packaging",
                            "Retail Bakeries",
                            "Commercial Bakeries",
                            "Frozen Bakery Product Manufacturing",
                            "Cookie And Cracker Manufacturing",
                            "Dry Pasta Dough and Flour Mixes Manuf from Purchased Flour",
                            "Tortilla Manufacturing",
                            "Roasted Nuts And Peanut Butter Manufacturing",
                            "Other Snack Food Manufacturing",
                            "Coffee And Tea Manufacturing",
                            "Flavoring Syrup And Concentrate Manufacturing",
                            "Mayonnaise Dressing And Other Prepared Sauce Manufacturing",
                            "Spice And Extract Manufacturing",
                            "Perishable Prepared Food Manufacturing",
                            "All Other Miscellaneous Food Manufacturing",
                            "Soft Drink Manufacturing",
                            "Bottled Water Manufacturing",
                            "Ice Manufacturing",
                            "Breweries",
                            "Wineries",
                            "Distilleries",
                            "Tobacco Manufacturing",
                            "Fiber Yarn And Thread Mills",
                            "Broadwoven Fabric Mills",
                            "Narrow Fabric Mills And Schiffli Machine Embroidery",
                            "Nonwoven Fabric Mills",
                            "Knit Fabric Mills",
                            "Textile And Fabric Finishing Mills",
                            "Fabric Coating Mills",
                            "Carpet And Rug Mills",
                            "Curtain And Linen Mills",
                            "Textile Bag And Canvas Mills",
                            "Rope Cordage Twine Tire Cord and Tire Fabric Mills",
                            "All Other Miscellaneous Textile Product Mills",
                            "Hosiery And Sock Mills",
                            "Other Apparel Knitting Mills",
                            "Cut And Sew Apparel Contractors",
                            "Men'S And Boys' Cut And Sew Apparel Manufacturing",
                            "Women's Girls' and Infants' Cut and Sew Apparel Manufact",
                            "Other Cut and Sew Apparel Manufacturing",
                            "Apparel Accessories And Other Apparel Manufacturing",
                            "Leather And Hide Tanning And Finishing",
                            "Footwear Manufacturing",
                            "Women's Handbag And Purse Manufacturing",
                            "All Other Leather Good and Allied Product Manufacturing",
                            "Sawmills",
                            "Wood Preservation",
                            "Hardwood Veneer And Plywood Manufacturing",
                            "Softwood Veneer And Plywood Manufacturing",
                            "Engineered Wood Member (Except Truss) Manufacturing",
                            "Truss Manufacturing",
                            "Reconstituted Wood Product Manufacturing",
                            "Wood Window And Door Manufacturing",
                            "Cut Stock Resawing Lumber And Planing",
                            "Other Millwork (Including Flooring )",
                            "Wood Container And Pallet Manufacturing",
                            "Manufactured Home (Mobile Home) Manufacturing",
                            "Prefabricated Wood Building Manufacturing",
                            "All Other Miscellaneous Wood Product Manufacturing ",
                            "Pulp Mills",
                            "Paper (Except Newsprint) Mills",
                            "Newsprint Mills",
                            "Paperboard Mills",
                            "Corrugated And Solid Fiber Box Manufacturing",
                            "Folding Paperboard Box Manufacturing",
                            "Other Paperboard Container Manufacturing",
                            "Paper Bag And Coated And Treated Paper Manufacturing",
                            "Stationery Product Manufacturing",
                            "Sanitary Paper Product Manufacturing",
                            "All Other Converted Paper Product Manufacturing",
                            "Commercial Printing (except Screen and Books) ",
                            "Commercial Screen Printing",
                            "Book Printing",
                            "Support Activities For Printing",
                            "Petroleum Refineries",
                            "Asphalt Paving Mixture And Block Manufacturing",
                            "Asphalt Shingle And Coating Materials Manufacturing",
                            "Petroleum Lubricating Oil And Grease Manufacturing",
                            "All Other Petroleum And Coal Products Manufacturing",
                            "Petrochemical Manufacturing",
                            "Industrial Gas Manufacturing",
                            "Synthetic Dye And Pigment Manufacturing",
                            "Other Basic Inorganic Chemical Manufacturing",
                            "Ethyl Alcohol Manufacturing",
                            "Cyclic Crude, Intermediate, and Gum and Wood Chemical Manufacturing",
                            "All Other Basic Organic Chemical Manufacturing",
                            "Plastics Material And Resin Manufacturing",
                            "Synthetic Rubber Manufacturing",
                            "Artificial And Synthetic Fibers And Filaments Manufacturing",
                            "Nitrogenous Fertilizer Manufacturing",
                            "Phosphatic Fertilizer Manufacturing",
                            "Fertilizer (Mixing Only) Manufacturing",
                            "Pesticide And Other Agricultural Chemical Manufacturing",
                            "Medicinal And Botanical Manufacturing",
                            "Pharmaceutical Preparation Manufacturing",
                            "In-Vitro Diagnostic Substance Manufacturing",
                            "Biological Product (Except Diagnostic) Manufacturing",
                            "Paint And Coating Manufacturing",
                            "Adhesive Manufacturing",
                            "Soap And Other Detergent Manufacturing",
                            "Polish And Other Sanitation Good Manufacturing",
                            "Surface Active Agent Manufacturing",
                            "Toilet Preparation Manufacturing",
                            "Printing Ink Manufacturing",
                            "Explosives Manufacturing",
                            "Custom Compounding Of Purchased Resin",
                            "Photographic Film Paper Plate And Chemical Manufacturing",
                            "All Other Miscellaneous Chemical Product Manufacturing",
                            "Plastics Bag and Pouch Manufacturing",
                            "Plastics Packaging Film & Sheet (Inc Laminated) Manufacturing",
                            "Unlaminated Plastics Film and Sheet (except Packaging) Manufacturing",
                            "Unlaminated Plastics Profile Shape Manufacturing",
                            "Plastics Pipe And Pipe Fitting Manufacturing",
                            "Laminated Plastics Plate, Sheet (except Packaging), and Shape Manufacturing",
                            "Polystyrene Foam Product Manufacturing",
                            "Urethane and Other Foam Product (except Polystyrene) Manufacturing",
                            "Plastics Bottle Manufacturing",
                            "Plastics Plumbing Fixture Manufacturing",
                            "All Other Plastics Product Manufacturing ",
                            "Tire Manufacturing (Except Retreading)",
                            "Tire Retreading",
                            "Rubber And Plastics Hoses And Belting Manufacturing",
                            "Rubber Product Manufacturing For Mechanical Use",
                            "All Other Rubber Product Manufacturing",
                            "Pottery Ceramics And Plumbing Fixture Manufacturing",
                            "Clay Building Material And Refractories Manufacturing",
                            "Flat Glass Manufacturing",
                            "Other Pressed And Blown Glass And Glassware Manufacturing",
                            "Glass Container Manufacturing",
                            "Glass Product Manufacturing Made Of Purchased Glass",
                            "Cement Manufacturing",
                            "Ready-Mix Concrete Manufacturing",
                            "Concrete Block And Brick Manufacturing",
                            "Concrete Pipe Manufacturing",
                            "Other Concrete Product Manufacturing",
                            "Lime Manufacturing",
                            "Gypsum And Gypsum Product Manufacturing",
                            "Abrasive Product Manufacturing",
                            "Cut Stone And Stone Product Manufacturing",
                            "Ground Or Treated Mineral And Earth Manufacturing",
                            "Mineral Wool Manufacturing",
                            "All Other Miscellaneous Nonmetallic Mineral Product Manufacturing",
                            "Iron And Steel Mills And Ferroalloy Manufacturing",
                            "Iron and Steel Pipe and Tube Manufacturing from Purchased Steel",
                            "Cold-Rolled Steel Shape Manufacturing",
                            "Steel Wire Drawing",
                            "Alumina Refining and Primary Aluminum Production",
                            "Secondary Smelting And Alloying Of Aluminum",
                            "Aluminum Sheet Plate And Foil Manufacturing",
                            "Other Aluminum Rolling Drawing and Extruding",
                            "Nonferrous Metal (Except Aluminum) Smelting And Refining",
                            "Copper Rolling Drawing Extruding And Alloying",
                            "Nonferrous Metal (except Copper and Aluminum) Rolling, Drawing, and Extruding",
                            "Secondary Smelting, Refining, and Alloying of Nonferrous Metal (except Copper and Aluminum)",
                            "Iron Foundries",
                            "Steel Investment Foundries",
                            "Steel Foundries (Except Investment)",
                            "Nonferrous Metal Die-Casting Foundries",
                            "Aluminum Foundries",
                            "Other Nonferrous Metal Foundries (except Die-Casting)",
                            "Iron And Steel Forging",
                            "Nonferrous Forging",
                            "Custom Roll Forming",
                            "Powder Metallurgy Part Manufacturing",
                            "Metal Crown Closure and Other Metal Stamping (ex Automotive)",
                            "Metal Kitchen Cookware, Utensil, Cutlery, and Flatware (except Precious) Manufacturing",
                            "Saw Blade and Handtool Manufacturing",
                            "Prefabricated Metal Building And Component Manufacturing",
                            "Fabricated Structural Metal Manufacturing",
                            "Plate Work Manufacturing",
                            "Metal Window And Door Manufacturing",
                            "Sheet Metal Work Manufacturing",
                            "Ornamental And Architectural Metal Work Manufacturing",
                            "Power Boiler And Heat Exchanger Manufacturing",
                            "Metal Tank (Heavy Gauge) Manufacturing",
                            "Metal Can Manufacturing",
                            "Other Metal Container Manufacturing",
                            "Hardware Manufacturing",
                            "Spring Manufacturing",
                            "Other Fabricated Wire Product Manufacturing",
                            "Machine Shops",
                            "Precision Turned Product Manufacturing",
                            "Bolt Nut Screw Rivet And Washer Manufacturing",
                            "Metal Heat Treating",
                            "Metal Coating, Engraving (except Jewelry and Silverware), and Allied Services to Manufacturers",
                            "Electroplating Plating Polishing Anodizing And Coloring",
                            "Industrial Valve Manufacturing",
                            "Fluid Power Valve And Hose Fitting Manufacturing",
                            "Plumbing Fixture Fitting And Trim Manufacturing",
                            "Other Metal Valve And Pipe Fitting Manufacturing",
                            "Ball And Roller Bearing Manufacturing",
                            "Small Arms Ammunition Manufacturing",
                            "Ammunition (Except Small Arms) Manufacturing",
                            "Small Arms Ordnance and Ordnance Accessories Manufacturing ",
                            "Fabricated Pipe And Pipe Fitting Manufacturing",
                            "All Other Miscellaneous Fabricated Metal Product Manufact",
                            "Farm Machinery And Equipment Manufacturing",
                            "Lawn and Garden Tractor and Home Lawn and Garden Equipment Manufacturing",
                            "Construction Machinery Manufacturing",
                            "Mining Machinery And Equipment Manufacturing",
                            "Oil And Gas Field Machinery And Equipment Manufacturing",
                            "Food Product Machinery Manufacturing",
                            "Semiconductor Machinery Manufacturing",
                            "Sawmill Woodworking and Paper Machinery Manufacturing",
                            "Printing Machinery and Equipment Manufacturing",
                            "Other Industrial Machinery Manufacturing",
                            "Optical Instrument And Lens Manufacturing",
                            "Photographic and Photocopying Equipment Manufacturing",
                            "Other Commercial and Service Industry Machinery Manufacturing",
                            "Industrial and Commercial Fan and Blower and Air Purification Equipment Manufacturing",
                            "Heating Equipment (except Warm Air Furnaces) Manufacturing",
                            "Air-Conditioning and Warm Air Heating Equipment and Commercial and Industrial Refrigeration Equipment Manufacturing",
                            "Industrial Mold Manufacturing",
                            "Special Die And Tool Die Set Jig And Fixture Manufacturing",
                            "Cutting Tool And Machine Tool Accessory Manufacturing",
                            "Machine Tool Manufacturing",
                            "Rolling Mill and Other Metalworking Machinery Manufacturing",
                            "Turbine And Turbine Generator Set Unit Manufacturing",
                            "Speed Changer, Industrial High-Speed Drive, and Gear Manufacturing",
                            "Mechanical Power Transmission Equipment Manufacturing",
                            "Other Engine Equipment Manufacturing",
                            "Air And Gas Compressor Manufacturing",
                            "Elevator And Moving Stairway Manufacturing",
                            "Conveyor And Conveying Equipment Manufacturing",
                            "Overhead Traveling Crane, Hoist, and Monorail System Manufacturing",
                            "Industrial Truck, Tractor, Trailer, and Stacker Machinery Manufacturing",
                            "Power-Driven Hand Tool Manufacturing",
                            "Welding And Soldering Equipment Manufacturing",
                            "Packaging Machinery Manufacturing",
                            "Industrial Process Furnace And Oven Manufacturing",
                            "Fluid Power Cylinder And Actuator Manufacturing",
                            "Fluid Power Pump And Motor Manufacturing",
                            "Scale and Balance Manufacturing",
                            "All Other General Purpose Machinery Manufacturing",
                            "Electronic Computer Manufacturing",
                            "Computer Storage Device Manufacturing",
                            "Computer Terminal and Other Computer Peripheral Equipment Manufacturing",
                            "Telephone Apparatus Manufacturing",
                            "Radio and Television Broadcasting and Wireless Communications Equipment Manufacturing",
                            "Other Communications Equipment Manufacturing",
                            "Audio And Video Equipment Manufacturing",
                            "Printed Circuit Board Manufacturing",
                            "Semiconductor And Related Device Manufacturing",
                            "Capacitor, Resistor, Coil, Transformer, and Other Inductor Manufacturing",
                            "Electronic Connector Manufacturing",
                            "Printed Circuit Assembly (Electronic Assembly) Manufacturing",
                            "Other Electronic Component Manufacturing ",
                            "Electromedical And Electrotherapeutic Apparatus Manufacturin",
                            "Search, Detection, Navigation, Guidance, Aeronautical, and Nautical System and Instrument Manufacturing",
                            "Automatic Environmental Control Manufacturing for Residential, Commercial, and Appliance Use",
                            " Instruments and Related Products Manufacturing for Measuring, Displaying, and Controlling Industrial Process Variables",
                            "Totalizing Fluid Meter And Counting Device Manufacturing",
                            "Instrument Manufacturing for Measuring and Testing Electricity and Electrical Signals",
                            "Analytical Laboratory Instrument Manufacturing",
                            "Irradiation Apparatus Manufacturing",
                            "Other Measuring and Controlling Device Manufacturing ",
                            "Blank Magnetic and Optical Recording Media Manufacturing ",
                            "Software and Other Prerecorded Compact Disc, Tape, and Record Reproducing",
                            "Electric Lamp Bulb And Part Manufacturing",
                            "Residential Electric Lighting Fixture Manufacturing",
                            "Commercial, Industrial, and Institutional Electric Lighting Fixture Manufacturing",
                            "Other Lighting Equipment Manufacturing",
                            "Small Electrical Appliance Manufacturing",
                            "Power Distribution And Specialty Transformer Manufacturing",
                            "Motor And Generator Manufacturing",
                            "Switchgear And Switchboard Apparatus Manufacturing",
                            "Relay And Industrial Control Manufacturing",
                            "Storage Battery Manufacturing",
                            "Dry And Wet Primary Battery Manufacturing",
                            "Fiber Optic Cable Manufacturing",
                            "Other Communication And Energy Wire Manufacturing",
                            "Current-Carrying Wiring Device Manufacturing",
                            "Noncurrent-Carrying Wiring Device Manufacturing",
                            "Carbon And Graphite Product Manufacturing",
                            "All Other Miscellaneous Electrical Equipment and Component Manufacturing",
                            "Automobile Manufacturing",
                            "Light Truck And Utility Vehicle Manufacturing",
                            "Heavy Duty Truck Manufacturing",
                            "Motor Vehicle Body Manufacturing",
                            "Truck Trailer Manufacturing",
                            "Motor Home Manufacturing",
                            "Travel Trailer And Camper Manufacturing",
                            "Motor Vehicle Gasoline Engine And Engine Parts Manufacturing",
                            "Motor Vehicle Electrical and Electronic Equipment Manufacturing",
                            "Motor Vehicle Steering and Suspension Components (except Spring) Manufacturing",
                            "Motor Vehicle Brake System Manufacturing",
                            "Motor Vehicle Transmission and Power Train Parts Manufacturing",
                            "Motor Vehicle Fabric Accessories And Seat Manufacturing",
                            "Motor Vehicle Metal Stamping",
                            "Other Motor Vehicle Parts Manufacturing",
                            "Aircraft Manufacturing",
                            "Aircraft Engine And Engine Parts Manufacturing",
                            "Other Aircraft Part And Auxiliary Equipment Manufacturing",
                            "Guided Missile And Space Vehicle Manufacturing",
                            "Guided Missile and Space Vehicle Propulsion Unit and Propulsion Unit Parts Manufacturing",
                            "Other Guided Missile and Space Vehicle Parts and Auxiliary Equipment Manufacturing",
                            "Railroad Rolling Stock Manufacturing",
                            "Ship Building And Repairing",
                            "Boat Building",
                            "Motorcycle Bicycle And Parts Manufacturing",
                            "Military Armored Vehicle, Tank, and Tank Component Manufacturing",
                            "All Other Transportation Equipment Manufacturing",
                            "Wood Kitchen Cabinet And Counter Top Manufacturing",
                            "Upholstered Household Furniture Manufacturing",
                            "Nonupholstered Wood Household Furniture Manufacturing",
                            "Metal Household Furniture Manufacturing",
                            "Household Furniture (Except Wood And Metal) Manufacturing",
                            "Institutional Furniture Manufacturing",
                            "Wood Office Furniture Manufacturing",
                            "Custom Architectural Woodwork And Millwork Manufacturing",
                            "Nonwood Office Furniture Manufacturing",
                            "Showcase Partition Shelving And Locker Manufacturing",
                            "Mattress Manufacturing",
                            "Blind And Shade Manufacturing",
                            "Surgical And Medical Instrument Manufacturing",
                            "Surgical Appliance And Supplies Manufacturing",
                            "Dental Equipment And Supplies Manufacturing",
                            "Ophthalmic Goods Manufacturing",
                            "Dental Laboratories",
                            "Jewelry And Silverware Manufacturing",
                            "Sporting And Athletic Goods Manufacturing",
                            "Doll Toy And Game Manufacturing",
                            "Office Supplies (Except Paper) Manufacturing",
                            "Sign Manufacturing",
                            "Gasket Packing And Sealing Device Manufacturing",
                            "Musical Instrument Manufacturing",
                            "Fastener Button Needle And Pin Manufacturing",
                            "Broom Brush And Mop Manufacturing",
                            "Burial Casket Manufacturing",
                            "All Other Miscellaneous Manufacturing",
                            "Measuring, Dispensing, and Other Pumping Equipment Manufacturing",
                            "Major Household Appliance Manufacturing"
                          ]
                        },
                        {
                          "industryCategory": "Wholesale Trade",
                          "industryTypes": [
                            "Automobile And Other Motor Vehicle Merchant Wholesalers",
                            "Motor Vehicle Supplies And New Parts Merchant Wholesalers",
                            "Tire And Tube Merchant Wholesalers",
                            "Motor Vehicle Parts (Used) Merchant Wholesalers",
                            "Furniture Merchant Wholesalers",
                            "Home Furnishing Merchant Wholesalers",
                            "Lumber Plywood Millwork & Wood Panel Merchant Wholesalers",
                            "Brick, Stone, and Related Construction Material Merchant Wholesalers",
                            "Roofing Siding And Insulation Material Merchant Wholesalers",
                            "Other Construction Material Merchant Wholesalers",
                            "Photographic Equipment And Supplies Merchant Wholesalers",
                            "Office Equipment Merchant Wholesalers",
                            "Computer and Computer Peripheral Equipment and Software Merchant Wholesalers",
                            "Other Commercial Equipment Merchant Wholesalers",
                            "Medical, Dental, and Hospital Equipment and Supplies Merchant Wholesalers",
                            "Ophthalmic Goods Merchant Wholesalers",
                            "Other Professional Equipment and Supplies Merchant Wholesalers",
                            "Metal Service Centers And Other Metal Merchant Wholesalers",
                            "Coal And Other Mineral And Ore Merchant Wholesalers",
                            "Electrical Apparatus and Equipment, Wiring Supplies, and Related Equipment Merchant Wholesalers",
                            "Household Appliances, Electric Housewares, and Consumer Electronics Merchant Wholesalers",
                            "Other Electronic Parts And Equipment Merchant Wholesalers",
                            "Hardware Merchant Wholesalers",
                            "Plumbing and Heating Equipment and Supplies (Hydronics) Merchant Wholesalers",
                            "Warm Air Heating and Air-Conditioning Equipment and Supplies Merchant Wholesalers",
                            "Refrigeration Equipment And Supplies Merchant Wholesalers",
                            "Construction and Mining (except Oil Well) Machinery and Equipment Merchant Wholesalers",
                            "Farm and Garden Machinery and Equipment Merchant Wholesalers",
                            "Industrial Machinery And Equipment Merchant Wholesalers",
                            "Industrial Supplies Merchant Wholesalers",
                            "Service Establishment Equipment and Supplies Merchant Wholesalers",
                            "Transportation Equipment and Supplies (except Motor Vehicle) Merchant Wholesalers",
                            "Sporting and Recreational Goods and Supplies Merchant Wholesalers",
                            "Toy And Hobby Goods And Supplies Merchant Wholesalers",
                            "Recyclable Material Merchant Wholesalers",
                            "Jewelry, Watch, Precious Stone, and Precious Metal Merchant Wholesalers",
                            "Other Miscellaneous Durable Goods Merchant Wholesalers",
                            "Printing And Writing Paper Merchant Wholesalers",
                            "Stationary And Office Supplies Merchant Wholesalers",
                            "Industrial And Personal Service Paper Merchant Wholesalers",
                            "Drugs and Druggists' Sundries Merchant Wholesalers",
                            "Piece Goods, Notions, and Other Dry Goods Merchant Wholesalers",
                            "Men's and Boys' Clothing and Furnishings Merchant Wholesalers",
                            "Women's, Children's, and Infants' Clothing and Accessories Merchant Wholesalers",
                            "Footwear Merchant Wholesalers",
                            "General Line Grocery Merchant Wholesalers",
                            "Packaged Frozen Food Merchant Wholesalers",
                            "Dairy Product (Except Dried Or Canned) Merchant Wholesalers",
                            "Poultry And Poultry Product Merchant Wholesalers",
                            "Confectionery Merchant Wholesalers",
                            "Fish And Seafood Merchant Wholesalers",
                            "Meat And Meat Product Merchant Wholesalers",
                            "Fresh Fruit And Vegetable Merchant Wholesalers",
                            "Other Grocery And Related Products Merchant Wholesalers",
                            "Grain And Field Bean Merchant Wholesalers",
                            "Livestock Merchant Wholesalers",
                            "Other Farm Product Raw Material Merchant Wholesalers",
                            "Plastics Materials and Basic Forms and Shapes Merchant Wholesalers",
                            "Other Chemical And Allied Products Merchant Wholesalers",
                            "Petroleum Bulk Stations And Terminals",
                            "Petroleum and Petroleum Products Merchant Wholesalers (except Bulk Stations and Terminals)",
                            "Beer And Ale Merchant Wholesalers",
                            "Wine And Distilled Alcoholic Beverage Merchant Wholesalers",
                            "Farm Supplies Merchant Wholesalers",
                            "Book Periodical And Newspaper Merchant Wholesalers",
                            "Flower, Nursery Stock, and Florists' Supplies Merchant Wholesalers",
                            "Tobacco And Tobacco Product Merchant Wholesalers",
                            "Paint Varnish And Supplies Merchant Wholesalers",
                            "Other Miscellaneous Nondurable Goods Merchant Wholesalers",
                            "Business To Business Electronic Markets",
                            "Wholesale Trade Agents And Brokers"
                          ]
                        },
                        {
                          "industryCategory": "Retail Trade",
                          "industryTypes": [
                            "New Car Dealers",
                            "Used Car Dealers",
                            "Recreational Vehicle Dealers",
                            "Boat Dealers",
                            "Motorcycle ATV and All Other Motor Vehicle Dealers",
                            "Automotive Parts And Accessories Stores",
                            "Tire Dealers",
                            "Furniture Stores",
                            "Floor Covering Stores",
                            "Window Treatment Stores",
                            "All Other Home Furnishings Stores",
                            "Household Appliance Stores",
                            "Electronics Stores",
                            "Home Centers",
                            "Paint And Wallpaper Stores",
                            "Hardware Stores",
                            "Other Building Material Dealers",
                            "Outdoor Power Equipment Stores",
                            "Nursery Garden Center And Farm Supply Stores",
                            "Supermarkets And Other Grocery (Except Convenience) Stores",
                            "Convenience Stores",
                            "Meat Markets",
                            "Fish And Seafood Markets",
                            "Fruit And Vegetable Markets",
                            "Baked Goods Stores",
                            "Confectionery And Nut Stores",
                            "All Other Specialty Food Stores",
                            "Beer Wine And Liquor Stores",
                            "Pharmacies And Drug Stores",
                            "Cosmetics Beauty Supplies And Perfume Stores",
                            "Optical Goods Stores",
                            "Food (Health) Supplement Stores",
                            "All Other Health And Personal Care Stores",
                            "Gasoline Stations With Convenience Stores",
                            "Other Gasoline Stations",
                            "Men's Clothing Stores",
                            "Women's Clothing Stores",
                            "Children's and Infants' Clothing Stores",
                            "Family Clothing Stores",
                            "Clothing Accessories Stores",
                            "Other Clothing Stores",
                            "Shoe Stores",
                            "Jewelry Stores",
                            "Luggage And Leather Goods Stores"
                          ]
                        },
                        {
                          "industryCategory": "Sporting Goods, Hobby, Musical Instrument, and Book Stores",
                          "industryTypes": [
                            "Sporting Goods Stores",
                            "Hobby Toy And Game Stores",
                            "Sewing Needlework And Piece Goods Stores",
                            "Musical Instrument And Supplies Stores",
                            "Book Stores",
                            "News Dealers And Newsstands",
                            "Florists",
                            "Office Supplies And Stationery Stores",
                            "Gift Novelty And Souvenir Stores",
                            "Used Merchandise Stores",
                            "Pet And Pet Supplies Stores",
                            "Art Dealers",
                            "Manufactured (Mobile) Home Dealers",
                            "Tobacco Stores",
                            "All Other Miscellaneous Store Retailers (Ex Tobacco Stores)",
                            "Vending Machine Operators",
                            "Fuel Dealers",
                            "Other Direct Selling Establishments",
                            "Department Stores",
                            "Warehouse Clubs and Supercenters",
                            "All Other General Merchandise Stores",
                            "Electronic Shopping and Mail-Order Houses"
                          ]
                        },
                        {
                          "industryCategory": "Transportation and Warehousing",
                          "industryTypes": [
                            "Scheduled Passenger Air Transportation",
                            "Scheduled Freight Air Transportation",
                            "Nonscheduled Chartered Passenger Air Transportation",
                            "Nonscheduled Chartered Freight Air Transportation",
                            "Other Nonscheduled Air Transportation",
                            "Line-Haul Railroads",
                            "Short Line Railroads",
                            "Deep Sea Freight Transportation",
                            "Deep Sea Passenger Transportation",
                            "Coastal And Great Lakes Freight Transportation",
                            "Coastal And Great Lakes Passenger Transportation",
                            "Inland Water Freight Transportation",
                            "Inland Water Passenger Transportation",
                            "General Freight Trucking Local",
                            "General Freight Trucking Long-Distance Truckload",
                            "General Freight Trucking Long-Distance Less Than Truckload",
                            "Used Household And Office Goods Moving",
                            "Specialized Freight (Except Used Goods) Trucking Local",
                            "Specialized Freight (Ex Used Goods) Trucking Long-Distance",
                            "Mixed Mode Transit Systems",
                            "Commuter Rail Systems",
                            "Bus And Motor Vehicle Transit Systems",
                            "Other Urban Transit Systems",
                            "Interurban And Rural Bus Transportation",
                            "Taxi Service",
                            "Limousine Service",
                            "School And Employee Bus Transportation",
                            "Charter Bus Industry",
                            "Special Needs Transportation",
                            "All Other Transit And Ground Passenger Transportation",
                            "Pipeline Transportation Of Crude Oil",
                            "Pipeline Transportation Of Natural Gas",
                            "Pipeline Transportation Of Refined Petroleum Products",
                            "All Other Pipeline Transportation",
                            "Scenic And Sightseeing Transportation Land",
                            "Scenic And Sightseeing Transportation Water",
                            "Scenic And Sightseeing Transportation Other",
                            "Air Traffic Control",
                            "Other Airport Operations",
                            "Other Support Activities For Air Transportation",
                            "Support Activities For Rail Transportation",
                            "Port And Harbor Operations",
                            "Marine Cargo Handling",
                            "Navigational Services To Shipping",
                            "Other Support Activities For Water Transportation",
                            "Motor Vehicle Towing",
                            "Other Support Activities For Road Transportation",
                            "Freight Transportation Arrangement",
                            "Packing And Crating",
                            "All Other Support Activities For Transportation",
                            "Postal Service",
                            "Couriers",
                            "Local Messengers And Local Delivery",
                            "General Warehousing And Storage Facilities",
                            "Refrigerated Warehousing And Storage Facilities",
                            "Farm Product Warehousing And Storage Facilities",
                            "Other Warehousing And Storage Facilities"
                          ]
                        },
                        {
                          "industryCategory": "Information",
                          "industryTypes": [
                            "Newspaper Publishers",
                            "Periodical Publishers",
                            "Book Publishers",
                            "Directory And Mailing List Publishers",
                            "Greeting Card Publishers",
                            "All Other Publishers",
                            "Software Publishers",
                            "Motion Picture And Video Production",
                            "Motion Picture And Video Distribution",
                            "Motion Picture Theaters Except Drive-Ins.",
                            "Drive-In Motion Picture Theaters",
                            "Teleproduction And Other Post-Production Services",
                            "Other Motion Picture And Video Industries",
                            "Music Publishers",
                            "Sound Recording Studios",
                            "Other Sound Recording Industries",
                            "Radio Networks",
                            "Radio Stations",
                            "Television Broadcasting",
                            "Cable And Other Subscription Programming",
                            "Satellite Telecommunications",
                            "Telecom Resellers (including mobile virtual operators)",
                            "All Other Telecommunications",
                            "Data Processing Hosting And Related Services",
                            "News Syndicates",
                            "Libraries And Archives",
                            "Internet Publishing and Broadcasting and Web Search Portals ",
                            "All Other Information Services",
                            "Record Production and Distribution",
                            "Wired Telecommunications Carriers",
                            "Wireless Telecommunications Carriers (Except Satellite)",
                            "Local Exchange Carrier (Lec)",
                            "Competitive Local Exchange Carrier (Clec)",
                            "Long Distance Carrier - Traditional",
                            "Long Distance Carrier - Emerging",
                            "3rd Generation Wireless (3G)",
                            "Internet Infrastructure Provider (Iip)",
                            "Radio Broadcasting",
                            "Internet Service Providers And Web Search Portals"
                          ]
                        },
                        {
                          "industryCategory": "Finance and Insurance",
                          "industryTypes": [
                            "Monetary Authorities - Central Bank",
                            "Commercial Banking",
                            "Savings Institutions",
                            "Credit Unions",
                            "Other Depository Credit Intermediation",
                            "Credit Card Issuing",
                            "Sales Financing",
                            "Consumer Lending",
                            "Real Estate Credit",
                            "International Trade Financing",
                            "Secondary Market Financing",
                            "All Other Non-Depository Credit Intermediation",
                            "Mortgage And Other Loan Brokers",
                            "Financial Transactions Processing, Reserve, and Clearinghouse Activities",
                            "Other Activities Related To Credit Intermediation",
                            "Investment Banking And Securities Dealing",
                            "Securities Brokerage",
                            "Commodity Contracts Dealing",
                            "Commodity Contracts Brokerage",
                            "Securities And Commodity Exchanges",
                            "Miscellaneous Intermediation",
                            "Portfolio Management",
                            "Investment Advice",
                            "Trust Fiduciary And Custody Activities",
                            "Miscellaneous Financial Investment Activities",
                            "Direct Life Insurance Carriers",
                            "Direct Health And Medical Insurance Carriers",
                            "Direct Property And Casualty Insurance Carriers",
                            "Direct Title Insurance Carriers",
                            "Other Direct Insurance (Ex Life Health Medical) Carriers",
                            "Reinsurance Carriers",
                            "Insurance Agencies And Brokerages",
                            "Claims Adjusters",
                            "Third Party Administration For Insurance And Pension Funds",
                            "All Other Insurance Related Activities",
                            "Pension Funds",
                            "Health And Welfare Funds",
                            "Other Insurance Funds",
                            "Open-End Investment Funds",
                            "Trusts Estates And Agency Accounts",
                            "Other Financial Vehicles",
                            "Bancassurance",
                            "Banks Operating Under An Off-Shore License",
                            "Government Agency",
                            "Government-Sponsored Agency",
                            "Multilateral Credit Institution",
                            "Student Loan Providers",
                            "Commercial Lending",
                            "Proprietary Trading Firm Non- Hedge Fund",
                            "Hedge Fund Management",
                            "Composite Insurer - Predominantly Life",
                            "Composite Insurer - Predominantly Non-Life",
                            "Monoline Insurers",
                            "Corp Pension Funds",
                            "Public Pension Funds",
                            "Industrywide Pension Schemes",
                            "Personal & Testamentary Trusts",
                            "Institutional Trusts",
                            "Mortgage Real Estate Investment Trusts",
                            "HRF (Ucits Oe/Div 40 Act)",
                            "Regulated Fds (All Other 40 ActCanadian Mutual FdsAus Fds)",
                            "Other Mutual Funds (Cayman Isl Mut FdsCayman Isl Unit TrLl",
                            "Clearinghouses",
                            "Payment Systems",
                            "Depositories",
                            "Closed-End Investment Funds",
                            "Hedge Funds",
                            "SPV's Not Elsewhere Classified",
                            "Private Equity Funds",
                            "Personal Investment Companies"
                          ]
                        },
                        {
                          "industryCategory": "Real Estate and Rental and Leasing",
                          "industryTypes": [
                            "Lessors Of Residential Buildings And Dwellings",
                            "Lessors Of Nonresidential Buildings (Except Miniwarehouses)",
                            "Lessors Of Miniwarehouses And Self Storage Units",
                            "Lessors Of Other Real Estate Property",
                            "Offices Of Real Estate Agents And Brokers",
                            "Residential Property Managers",
                            "Nonresidential Property Managers",
                            "Offices Of Real Estate Appraisers",
                            "Other Activities Related To Real Estate",
                            "Passenger Car Rental",
                            "Passenger Car Leasing",
                            "Truck Utility Trailer And Rv Rental And Leasing",
                            "Consumer Electronics And Appliances Rental",
                            "General Rental Centers",
                            "Commercial Air, Rail, and Water Transportation Equipment Rental and Leasing",
                            "Construction, Mining, and Forestry Machinery and Equipment Rental and Leasing",
                            "Office Machinery And Equipment Rental And Leasing",
                            "Other Commercial and Industrial Machinery and Equipment Rental and Leasing",
                            "Owners And Lessors Of Other Non-Financial Assets",
                            "Formal Wear and Costume Rental",
                            "Video Tape and Disc Rental",
                            "Home Health Equipment Rental",
                            "Recreational Goods Rental",
                            "All Other Consumer Goods Rental",
                            "Lessors Of Apartments (Leasing Of Their Own Apt)",
                            "Lessors Of Industrial/Warehouses (Leasing Ind Properties)",
                            "Lessors Of Offices (Leasing Their Own Office Properties)",
                            "Lessors Of Retail (Renting/Leasing Own Retail Properties)",
                            "Lessors Of Senior Housing/Healthcare",
                            "Residential Real Estate Opportunity Funds",
                            "Commercial Real Estate Opportunity Funds",
                            "Equity Real Estate Investment Trust"
                          ]
                        },
                        {
                          "industryCategory": "Professional, Scientific, and Technical Services",
                          "industryTypes": [
                            "Offices Of Lawyers",
                            "Offices Of Notaries",
                            "Title Abstract And Settlement Offices",
                            "All Other Legal Services",
                            "Offices Of Certified Public Accountants",
                            "Tax Preparation Services",
                            "Payroll Services",
                            "Other Accounting Services",
                            "Architectural Services",
                            "Landscape Architectural Services",
                            "Engineering Services",
                            "Drafting Services",
                            "Building Inspection Services",
                            "Geophysical Surveying And Mapping Services",
                            "Surveying And Mapping (Except Geophysical) Services",
                            "Testing Laboratories",
                            "Interior Design Services",
                            "Industrial Design Services",
                            "Graphic Design Services",
                            "Other Specialized Design Services",
                            "Custom Computer Programming Services",
                            "Computer Systems Design Services",
                            "Computer Facilities Management Services",
                            "Other Computer Related Services",
                            "Administrative Management and General Management Consulting Services",
                            "Human Resources Consulting Services ",
                            "Marketing Consulting Services",
                            "Process, Physical Distribution, and Logistics Consulting Services",
                            "Other Management Consulting Services",
                            "Environmental Consulting Services",
                            "Other Scientific And Technical Consulting Services",
                            "Research And Development In Life Sciences",
                            "Advertising Agencies",
                            "Public Relations Agencies",
                            "Media Buying Agencies",
                            "Media Representatives",
                            "Outdoor Advertising",
                            "Direct Mail Advertising",
                            "Advertising Material Distribution Services",
                            "Other Services Related To Advertising",
                            "Marketing Research And Public Opinion Polling",
                            "Photography Studios Portrait",
                            "Commercial Photography",
                            "Translation And Interpretation Services",
                            "Veterinary Services",
                            "All Other Professional Scientific And Technical Services",
                            "Research and Development in Nanotechnology",
                            "Research and Development in Biotechnology (except Nanobiotechnology)",
                            "Research and Development in the Physical, Engineering, and Life Sciences (except Nanotechnology and Biotechnology)",
                            "Coupon Clipping Services"
                          ]
                        },
                        {
                          "industryCategory": "Management of Companies and Enterprises",
                          "industryTypes": [
                            "Offices Of Bank Holding Companies",
                            "Offices Of Other Holding Companies",
                            "Corporate Subsidiary And Regional Managing Offices"
                          ]
                        },
                        {
                          "industryCategory": "Administrative and Support and Waste Management and Remediation Services",
                          "industryTypes": [
                            "Office Administrative Services",
                            "Facilities Support Services",
                            "Employment Placement Agencies",
                            "Executive Search Services",
                            "Temporary Help Services",
                            "Professional Employer Organizations",
                            "Document Preparation Services",
                            "Telephone Answering Services",
                            "Telemarketing Bureaus and Other Contact Centers",
                            "Private Mail Centers",
                            "Other Business Service Centers (Including Copy Shops)",
                            "Collection Agencies",
                            "Credit Bureaus",
                            "Repossession Services",
                            "Court Reporting And Stenotype Services",
                            "All Other Business Support Services",
                            "Travel Agencies",
                            "Tour Operators",
                            "Convention And Visitors Bureaus",
                            "All Other Travel Arrangement And Reservation Services",
                            "Investigation Services",
                            "Security Guards And Patrol Services",
                            "Armored Car Services",
                            "Security Systems Services (Except Locksmiths)",
                            "Locksmiths",
                            "Exterminating And Pest Control Services",
                            "Janitorial Services",
                            "Landscaping Services",
                            "Carpet And Upholstery Cleaning Services",
                            "Other Services To Buildings And Dwellings",
                            "Packaging And Labeling Services",
                            "Convention And Trade Show Organizers",
                            "All Other Support Services",
                            "Solid Waste Collection",
                            "Hazardous Waste Collection",
                            "Other Waste Collection",
                            "Hazardous Waste Treatment And Disposal",
                            "Solid Waste Landfill",
                            "Solid Waste Combustors And Incinerators",
                            "Other Nonhazardous Waste Treatment And Disposal",
                            "Remediation Services",
                            "Materials Recovery Facilities",
                            "Septic Tank And Related Services",
                            "All Other Miscellaneous Waste Management Services",
                            "Secretarial Services And Company Formation Agents"
                          ]
                        },
                        {
                          "industryCategory": "Educational Services",
                          "industryTypes": [
                            "Elementary And Secondary Schools (Public)",
                            "Junior Colleges (Public)",
                            "Colleges Universities And Professional Schools (Public)",
                            "Business And Secretarial Schools",
                            "Computer Training",
                            "Professional And Management Development Training",
                            "Cosmetology And Barber Schools",
                            "Flight Training",
                            "Apprenticeship Training",
                            "Other Technical And Trade Schools",
                            "Fine Arts Schools",
                            "Sports And Recreation Instruction",
                            "Language Schools",
                            "Exam Preparation And Tutoring",
                            "Automobile Driving Schools",
                            "All Other Miscellaneous Schools And Instruction",
                            "Educational Support Services",
                            "Elementary And Secondary Schools (Private)",
                            "Junior Colleges (Private)",
                            "Colleges Universities And Professional Schools (Private)"
                          ]
                        },
                        {
                          "industryCategory": "Health Care and Social Assistance",
                          "industryTypes": [
                            "Offices Of Physicians (Except Mental Health Specialists)",
                            "Offices Of Physicians Mental Health Specialists",
                            "Offices Of Dentists",
                            "Offices Of Chiropractors",
                            "Offices Of Optometrists",
                            "Offices Of Mental Health Practitioners (Except Physicians)",
                            "Office Of PhysicalOccupationalSpeech TherapistAudiologist",
                            "Offices Of Podiatrists",
                            "Offices Of All Other Miscellaneous Health Practitioners",
                            "Family Planning Centers",
                            "Outpatient Mental Health And Substance Abuse Centers",
                            "Hmo Medical Centers",
                            "Kidney Dialysis Centers",
                            "Freestanding Ambulatory Surgical And Emergency Centers",
                            "All Other Outpatient Care Centers",
                            "Medical Laboratories",
                            "Diagnostic Imaging Centers",
                            "Home Health Care Services",
                            "Ambulance Services",
                            "Blood And Organ Banks",
                            "All Other Miscellaneous Ambulatory Health Care Services",
                            "General Medical And Surgical Hospitals",
                            "Psychiatric And Substance Abuse Hospitals",
                            "Specialty (except Psychiatric and Substance Abuse) Hospitals",
                            "Nursing Care Facilities (Skilled Nursing Facilities) ",
                            "Resi Intellectual and Developmental Disability Facilities ",
                            "Residential Mental Health And Substance Abuse Facilities",
                            "Continuing Care Retirement Communities",
                            "Assisted Living Facilities for the Elderly ",
                            "Other Residential Care Facilities",
                            "Child And Youth Services",
                            "Services For The Elderly And Persons With Disabilities",
                            "Other Individual And Family Services",
                            "Community Food Services",
                            "Temporary Shelters",
                            "Other Community Housing Services",
                            "Emergency And Other Relief Services",
                            "Vocational Rehabilitation Services",
                            "Child Day Care Services",
                            "Not-For-Profit Hospitals",
                            "Pharmacy Benefit Managers, Institutional Pharmacies, and Large Chain Drug Stores"
                          ]
                        },
                        {
                          "industryCategory": "Arts, Entertainment, and Recreation",
                          "industryTypes": [
                            "Theater Companies And Dinner Theaters",
                            "Dance Companies",
                            "Musical Groups And Artists",
                            "Other Performing Arts Companies",
                            "Sports Teams And Clubs",
                            "Race Tracks",
                            "Other Spectator Sports",
                            "Promoters Of Performg ArtSports&Similar Events W/Facilities",
                            "Promoters Of Performg ArtSport&Similar Event W/O Facilities",
                            "Agents/Mgrs For ArtistsAthletesEntertainersPublic Figures",
                            "Independent Artists Writers And Performers",
                            "Museums",
                            "Historical Sites",
                            "Zoos And Botanical Gardens",
                            "Nature Parks And Other Similar Institutions",
                            "Amusement And Theme Parks",
                            "Amusement Arcades",
                            "Casinos (Except Casino Hotels)",
                            "Other Gambling Industries",
                            "Golf Courses And Country Clubs",
                            "Skiing Facilities",
                            "Marinas",
                            "Fitness And Recreational Sports Centers",
                            "Bowling Centers",
                            "All Other Amusement And Recreation Industries"
                          ]
                        },
                        {
                          "industryCategory": "Accommodation and Food Services",
                          "industryTypes": [
                            "Hotels (Except Casino Hotels) And Motels",
                            "Casino Hotels",
                            "Bed And Breakfast Inns",
                            "All Other Traveler Accommodation",
                            "Rv (Recreational Vehicle) Parks And Campgrounds",
                            "Recreational And Vacation Camps",
                            "Rooming And Boarding Houses",
                            "Foodservice Contractors",
                            "Caterers",
                            "Mobile Foodservices",
                            "Drinking Places (Alcoholic Beverages)",
                            "Full-Service Restaurants",
                            "Limited-Service Restaurants",
                            "Cafeterias Grill Buffets and Buffets",
                            "Snack and Nonalcoholic Beverage Bars"
                          ]
                        },
                        {
                          "industryCategory": "Other Services (except Public Administration)",
                          "industryTypes": [
                            "General Automotive Repair",
                            "Automotive Exhaust System Repair",
                            "Automotive Transmission Repair",
                            "Other Automotive Mechanical And Electrical Repair And Maint",
                            "Automotive Body Paint And Interior Repair And Maintenance",
                            "Automotive Glass Replacement Shops",
                            "Automotive Oil Change And Lubrication Shops",
                            "Car Washes",
                            "All Other Automotive Repair And Maintenance",
                            "Consumer Electronics Repair And Maintenance",
                            "Computer And Office Machine Repair And Maintenance",
                            "Communication Equipment Repair And Maintenance",
                            "Other Electronic And Precision Equipment Repair And Maint",
                            "C&I Machinery/Equip (Ex Auto/Electronic) Repair/Maintenance",
                            "Home And Garden Equipment Repair And Maintenance",
                            "Appliance Repair And Maintenance",
                            "Reupholstery And Furniture Repair",
                            "Footwear And Leather Goods Repair",
                            "Other Personal And Household Goods Repair And Maintenance",
                            "Barber Shops",
                            "Beauty Salons",
                            "Nail Salons",
                            "Diet And Weight Reducing Centers",
                            "Other Personal Care Services",
                            "Funeral Homes",
                            "Cemeteries And Crematories",
                            "Coin-Operated Laundries And Drycleaners",
                            "Drycleaning And Laundry Services (Except Coin-Operated)",
                            "Linen Supply",
                            "Industrial Launderers",
                            "Pet Care (Except Veterinary) Services",
                            "Photo Finishing Laboratories (Except One-Hour)",
                            "One-Hour Photo Finishing",
                            "Parking Lots And Garages",
                            "All Other Personal Services",
                            "Religious Organizations",
                            "Grantmaking Foundations",
                            "Voluntary Health Organizations",
                            "Other Grantmaking And Giving Services",
                            "Human Rights Organizations",
                            "Environment Conservation And Wildlife Organizations",
                            "Other Social Advocacy Organizations",
                            "Civic And Social Organizations",
                            "Business Associations",
                            "Professional Organizations",
                            "Labor Unions And Similar Labor Organizations",
                            "Political Organizations",
                            "Other Similar Organizations",
                            "Private Households",
                            "Adult Oriented Other than Media",
                            "Adult Oriented Media"
                          ]
                        },
                        {
                          "industryCategory": "Public Administration",
                          "industryTypes": [
                            "Executive Offices",
                            "Legislative Bodies",
                            "Public Finance",
                            "Executive And Legislative Offices Combined",
                            "American Indian And Alaska Native Tribal Governments",
                            "All Other General Government",
                            "Courts",
                            "Police Protection",
                            "Legal Counsel And Prosecution",
                            "Correctional Institutions",
                            "Parole Offices And Probation Offices",
                            "Fire Protection",
                            "All Other Justice Public Order And Safety",
                            "Administration Of Education Programs",
                            "Administration Of Public Health Programs",
                            "Admin Of Social Human Resource & Income Maint Programs",
                            "Administration Of Veteran'S Affairs",
                            "Administration of Air and Water Resource and Solid Waste Management Programs",
                            "Land Mineral Wildlife And Forest Conservation",
                            "Administration Of Housing Programs",
                            "Admin Of Urban Planning And Community & Rural Develop",
                            "Administration Of General Economic Programs",
                            "Regulation and Administration of Transportation Programs",
                            "Regulation and Administration of Communications, Electric, Gas, and Other Utilities",
                            "Regulation Of Agricultural Marketing And Commodities",
                            "Regulation Licensing Inspection Of Misc Commercial Sectors",
                            "Space Research And Technology",
                            "National Security",
                            "International Affairs",
                            "Central Government",
                            "Public Finance (Finance Ministries Treasury)",
                            "Water Waste Water And Solid Waste Mgmt (Public Utilities)",
                            "Surface Transportation And Facilities (Roads Rail Subway)",
                            "Airport (Transportation)",
                            "Electricity Utilities (Public Utilities)",
                            "Other Central Government",
                            "Municipal Airport",
                            "Electrical Cooperative",
                            "Municipality Owned Electrical Utilities",
                            "City Or County Owned Hospitals"
                          ]
                        },
                        {
                          "industryCategory": "Individuals",
                          "industryTypes": [
                            "Individuals"
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "industryCategory": {
                            "type": "string",
                            "example": "Finance and Insurance"
                          },
                          "industryTypes": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "Abrasive Product Manufacturing"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/states": {
      "get": {
        "summary": "Get the list of states for the Client",
        "description": "Get the list of states for the client.",
        "operationId": "getStates",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Two-letter ISO code for a country, such as US for USA.",
            "required": false,
            "examples": {
              "Default": {
                "value": "US"
              }
            },
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "US",
              "description": "ISO 3166-1 Alpha-2 Country Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "states": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Alabama"
                          },
                          "code": {
                            "type": "string",
                            "example": "AL"
                          }
                        }
                      }
                    },
                    "country_code": {
                      "type": "string",
                      "example": "US"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/country-subdivision": {
      "get": {
        "summary": "Get the list of Country Subdivision for the Client",
        "description": "Get the list of Country Subdivision for the client.",
        "operationId": "getCountrySubdivision",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Two-letter ISO code for a country, such as US for USA.",
            "required": false,
            "examples": {
              "Default": {
                "value": "US"
              }
            },
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "US",
              "description": "ISO 3166-1 Alpha-2 Country Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfCountrySubdivision": {
                    "summary": "List of Country Subdivision for the client",
                    "description": "List of Country Subdivision for the client",
                    "value": {
                      "subDivision": [
                        {
                          "name": "Alabama",
                          "code": "AL"
                        },
                        {
                          "name": "Alaska",
                          "code": "AK"
                        },
                        {
                          "name": "Arizona",
                          "code": "AZ"
                        },
                        {
                          "name": "Arkansas",
                          "code": "AR"
                        },
                        {
                          "name": "California",
                          "code": "CA"
                        },
                        {
                          "name": "Colorado",
                          "code": "CO"
                        },
                        {
                          "name": "Connecticut",
                          "code": "CT"
                        },
                        {
                          "name": "Delaware",
                          "code": "DE"
                        },
                        {
                          "name": "District of Columbia",
                          "code": "DC"
                        },
                        {
                          "name": "Florida",
                          "code": "FL"
                        },
                        {
                          "name": "Georgia",
                          "code": "GA"
                        },
                        {
                          "name": "Hawaii",
                          "code": "HI"
                        },
                        {
                          "name": "Idaho",
                          "code": "ID"
                        },
                        {
                          "name": "Illinois",
                          "code": "IL"
                        },
                        {
                          "name": "Indiana",
                          "code": "IN"
                        },
                        {
                          "name": "Iowa",
                          "code": "IA"
                        },
                        {
                          "name": "Kansas",
                          "code": "KS"
                        },
                        {
                          "name": "Kentucky",
                          "code": "KY"
                        },
                        {
                          "name": "Louisiana",
                          "code": "LA"
                        },
                        {
                          "name": "Maine",
                          "code": "ME"
                        },
                        {
                          "name": "Maryland",
                          "code": "MD"
                        },
                        {
                          "name": "Massachusetts",
                          "code": "MA"
                        },
                        {
                          "name": "Michigan",
                          "code": "MI"
                        },
                        {
                          "name": "Minnesota",
                          "code": "MN"
                        },
                        {
                          "name": "Mississippi",
                          "code": "MS"
                        },
                        {
                          "name": "Missouri",
                          "code": "MO"
                        },
                        {
                          "name": "Montana",
                          "code": "MT"
                        },
                        {
                          "name": "Nebraska",
                          "code": "NE"
                        },
                        {
                          "name": "Nevada",
                          "code": "NV"
                        },
                        {
                          "name": "New Hampshire",
                          "code": "NH"
                        },
                        {
                          "name": "New Jersey",
                          "code": "NJ"
                        },
                        {
                          "name": "New Mexico",
                          "code": "NM"
                        },
                        {
                          "name": "New York",
                          "code": "NY"
                        },
                        {
                          "name": "North Carolina",
                          "code": "NC"
                        },
                        {
                          "name": "North Dakota",
                          "code": "ND"
                        },
                        {
                          "name": "Ohio",
                          "code": "OH"
                        },
                        {
                          "name": "Oklahoma",
                          "code": "OK"
                        },
                        {
                          "name": "Oregon",
                          "code": "OR"
                        },
                        {
                          "name": "Pennsylvania",
                          "code": "PA"
                        },
                        {
                          "name": "Rhode Island",
                          "code": "RI"
                        },
                        {
                          "name": "South Carolina",
                          "code": "SC"
                        },
                        {
                          "name": "South Dakota",
                          "code": "SD"
                        },
                        {
                          "name": "Tennessee",
                          "code": "TN"
                        },
                        {
                          "name": "Texas",
                          "code": "TX"
                        },
                        {
                          "name": "Utah",
                          "code": "UT"
                        },
                        {
                          "name": "Vermont",
                          "code": "VT"
                        },
                        {
                          "name": "Virginia",
                          "code": "VA"
                        },
                        {
                          "name": "Washington",
                          "code": "WA"
                        },
                        {
                          "name": "West Virginia",
                          "code": "WV"
                        },
                        {
                          "name": "Wisconsin",
                          "code": "WI"
                        },
                        {
                          "name": "Wyoming",
                          "code": "WY"
                        }
                      ],
                      "countryCode": "US"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "subDivision": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Alabama"
                          },
                          "code": {
                            "type": "string",
                            "example": "AL"
                          }
                        }
                      }
                    },
                    "countryCode": {
                      "type": "string",
                      "example": "US"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/products": {
      "get": {
        "summary": "Get the list of products for the Client",
        "description": "Get the list of products for the client.",
        "operationId": "getRefProducts",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfProducts": {
                    "summary": "List of products for the client",
                    "description": "List of products for the client",
                    "value": {
                      "products": [
                        {
                          "code": "EB",
                          "name": "Embedded Banking"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "EB"
                          },
                          "name": {
                            "type": "string",
                            "example": "Embedded Banking"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/business-types": {
      "get": {
        "summary": "List business types",
        "description": "Returns a list of business types that can be used for client onboarding processes.",
        "operationId": "getRefBusinessTypes",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfBusinessTypes": {
                    "summary": "List of business types",
                    "description": "List of business types",
                    "value": {
                      "businessTypes": [
                        "Privately Owned Business",
                        "Sole Proprietorship"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "businessTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Sole Proprietorship",
                        "Privately Owned Business"
                      ],
                      "description": "The list of business types."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/job-titles": {
      "get": {
        "summary": "List job titles",
        "description": "Returns a list of job titles that can be used for client onboarding.",
        "operationId": "getRefJobTitles",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfJobTitles": {
                    "summary": "List of job titles that can be used for client onboarding",
                    "description": "List of job titles that can be used for client onboarding",
                    "value": {
                      "jobTitles": [
                        "CEO",
                        "CFO",
                        "COO",
                        "Chairman",
                        "Other",
                        "President",
                        "Senior Branch Manager"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobTitles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "CEO",
                        "CFO",
                        "COO",
                        "President",
                        "Other"
                      ],
                      "description": "The list of job titles"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/party-roles": {
      "get": {
        "summary": "List party roles",
        "description": "Returns a list of accepted party roles.",
        "operationId": "getRefPartyRoles",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfPartyRoles": {
                    "summary": "List of accepted party roles",
                    "description": "List of accepted party roles",
                    "value": {
                      "partyRoles": [
                        "CONTROLLER",
                        "OWNER",
                        "DECISION_MAKER"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partyRoles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The list of available partyRoles e.g. OWNER, DECISION_MAKER, CONTROLLER"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/address-types": {
      "get": {
        "summary": "List address types",
        "description": "Returns a list of accepted address types.",
        "operationId": "getRefAddressTypes",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfAddressTypes": {
                    "summary": "List of Address Types",
                    "description": "List of Address Types",
                    "value": {
                      "addressTypes": [
                        "Primary Residence",
                        "Principal place of business"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "addressTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The list of available partyRoles e.g. \"Principle place of business\", \"Primary Residence\""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/nature-of-ownerships": {
      "get": {
        "summary": "List Nature Of Ownership values",
        "description": "Returns a list of accepted Nature Of Ownership values.",
        "operationId": "getRefNatureOfOwnerships",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfAcceptedNatureOfOwnershipValues": {
                    "summary": "List of accepted Nature Of Ownership values",
                    "description": "List of accepted Nature Of Ownership values",
                    "value": {
                      "natureOfOwnerships": [
                        "Direct",
                        "Indirect"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "natureOfOwnerships": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The list of available partyRoles e.g.  \"Direct\", \"Indirect\""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/party-types": {
      "get": {
        "summary": "List party types",
        "description": "Returns a list of accepted party types.",
        "operationId": "getRefPartyTypes",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "examples": {
                  "ListOfAcceptedPartyTypes": {
                    "summary": "List of accepted party types",
                    "description": "List of accepted party types",
                    "value": {
                      "partyTypes": [
                        "Individual",
                        "Organization"
                      ]
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "partyTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The list of available partyRoles e.g.   \"Individual\", \"Organization\""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "BAD_REQUEST",
                  "message": "Error in Request Formatting",
                  "reasons": [
                    {
                      "reason": "CURRENCY_NOT_SUPPORTED",
                      "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                      "field": "body .currency",
                      "rejectedValue": "USDX"
                    },
                    {
                      "reason": "INVALID_AMOUNT",
                      "message": "Invalid amount specified. Check the amount and retry.",
                      "field": "body .amount",
                      "rejectedValue": "123.23.3"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Reference Data"
        ]
      }
    },
    "/statements/{id}": {
      "get": {
        "summary": "Get a statement",
        "description": "Get a statement document using its identifier",
        "operationId": "getStatement",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "client_id",
            "description": "Unique client identifier.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$",
              "minLength": 10,
              "maxLength": 10
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Statement identifier used to find the document.",
            "example": "ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Statements"
        ]
      }
    },
    "/statements/search": {
      "get": {
        "summary": "Search statements",
        "description": "Returns statements filtered by search criteria.",
        "operationId": "searchStatements",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "client_id",
            "description": "Unique client identifier.",
            "required": true,
            "example": "0030000131",
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$",
              "minLength": 10,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "accountIds",
            "description": "Account identifiers used to represent client accounts.\n",
            "required": false,
            "example": [
              "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "dateFrom",
            "description": "Earliest date in search range. Must be set at least one day earlier than dateTo.",
            "required": true,
            "example": "2022-12-31T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dateTo",
            "description": "Latest date in search range. Must be set at least one day later than dateFrom.",
            "required": true,
            "example": "2022-12-31T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statements": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Statement identifier used to retrieve statement document (Base64 encoded).",
                            "example": "ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl"
                          },
                          "metaData": {
                            "type": "object",
                            "properties": {
                              "accountNumber": {
                                "description": "Payment routing number of the account related to the statement.",
                                "type": "string",
                                "example": "20000046316998"
                              },
                              "createdDate": {
                                "description": "Statement creation date and time.",
                                "type": "string",
                                "example": "2022-08-01T12:00"
                              },
                              "month": {
                                "type": "string",
                                "example": "AUGUST"
                              },
                              "year": {
                                "type": "string",
                                "example": "2022"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "UNAUTHORIZED",
                  "message": "Request is unauthorized",
                  "reasons": [
                    {
                      "reason": "MALFORMED_TOKEN",
                      "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "FORBIDDEN",
                  "message": "Unauthorized request. The client does not have access rights to the content."
                }
              }
            }
          },
          "404": {
            "description": "No data found for the criteria specified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "NOT_FOUND",
                  "message": "The server can not find the requested resource."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Generic Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "INTERNAL_SERVER_ERROR",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "string",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "SERVICE_UNAVAILABLE",
                  "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
                }
              }
            }
          }
        },
        "tags": [
          "Statements"
        ]
      }
    },
    "/accounts": {
      "get": {
        "summary": "List accounts",
        "description": "Retrieves a list of accounts for a specific client.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique client identifier",
            "example": "0030000131",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "List of accounts for a specific client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "metadata",
                    "items"
                  ],
                  "properties": {
                    "metadata": {
                      "nullable": false,
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 2,
                          "description": "Page Number.\n"
                        },
                        "limit": {
                          "type": "integer",
                          "example": 30,
                          "description": "Number of records per page.\n"
                        },
                        "total_items": {
                          "type": "integer",
                          "example": 340,
                          "description": "Total number of items.\n"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "nullable": false,
                      "description": "List of accounts for a specific client",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "label",
                          "state",
                          "paymentRoutingInformation"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Account identifier",
                            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                          },
                          "label": {
                            "type": "string",
                            "example": "TAXES1234",
                            "description": "Account label"
                          },
                          "state": {
                            "description": "Account State",
                            "type": "string",
                            "enum": [
                              "OPEN",
                              "CLOSED",
                              "PENDING_CLOSE"
                            ],
                            "example": "OPEN"
                          },
                          "paymentRoutingInformation": {
                            "type": "object",
                            "required": [
                              "accountNumber",
                              "country",
                              "routingInformation"
                            ],
                            "properties": {
                              "accountNumber": {
                                "type": "string",
                                "example": "20000113278882",
                                "description": "Account number (PRN)"
                              },
                              "country": {
                                "type": "string",
                                "enum": [
                                  "US"
                                ],
                                "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                                "example": "US"
                              },
                              "routingInformation": {
                                "type": "array",
                                "description": "Routing information",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "type",
                                    "value"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "ABA"
                                      ],
                                      "description": "Routing codes supported (currently only ABA is supported)",
                                      "example": "ABA"
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Routing number",
                                      "example": "028000024"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Account",
        "description": "Create an account for a specific client",
        "operationId": "postAccounts",
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique client identifier",
            "example": "0030000131",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "label"
                ],
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "Account label: PROJECT, TAXES or RAINY_DAY",
                    "example": "TAXES"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "label",
                    "state",
                    "paymentRoutingInformation"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Account identifier",
                      "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                    },
                    "label": {
                      "type": "string",
                      "example": "TAXES1234",
                      "description": "Account label"
                    },
                    "state": {
                      "description": "Account State",
                      "type": "string",
                      "enum": [
                        "OPEN",
                        "CLOSED",
                        "PENDING_CLOSE"
                      ],
                      "example": "OPEN"
                    },
                    "paymentRoutingInformation": {
                      "type": "object",
                      "required": [
                        "accountNumber",
                        "country",
                        "routingInformation",
                        "status"
                      ],
                      "properties": {
                        "accountNumber": {
                          "type": "string",
                          "example": "20000113278882",
                          "description": "Account number (PRN)"
                        },
                        "country": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                          "example": "US"
                        },
                        "routingInformation": {
                          "type": "array",
                          "description": "Routing information",
                          "items": {
                            "type": "object",
                            "required": [
                              "type",
                              "value"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ABA"
                                ],
                                "description": "Routing codes supported (currently only ABA is supported)",
                                "example": "ABA"
                              },
                              "value": {
                                "type": "string",
                                "description": "Routing number",
                                "example": "028000024"
                              }
                            }
                          }
                        },
                        "status": {
                          "description": "Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.",
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "example": "ACTIVE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/old-accounts": {
      "get": {
        "summary": "List accounts",
        "description": "Retrieves a list of accounts for a specific client",
        "operationId": "getAccountsOld",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "description": "JWT Client token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique client identifier",
            "example": "0030000131",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          }
        ],
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "List of accounts for a specific client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "label",
                      "state",
                      "paymentRoutingInformation"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Account identifier",
                        "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                      },
                      "label": {
                        "type": "string",
                        "example": "TAXES1234",
                        "description": "Account label"
                      },
                      "state": {
                        "description": "Account State",
                        "type": "string",
                        "enum": [
                          "OPEN",
                          "CLOSED",
                          "PENDING_CLOSE"
                        ],
                        "example": "OPEN"
                      },
                      "paymentRoutingInformation": {
                        "type": "object",
                        "required": [
                          "accountNumber",
                          "country",
                          "routingInformation"
                        ],
                        "properties": {
                          "accountNumber": {
                            "type": "string",
                            "example": "20000113278882",
                            "description": "Account number (PRN)"
                          },
                          "country": {
                            "type": "string",
                            "enum": [
                              "US"
                            ],
                            "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                            "example": "US"
                          },
                          "routingInformation": {
                            "type": "array",
                            "description": "Routing information",
                            "items": {
                              "type": "object",
                              "required": [
                                "type",
                                "value"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ABA"
                                  ],
                                  "description": "Routing codes supported (currently only ABA is supported)",
                                  "example": "ABA"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Routing number",
                                  "example": "028000024"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "summary": "Get account by ID",
        "description": "Look up a single account by account ID",
        "operationId": "getAccountById",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique client identifier",
            "example": "0030000131",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique account identifier",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "label",
                    "state",
                    "paymentRoutingInformation"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Account identifier",
                      "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                    },
                    "label": {
                      "type": "string",
                      "example": "TAXES1234",
                      "description": "Account label"
                    },
                    "state": {
                      "description": "Account State",
                      "type": "string",
                      "enum": [
                        "OPEN",
                        "CLOSED",
                        "PENDING_CLOSE"
                      ],
                      "example": "OPEN"
                    },
                    "paymentRoutingInformation": {
                      "type": "object",
                      "required": [
                        "accountNumber",
                        "country",
                        "routingInformation",
                        "status"
                      ],
                      "properties": {
                        "accountNumber": {
                          "type": "string",
                          "example": "20000113278882",
                          "description": "Account number (PRN)"
                        },
                        "country": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                          "example": "US"
                        },
                        "routingInformation": {
                          "type": "array",
                          "description": "Routing information",
                          "items": {
                            "type": "object",
                            "required": [
                              "type",
                              "value"
                            ],
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "ABA"
                                ],
                                "description": "Routing codes supported (currently only ABA is supported)",
                                "example": "ABA"
                              },
                              "value": {
                                "type": "string",
                                "description": "Routing number",
                                "example": "028000024"
                              }
                            }
                          }
                        },
                        "status": {
                          "description": "Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.",
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "example": "ACTIVE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The server can not find the requested resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/balances": {
      "get": {
        "summary": "Get account balance",
        "description": "Get balance details for a specific account",
        "operationId": "getAccountBalance",
        "tags": [
          "Account Balances"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "description": "Unique client identifier",
            "example": "0030000131",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}$"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique account identifier",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          }
        ],
        "responses": {
          "200": {
            "description": "Account balance details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "date",
                    "currency",
                    "balanceTypes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Account identifier",
                      "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                    },
                    "date": {
                      "type": "string",
                      "description": "Balance date",
                      "example": "2020-03-12T00:00:00.000Z"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Balance currency",
                      "example": "USD"
                    },
                    "balanceTypes": {
                      "type": "array",
                      "description": "List of account balances",
                      "items": {
                        "type": "object",
                        "required": [
                          "typeCode",
                          "amount"
                        ],
                        "properties": {
                          "typeCode": {
                            "type": "string",
                            "enum": [
                              "ITAV",
                              "ITBD"
                            ],
                            "description": "Balance type: ITAV (interim available balance) or ITBD (interim booked balance)",
                            "example": "ITAV"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Balance amount",
                            "example": 100.23
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The server can not find the requested resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API Processing Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error",
                    "message"
                  ],
                  "discriminator": {
                    "propertyName": "error"
                  },
                  "properties": {
                    "error": {
                      "type": "string",
                      "pattern": "^[A-Z0-9_]+$",
                      "description": "Readable code returned to indicate an error occurred",
                      "example": "BAD_REQUEST"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                      "example": "Error in Request Formatting"
                    },
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "reason",
                          "message"
                        ],
                        "properties": {
                          "reason": {
                            "type": "string",
                            "pattern": "^[A-Z0-9_]+$",
                            "description": "Readable reason returned to indicate a reason behind the error occurred",
                            "example": "INVALID_INPUT_VALUE_LENGTH"
                          },
                          "field": {
                            "type": "string",
                            "example": "header client_id",
                            "description": "Part of the request which is responsible for the reason"
                          },
                          "rejectedValue": {
                            "type": "object",
                            "description": "Rejected value from the request which is responsible for the reason"
                          },
                          "message": {
                            "type": "string",
                            "example": "Client with ID 0031234567 does not exist.",
                            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DocumentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CardDetailsErrorResponse": {
        "type": "object",
        "required": [
          "errorDescription"
        ],
        "properties": {
          "errorDescription": {
            "type": "string",
            "description": "Freeform explanatory text for the error.\n",
            "example": "Request params don't match the API request schema"
          },
          "serviceErrorCode": {
            "type": "string",
            "description": "A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)\n",
            "example": "INVALID_INPUT"
          },
          "externalErrorCode": {
            "type": "string",
            "description": "A code defined by the service for the external partner that includes a more specific information of what caused the error.\n",
            "example": "Unable to parse given input"
          }
        }
      },
      "DebitCardsResponse": {
        "type": "object",
        "required": [
          "metadata",
          "items"
        ],
        "properties": {
          "metadata": {
            "nullable": false,
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "nullable": false,
            "description": "List of debit cards for a specific client",
            "items": {
              "type": "object",
              "required": [
                "id",
                "accountId",
                "firstName",
                "middleName",
                "lastName",
                "last4",
                "expirationDate",
                "status"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "100000158367",
                  "description": "Unique identifier for the card."
                },
                "accountId": {
                  "type": "string",
                  "example": "12345678912345",
                  "description": "Account identifier or payment routing number."
                },
                "firstName": {
                  "type": "string",
                  "example": "John",
                  "description": "First name of the client."
                },
                "middleName": {
                  "type": "string",
                  "example": "Daniel",
                  "description": "Middle name of the client."
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe",
                  "description": "Last name of the client."
                },
                "last4": {
                  "type": "string",
                  "example": "4444",
                  "description": "Last Four digits of the card number."
                },
                "expirationDate": {
                  "type": "string",
                  "example": "30-Sep-2024",
                  "description": "Card expiration date."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "ACTIVE",
                    "SUSPEND",
                    "DAMAGED",
                    "DEACTIVE",
                    "DEFECTIVE",
                    "LOST",
                    "STOLEN",
                    "UNDELIVER"
                  ],
                  "example": "ACTIVE",
                  "description": "The current status of the card."
                }
              }
            }
          }
        }
      },
      "DebitCard": {
        "type": "object",
        "required": [
          "id",
          "accountId",
          "firstName",
          "middleName",
          "lastName",
          "last4",
          "expirationDate",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "100000158367",
            "description": "Unique identifier for the card."
          },
          "accountId": {
            "type": "string",
            "example": "12345678912345",
            "description": "Account identifier or payment routing number."
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "First name of the client."
          },
          "middleName": {
            "type": "string",
            "example": "Daniel",
            "description": "Middle name of the client."
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Last name of the client."
          },
          "last4": {
            "type": "string",
            "example": "4444",
            "description": "Last Four digits of the card number."
          },
          "expirationDate": {
            "type": "string",
            "example": "30-Sep-2024",
            "description": "Card expiration date."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPEND",
              "DAMAGED",
              "DEACTIVE",
              "DEFECTIVE",
              "LOST",
              "STOLEN",
              "UNDELIVER"
            ],
            "example": "ACTIVE",
            "description": "The current status of the card."
          }
        }
      },
      "CardDetailsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "100000158367",
            "description": "Unique identifier for the card.\n"
          },
          "accountId": {
            "type": "string",
            "example": "12345678912345",
            "description": "Account identifier or payment routing number.\n"
          },
          "firstName": {
            "type": "string",
            "format": "string",
            "example": "John",
            "description": "First name of the client.\n"
          },
          "middleName": {
            "type": "string",
            "example": "Daniel",
            "description": "Middle name of the client.\n"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Last name of the client.\n"
          },
          "last4": {
            "type": "string",
            "example": "4444",
            "description": "Last Four digits of the card number.\n"
          },
          "expirationDate": {
            "type": "string",
            "example": "30-Sep-2024",
            "description": "Card expiration date.\n"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPEND",
              "DAMAGED",
              "DEACTIVE",
              "DEFECTIVE",
              "LOST",
              "STOLEN",
              "UNDELIVER"
            ],
            "example": "ACTIVE",
            "description": "The current status of the card.\n"
          }
        }
      },
      "CardUpdateResponse": {
        "type": "object",
        "description": "An object with response code corresponding to the status of put request operation\n",
        "properties": {
          "message": {
            "type": "string",
            "example": "New Pin Set successfully",
            "description": "Message for PUT operation status\n"
          },
          "id": {
            "type": "string",
            "example": "100000160987",
            "description": "New Card Identifier to Update\n"
          }
        }
      },
      "CardDetailResponse": {
        "type": "object",
        "description": "An Object with Card Detail Response for specific Card Id\n",
        "required": [
          "accountId",
          "link"
        ],
        "properties": {
          "accountId": {
            "type": "string",
            "example": "12345678912345",
            "description": "Account Identifier/ Payment Routing Number\n"
          },
          "link": {
            "type": "string",
            "example": "https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==",
            "description": "Web link to the Card Holder Profile\n"
          }
        }
      },
      "CardUpdateRequest": {
        "type": "object",
        "description": "An Object containing Card Update Request\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Card.\nOptional field, only needed for updating new card identifier.\n"
          },
          "pin": {
            "type": "string",
            "description": "4 digit ATM pin to be used for associated card.\nOptional field. Only include if setting a new PIN.\n"
          },
          "status": {
            "type": "string",
            "enum": [
              "LOCKED",
              "UNLOCKED",
              "REPLACED",
              "CANCELLED"
            ],
            "description": "New status of the card after request. Can be locked/unlocked/replaced/cancelled status.\nOptional field. Only use if you want to update the status of the card.\n"
          },
          "replacementReason": {
            "type": "string",
            "enum": [
              "LOST",
              "STOLEN",
              "DAMAGED",
              "DEFECTIVE"
            ],
            "description": "Reason for replacing card. Only required if status is set to REPLACED.\n"
          },
          "cancellingReason": {
            "type": "string",
            "enum": [
              "LOST",
              "STOLEN",
              "DAMAGED",
              "DEFECTIVE",
              "DEACTIVE"
            ],
            "description": "Reason for cancelling card. Only required if status is set to CANCELLED.\n"
          },
          "maxDailySpend": {
            "type": "number",
            "description": "The maximum total amount that can be spent in a single day. Resets at 00:00 each day.\n",
            "example": 100,
            "minimum": 0
          },
          "maxDailyCashWithdrawal": {
            "type": "number",
            "description": "The total amount of cash that can be withdrawn in a single day.\n",
            "example": 100,
            "minimum": 0
          }
        }
      },
      "CreateDebitCardResponse": {
        "type": "object",
        "description": "An Object containing Create Debit Card Response\n",
        "properties": {
          "accountId": {
            "type": "string",
            "example": "501012502503",
            "description": "Account Identifier/ Payment Routing Number\n"
          },
          "message": {
            "type": "string",
            "example": "XXXX-XXXX-XXXX-9196 card successfully created. A Physical card will be mailed to the address on file.",
            "description": "Customer Card Information Message\n"
          },
          "link": {
            "type": "string",
            "example": "https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==",
            "description": "Link to the Customer Profile\n"
          },
          "id": {
            "type": "string",
            "example": "100000161175",
            "description": "Card Identifier\n"
          }
        }
      },
      "CreateDebitCardRequest": {
        "type": "object",
        "description": "An Object containing Create Debit Card Request\n",
        "properties": {
          "accountId": {
            "type": "string",
            "example": "12345678912345",
            "description": "Account Identifier/ Payment Routing Number\n"
          },
          "relatedPartyId": {
            "type": "string",
            "example": "7e2d7459-f045-4520-b408-897754d23f9",
            "description": "Party Id of the Card Holder\n"
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "First Name of the Cardholder provided during Onboarding.\n"
          },
          "middleName": {
            "type": "string",
            "example": "Xavier",
            "description": "Middle Name of the Cardholder provided during Onboarding.\n"
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Last Name of the Cardholder provided during Onboarding.\n"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Date of birth of the Cardholder provided during Onboarding\n",
            "example": "2000-10-12T00:00:00.000Z"
          },
          "citizenshipCountry": {
            "type": "string",
            "example": "US",
            "description": "Citizenship of the Cardholder.\n"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@xyz.com",
            "description": "Email Address of the Cardholder used for communication of New Cards, Card Updates & Other Lifecycle Events.\n"
          },
          "mobilePhone": {
            "type": "object",
            "properties": {
              "contactNumber": {
                "type": "string",
                "maxLength": 15,
                "example": "5558883333"
              },
              "countryCode": {
                "type": "string",
                "maxLength": 5,
                "example": "840"
              }
            }
          },
          "mailingAddress": {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address1": {
                    "type": "string",
                    "example": "345 Wouda St"
                  },
                  "address2": {
                    "type": "string",
                    "example": "Malibu Point"
                  },
                  "address3": {
                    "type": "string",
                    "example": ""
                  },
                  "city": {
                    "type": "string",
                    "example": "Springfield"
                  },
                  "state": {
                    "type": "string",
                    "example": "ND"
                  },
                  "country": {
                    "type": "string",
                    "example": "United States"
                  },
                  "postalCode": {
                    "type": "string",
                    "example": "58008"
                  }
                },
                "description": "Address Object\n"
              }
            ]
          },
          "governmentId": {
            "type": "object",
            "properties": {
              "idType": {
                "type": "string",
                "enum": [
                  "L",
                  "P",
                  "R",
                  "T",
                  "U",
                  "V",
                  "X"
                ],
                "example": "T"
              },
              "idIssuanceCountry": {
                "type": "string",
                "example": "US"
              },
              "idValue": {
                "type": "string",
                "example": "515081972"
              },
              "idIssuanceDate": {
                "type": "string",
                "format": "date",
                "example": "2015-10-15T00:00:00.000Z"
              },
              "idExpirationDate": {
                "type": "string",
                "format": "date",
                "example": "2023-03-14T00:00:00.000Z"
              }
            }
          },
          "maxDailySpend": {
            "type": "number",
            "description": "The maximum total amount that can be spent in a single day. Resets at 00:00 each day.\n",
            "example": 100,
            "minimum": 0
          },
          "maxDailyCashWithdrawal": {
            "type": "number",
            "description": "The total amount of cash that can be withdrawn in a single day.\n",
            "example": 100,
            "minimum": 0
          }
        }
      },
      "checkDepositRequest": {
        "type": "object",
        "description": "An object containing the check deposit request.\n",
        "properties": {
          "accountId": {
            "type": "string",
            "example": "12345678912345",
            "description": "Account Identifier/ Payment Routing Number.\n"
          },
          "amount": {
            "type": "number",
            "example": 2500.5,
            "description": "Financial value (amount of money) of the check deposit.\n"
          },
          "memo": {
            "type": "string",
            "example": "Rent",
            "default": "Check Deposit",
            "description": "A message or description of the check for the end user's reference.\n"
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "The currency of the check, in three-character ISO currency code.\n"
          }
        },
        "required": [
          "accountId",
          "amount",
          "currency"
        ]
      },
      "checkDepositResponse": {
        "type": "object",
        "description": "An object containing the response to a check deposit request.\n",
        "properties": {
          "id": {
            "type": "string",
            "example": "501012502503",
            "description": "A unique identifier for the check.\n"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2021-11-17T10:04:37.000Z",
            "description": "Date the check was submitted.\n"
          },
          "amount": {
            "type": "number",
            "example": 2500.5,
            "description": "Financial value (amount of money) of the check deposit.\n"
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "The currency of the check, in three-character ISO currency code.\n"
          },
          "memo": {
            "type": "string",
            "example": "Rent",
            "description": "A message or description of the check for the end user's reference.\n"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CANCELLED",
              "COMPLETE"
            ]
          },
          "creditorAccount": {
            "type": "string",
            "example": "1234567890",
            "description": "Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.\n"
          },
          "debtorAccount": {
            "type": "string",
            "example": "1234567890",
            "description": "Account identifier of the debtor (the party making the payment).\n"
          },
          "debtorName": {
            "type": "string",
            "example": "ABC Limited",
            "description": "The name of the debtor (the party making the payment).\n"
          },
          "debtorABA": {
            "type": "string",
            "example": "3000",
            "description": "Debtor ABA (American Bankers Association) Routing Number.\n"
          },
          "checkImageStatus": {
            "type": "object",
            "description": "An object containing the status of a submitted image of a check.\n",
            "properties": {
              "front": {
                "type": "string",
                "enum": [
                  "ACCEPTED",
                  "REJECTED",
                  "NOT_SUBMITTED"
                ]
              },
              "back": {
                "type": "string",
                "enum": [
                  "ACCEPTED",
                  "REJECTED",
                  "NOT_SUBMITTED"
                ]
              }
            }
          }
        }
      },
      "CheckImageStatus": {
        "type": "object",
        "description": "An object containing the status of a submitted image of a check.\n",
        "properties": {
          "front": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "NOT_SUBMITTED"
            ]
          },
          "back": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "NOT_SUBMITTED"
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "example": "345 Wouda St"
          },
          "address2": {
            "type": "string",
            "example": "Malibu Point"
          },
          "address3": {
            "type": "string",
            "example": ""
          },
          "city": {
            "type": "string",
            "example": "Springfield"
          },
          "state": {
            "type": "string",
            "example": "ND"
          },
          "country": {
            "type": "string",
            "example": "United States"
          },
          "postalCode": {
            "type": "string",
            "example": "58008"
          }
        },
        "description": "Address Object\n"
      },
      "CardAddress": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address1": {
                "type": "string",
                "example": "345 Wouda St"
              },
              "address2": {
                "type": "string",
                "example": "Malibu Point"
              },
              "address3": {
                "type": "string",
                "example": ""
              },
              "city": {
                "type": "string",
                "example": "Springfield"
              },
              "state": {
                "type": "string",
                "example": "ND"
              },
              "country": {
                "type": "string",
                "example": "United States"
              },
              "postalCode": {
                "type": "string",
                "example": "58008"
              }
            },
            "description": "Address Object\n"
          }
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "contactNumber": {
            "type": "string",
            "maxLength": 15,
            "example": "5558883333"
          },
          "countryCode": {
            "type": "string",
            "maxLength": 5,
            "example": "840"
          }
        }
      },
      "GovernmentId": {
        "type": "object",
        "properties": {
          "idType": {
            "type": "string",
            "enum": [
              "L",
              "P",
              "R",
              "T",
              "U",
              "V",
              "X"
            ],
            "example": "T"
          },
          "idIssuanceCountry": {
            "type": "string",
            "example": "US"
          },
          "idValue": {
            "type": "string",
            "example": "515081972"
          },
          "idIssuanceDate": {
            "type": "string",
            "format": "date",
            "example": "2015-10-15T00:00:00.000Z"
          },
          "idExpirationDate": {
            "type": "string",
            "format": "date",
            "example": "2023-03-14T00:00:00.000Z"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "discriminator": {
          "propertyName": "error"
        },
        "properties": {
          "error": {
            "type": "string",
            "pattern": "^[A-Z0-9_]+$",
            "description": "Readable code returned to indicate an error occurred",
            "example": "BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
            "example": "Error in Request Formatting"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "reason",
                "message"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable reason returned to indicate a reason behind the error occurred",
                  "example": "INVALID_INPUT_VALUE_LENGTH"
                },
                "field": {
                  "type": "string",
                  "description": "Part of the request which is responsible for the reason"
                },
                "rejectedValue": {
                  "type": "string",
                  "description": "Rejected value from the request which is responsible for the reason"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                }
              }
            }
          }
        }
      },
      "ApiErrorReason": {
        "type": "object",
        "required": [
          "reason",
          "message"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "pattern": "^[A-Z0-9_]+$",
            "description": "Readable reason returned to indicate a reason behind the error occurred",
            "example": "INVALID_INPUT_VALUE_LENGTH"
          },
          "field": {
            "type": "string",
            "description": "Part of the request which is responsible for the reason"
          },
          "rejectedValue": {
            "type": "string",
            "description": "Rejected value from the request which is responsible for the reason"
          },
          "message": {
            "type": "string",
            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
          }
        }
      },
      "PageMetaData": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 2,
            "description": "Page Number.\n"
          },
          "limit": {
            "type": "integer",
            "example": 30,
            "description": "Number of records per page.\n"
          },
          "total_items": {
            "type": "integer",
            "example": 340,
            "description": "Total number of items.\n"
          }
        }
      },
      "AddressDto": {
        "type": "object",
        "required": [
          "addressLine1",
          "city",
          "countryCode",
          "postalCode"
        ],
        "properties": {
          "addressType": {
            "type": "string",
            "example": "Principle Place Of Business",
            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
          },
          "addressLine1": {
            "type": "string",
            "maxLength": 60,
            "example": "689 Main St",
            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
          },
          "addressLine2": {
            "type": "string",
            "maxLength": 60,
            "example": "Opposite St. Andrews Church",
            "description": "addressLine2 has a maximum of 60 characters."
          },
          "addressLine3": {
            "type": "string",
            "maxLength": 60,
            "example": "Mini York",
            "description": "addressLine3 has a maximum of 60 characters."
          },
          "city": {
            "type": "string",
            "maxLength": 30,
            "example": "Anchorage",
            "description": "city has a maximum of 30 characters."
          },
          "state": {
            "type": "string",
            "example": "AZ",
            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
          },
          "postalCode": {
            "type": "string",
            "maxLength": 14,
            "example": "99501",
            "description": "Postal/ZIP code."
          },
          "countryCode": {
            "type": "string",
            "example": "US",
            "description": "Country code in alpha-2 format."
          }
        }
      },
      "Phone": {
        "type": "object",
        "required": [
          "countryCode",
          "phoneNumber"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "example": "+1"
          },
          "phoneNumber": {
            "type": "string",
            "example": "7785462944"
          }
        },
        "description": "Phone Number Information of the account\n"
      },
      "IdentityDTO": {
        "type": "object",
        "required": [
          "idType",
          "idValue",
          "idIssuer"
        ],
        "properties": {
          "idType": {
            "type": "string",
            "example": "EIN",
            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
          },
          "idDescription": {
            "type": "string",
            "example": "Employee Identification Number",
            "description": "Description of identification type e.g. Social Security Number"
          },
          "idIssuer": {
            "type": "string",
            "example": "US",
            "description": "Identification issuer country name e.g. US"
          },
          "idValue": {
            "type": "string",
            "example": "999999999",
            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
          }
        }
      },
      "PartyDetailCommon": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "required": [
              "addressLine1",
              "city",
              "countryCode",
              "postalCode"
            ],
            "properties": {
              "addressType": {
                "type": "string",
                "example": "Principle Place Of Business",
                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
              },
              "addressLine1": {
                "type": "string",
                "maxLength": 60,
                "example": "689 Main St",
                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
              },
              "addressLine2": {
                "type": "string",
                "maxLength": 60,
                "example": "Opposite St. Andrews Church",
                "description": "addressLine2 has a maximum of 60 characters."
              },
              "addressLine3": {
                "type": "string",
                "maxLength": 60,
                "example": "Mini York",
                "description": "addressLine3 has a maximum of 60 characters."
              },
              "city": {
                "type": "string",
                "maxLength": 30,
                "example": "Anchorage",
                "description": "city has a maximum of 30 characters."
              },
              "state": {
                "type": "string",
                "example": "AZ",
                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
              },
              "postalCode": {
                "type": "string",
                "maxLength": 14,
                "example": "99501",
                "description": "Postal/ZIP code."
              },
              "countryCode": {
                "type": "string",
                "example": "US",
                "description": "Country code in alpha-2 format."
              }
            }
          },
          "phone": {
            "type": "object",
            "required": [
              "countryCode",
              "phoneNumber"
            ],
            "properties": {
              "countryCode": {
                "type": "string",
                "example": "+1"
              },
              "phoneNumber": {
                "type": "string",
                "example": "7785462944"
              }
            },
            "description": "Phone Number Information of the account\n"
          },
          "identities": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "idType",
                    "idValue",
                    "idIssuer"
                  ],
                  "properties": {
                    "idType": {
                      "type": "string",
                      "example": "EIN",
                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                    },
                    "idDescription": {
                      "type": "string",
                      "example": "Employee Identification Number",
                      "description": "Description of identification type e.g. Social Security Number"
                    },
                    "idIssuer": {
                      "type": "string",
                      "example": "US",
                      "description": "Identification issuer country name e.g. US"
                    },
                    "idValue": {
                      "type": "string",
                      "example": "999999999",
                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PartyDetailBusiness": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "required": [
                  "addressLine1",
                  "city",
                  "countryCode",
                  "postalCode"
                ],
                "properties": {
                  "addressType": {
                    "type": "string",
                    "example": "Principle Place Of Business",
                    "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                  },
                  "addressLine1": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "689 Main St",
                    "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                  },
                  "addressLine2": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Opposite St. Andrews Church",
                    "description": "addressLine2 has a maximum of 60 characters."
                  },
                  "addressLine3": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Mini York",
                    "description": "addressLine3 has a maximum of 60 characters."
                  },
                  "city": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "Anchorage",
                    "description": "city has a maximum of 30 characters."
                  },
                  "state": {
                    "type": "string",
                    "example": "AZ",
                    "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 14,
                    "example": "99501",
                    "description": "Postal/ZIP code."
                  },
                  "countryCode": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format."
                  }
                }
              },
              "phone": {
                "type": "object",
                "required": [
                  "countryCode",
                  "phoneNumber"
                ],
                "properties": {
                  "countryCode": {
                    "type": "string",
                    "example": "+1"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "7785462944"
                  }
                },
                "description": "Phone Number Information of the account\n"
              },
              "identities": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "idType",
                        "idValue",
                        "idIssuer"
                      ],
                      "properties": {
                        "idType": {
                          "type": "string",
                          "example": "EIN",
                          "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                        },
                        "idDescription": {
                          "type": "string",
                          "example": "Employee Identification Number",
                          "description": "Description of identification type e.g. Social Security Number"
                        },
                        "idIssuer": {
                          "type": "string",
                          "example": "US",
                          "description": "Identification issuer country name e.g. US"
                        },
                        "idValue": {
                          "type": "string",
                          "example": "999999999",
                          "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "businessType": {
                "type": "string",
                "example": "Privately Owned Business",
                "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
              },
              "legalStructure": {
                "type": "string",
                "example": "LLC",
                "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
              },
              "industryCategory": {
                "type": "string",
                "example": "Accommodation and Food Services",
                "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
              },
              "industryType": {
                "type": "string",
                "example": "Bed And Breakfast Inns",
                "description": "Industry type.\n"
              },
              "significantOwnership": {
                "type": "boolean",
                "example": true,
                "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
              },
              "entitiesInOwnership": {
                "type": "boolean",
                "example": true,
                "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
              },
              "businessName": {
                "type": "string",
                "example": "Feltz Printing Service",
                "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
              },
              "businessAliasName": {
                "type": "string",
                "example": "Feltz Printing Service of New York",
                "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
              },
              "businessDescription": {
                "type": "string",
                "example": "Printing Service of New York",
                "description": "The business’s description.\n"
              },
              "websiteAvailable": {
                "type": "boolean",
                "example": true,
                "description": "Does your business have a website? e.g. true|false\n"
              },
              "website": {
                "type": "string",
                "example": "https://www.company.com",
                "description": "Website of the client. website is required if websiteAvailable is true.\n"
              },
              "email": {
                "type": "string",
                "example": "client@company.com",
                "description": "Email of the client.\n"
              },
              "countryOfFormation": {
                "type": "string",
                "example": "US",
                "description": "Country code in alpha-2 format"
              },
              "yearOfFormation": {
                "type": "string",
                "example": "2020",
                "description": "Year of formation. Max and Min length is 4.\n"
              },
              "parentClientId": {
                "type": "string",
                "description": "The parent (platform) relationship owner's ID."
              }
            }
          }
        ]
      },
      "ProfileConfiguration": {
        "type": "object",
        "properties": {
          "parentClientId": {
            "type": "string",
            "example": "0006739851",
            "description": "Client ID of the platform entity the client is onboarded to.\n"
          },
          "enablePayouts": {
            "type": "boolean",
            "example": true,
            "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-11-17T10:04:37.000Z",
            "description": "Date the profile was created.\n"
          },
          "profileStatus": {
            "type": "string",
            "description": "active | deleted"
          },
          "onboardingStatus": {
            "type": "string",
            "example": "In Progress, Completed, Failed",
            "description": "The Client Onboarding Status"
          }
        }
      },
      "RelatedParty": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "required": [
                  "addressLine1",
                  "city",
                  "countryCode",
                  "postalCode"
                ],
                "properties": {
                  "addressType": {
                    "type": "string",
                    "example": "Principle Place Of Business",
                    "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                  },
                  "addressLine1": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "689 Main St",
                    "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                  },
                  "addressLine2": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Opposite St. Andrews Church",
                    "description": "addressLine2 has a maximum of 60 characters."
                  },
                  "addressLine3": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Mini York",
                    "description": "addressLine3 has a maximum of 60 characters."
                  },
                  "city": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "Anchorage",
                    "description": "city has a maximum of 30 characters."
                  },
                  "state": {
                    "type": "string",
                    "example": "AZ",
                    "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 14,
                    "example": "99501",
                    "description": "Postal/ZIP code."
                  },
                  "countryCode": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format."
                  }
                }
              },
              "phone": {
                "type": "object",
                "required": [
                  "countryCode",
                  "phoneNumber"
                ],
                "properties": {
                  "countryCode": {
                    "type": "string",
                    "example": "+1"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "7785462944"
                  }
                },
                "description": "Phone Number Information of the account\n"
              },
              "identities": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "idType",
                        "idValue",
                        "idIssuer"
                      ],
                      "properties": {
                        "idType": {
                          "type": "string",
                          "example": "EIN",
                          "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                        },
                        "idDescription": {
                          "type": "string",
                          "example": "Employee Identification Number",
                          "description": "Description of identification type e.g. Social Security Number"
                        },
                        "idIssuer": {
                          "type": "string",
                          "example": "US",
                          "description": "Identification issuer country name e.g. US"
                        },
                        "idValue": {
                          "type": "string",
                          "example": "999999999",
                          "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "businessName": {
                "type": "string",
                "example": "Feltz Printing Service",
                "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
              },
              "firstName": {
                "type": "string",
                "minLength": 2,
                "maxLength": 30,
                "example": "Lenna",
                "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
              },
              "middleName": {
                "type": "string",
                "maxLength": 30,
                "example": "More",
                "description": "Middle name of the individual in case of party type being an individual.\n"
              },
              "lastName": {
                "type": "string",
                "minLength": 2,
                "maxLength": 30,
                "example": "Paprocki",
                "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
              },
              "jobTitle": {
                "type": "string",
                "example": "CEO",
                "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
              },
              "jobTitleDescription": {
                "type": "string",
                "example": "Acting CEO",
                "maxLength": 50,
                "description": "In case on jobTitle is Other then Job title description is required.\n"
              },
              "birthDate": {
                "type": "string",
                "example": "1983-02-08T00:00:00.000Z",
                "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
              },
              "email": {
                "type": "string",
                "example": "client@company.com",
                "description": "Email of the individual.\n"
              },
              "natureOfOwnership": {
                "type": "string",
                "example": "Direct",
                "description": "Nature of ownership e.g. Direct|Indirect\n"
              },
              "soleOwner": {
                "type": "boolean"
              },
              "partyType": {
                "type": "string",
                "example": "Individual",
                "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
              },
              "partyRole": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "CONTROLLER",
                  "OWNER"
                ],
                "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
              }
            }
          }
        ]
      },
      "RelatedPartyResponse": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "countryCode",
                      "postalCode"
                    ],
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "required": [
                      "countryCode",
                      "phoneNumber"
                    ],
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "idType",
                            "idValue",
                            "idIssuer"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Lenna",
                    "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "More",
                    "description": "Middle name of the individual in case of party type being an individual.\n"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Paprocki",
                    "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "CEO",
                    "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                  },
                  "jobTitleDescription": {
                    "type": "string",
                    "example": "Acting CEO",
                    "maxLength": 50,
                    "description": "In case on jobTitle is Other then Job title description is required.\n"
                  },
                  "birthDate": {
                    "type": "string",
                    "example": "1983-02-08T00:00:00.000Z",
                    "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the individual.\n"
                  },
                  "natureOfOwnership": {
                    "type": "string",
                    "example": "Direct",
                    "description": "Nature of ownership e.g. Direct|Indirect\n"
                  },
                  "soleOwner": {
                    "type": "boolean"
                  },
                  "partyType": {
                    "type": "string",
                    "example": "Individual",
                    "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                  },
                  "partyRole": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CONTROLLER",
                      "OWNER"
                    ],
                    "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "id",
              "partyType",
              "partyRole",
              "email"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "b98355d9-d193-4f50-9957-c699266b1530",
                "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
              },
              "status": {
                "type": "string",
                "description": "Status of the request. Can be active or deleted.",
                "example": "active"
              }
            }
          }
        ]
      },
      "ClientInformationResponse": {
        "type": "object",
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "countryCode",
                      "postalCode"
                    ],
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "required": [
                      "countryCode",
                      "phoneNumber"
                    ],
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "idType",
                            "idValue",
                            "idIssuer"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "businessType": {
                    "type": "string",
                    "example": "Privately Owned Business",
                    "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                  },
                  "legalStructure": {
                    "type": "string",
                    "example": "LLC",
                    "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                  },
                  "industryCategory": {
                    "type": "string",
                    "example": "Accommodation and Food Services",
                    "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                  },
                  "industryType": {
                    "type": "string",
                    "example": "Bed And Breakfast Inns",
                    "description": "Industry type.\n"
                  },
                  "significantOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                  },
                  "entitiesInOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                  },
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                  },
                  "businessAliasName": {
                    "type": "string",
                    "example": "Feltz Printing Service of New York",
                    "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                  },
                  "businessDescription": {
                    "type": "string",
                    "example": "Printing Service of New York",
                    "description": "The business’s description.\n"
                  },
                  "websiteAvailable": {
                    "type": "boolean",
                    "example": true,
                    "description": "Does your business have a website? e.g. true|false\n"
                  },
                  "website": {
                    "type": "string",
                    "example": "https://www.company.com",
                    "description": "Website of the client. website is required if websiteAvailable is true.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the client.\n"
                  },
                  "countryOfFormation": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format"
                  },
                  "yearOfFormation": {
                    "type": "string",
                    "example": "2020",
                    "description": "Year of formation. Max and Min length is 4.\n"
                  },
                  "parentClientId": {
                    "type": "string",
                    "description": "The parent (platform) relationship owner's ID."
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "parentClientId": {
                "type": "string",
                "example": "0006739851",
                "description": "Client ID of the platform entity the client is onboarded to.\n"
              },
              "enablePayouts": {
                "type": "boolean",
                "example": true,
                "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
              },
              "createdAt": {
                "type": "string",
                "example": "2021-11-17T10:04:37.000Z",
                "description": "Date the profile was created.\n"
              },
              "profileStatus": {
                "type": "string",
                "description": "active | deleted"
              },
              "onboardingStatus": {
                "type": "string",
                "example": "In Progress, Completed, Failed",
                "description": "The Client Onboarding Status"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                "description": "Client ID. The unique identifier for a client.\n"
              },
              "status": {
                "type": "string",
                "description": "active | deleted",
                "example": "active"
              },
              "relatedParties": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "type": "object",
                                  "required": [
                                    "addressLine1",
                                    "city",
                                    "countryCode",
                                    "postalCode"
                                  ],
                                  "properties": {
                                    "addressType": {
                                      "type": "string",
                                      "example": "Principle Place Of Business",
                                      "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                    },
                                    "addressLine1": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "689 Main St",
                                      "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                    },
                                    "addressLine2": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Opposite St. Andrews Church",
                                      "description": "addressLine2 has a maximum of 60 characters."
                                    },
                                    "addressLine3": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Mini York",
                                      "description": "addressLine3 has a maximum of 60 characters."
                                    },
                                    "city": {
                                      "type": "string",
                                      "maxLength": 30,
                                      "example": "Anchorage",
                                      "description": "city has a maximum of 30 characters."
                                    },
                                    "state": {
                                      "type": "string",
                                      "example": "AZ",
                                      "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                    },
                                    "postalCode": {
                                      "type": "string",
                                      "maxLength": 14,
                                      "example": "99501",
                                      "description": "Postal/ZIP code."
                                    },
                                    "countryCode": {
                                      "type": "string",
                                      "example": "US",
                                      "description": "Country code in alpha-2 format."
                                    }
                                  }
                                },
                                "phone": {
                                  "type": "object",
                                  "required": [
                                    "countryCode",
                                    "phoneNumber"
                                  ],
                                  "properties": {
                                    "countryCode": {
                                      "type": "string",
                                      "example": "+1"
                                    },
                                    "phoneNumber": {
                                      "type": "string",
                                      "example": "7785462944"
                                    }
                                  },
                                  "description": "Phone Number Information of the account\n"
                                },
                                "identities": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "required": [
                                          "idType",
                                          "idValue",
                                          "idIssuer"
                                        ],
                                        "properties": {
                                          "idType": {
                                            "type": "string",
                                            "example": "EIN",
                                            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                          },
                                          "idDescription": {
                                            "type": "string",
                                            "example": "Employee Identification Number",
                                            "description": "Description of identification type e.g. Social Security Number"
                                          },
                                          "idIssuer": {
                                            "type": "string",
                                            "example": "US",
                                            "description": "Identification issuer country name e.g. US"
                                          },
                                          "idValue": {
                                            "type": "string",
                                            "example": "999999999",
                                            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "businessName": {
                                  "type": "string",
                                  "example": "Feltz Printing Service",
                                  "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                },
                                "firstName": {
                                  "type": "string",
                                  "minLength": 2,
                                  "maxLength": 30,
                                  "example": "Lenna",
                                  "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                },
                                "middleName": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "More",
                                  "description": "Middle name of the individual in case of party type being an individual.\n"
                                },
                                "lastName": {
                                  "type": "string",
                                  "minLength": 2,
                                  "maxLength": 30,
                                  "example": "Paprocki",
                                  "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                },
                                "jobTitle": {
                                  "type": "string",
                                  "example": "CEO",
                                  "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                },
                                "jobTitleDescription": {
                                  "type": "string",
                                  "example": "Acting CEO",
                                  "maxLength": 50,
                                  "description": "In case on jobTitle is Other then Job title description is required.\n"
                                },
                                "birthDate": {
                                  "type": "string",
                                  "example": "1983-02-08T00:00:00.000Z",
                                  "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "client@company.com",
                                  "description": "Email of the individual.\n"
                                },
                                "natureOfOwnership": {
                                  "type": "string",
                                  "example": "Direct",
                                  "description": "Nature of ownership e.g. Direct|Indirect\n"
                                },
                                "soleOwner": {
                                  "type": "boolean"
                                },
                                "partyType": {
                                  "type": "string",
                                  "example": "Individual",
                                  "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                },
                                "partyRole": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "CONTROLLER",
                                    "OWNER"
                                  ],
                                  "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "required": [
                            "id",
                            "partyType",
                            "partyRole",
                            "email"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "b98355d9-d193-4f50-9957-c699266b1530",
                              "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                            },
                            "status": {
                              "type": "string",
                              "description": "Status of the request. Can be active or deleted.",
                              "example": "active"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "products": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "EB"
                ],
                "description": "The products available for clients.\n"
              }
            }
          }
        ]
      },
      "ListClientInformationResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "object",
                          "required": [
                            "addressLine1",
                            "city",
                            "countryCode",
                            "postalCode"
                          ],
                          "properties": {
                            "addressType": {
                              "type": "string",
                              "example": "Principle Place Of Business",
                              "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                            },
                            "addressLine1": {
                              "type": "string",
                              "maxLength": 60,
                              "example": "689 Main St",
                              "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                            },
                            "addressLine2": {
                              "type": "string",
                              "maxLength": 60,
                              "example": "Opposite St. Andrews Church",
                              "description": "addressLine2 has a maximum of 60 characters."
                            },
                            "addressLine3": {
                              "type": "string",
                              "maxLength": 60,
                              "example": "Mini York",
                              "description": "addressLine3 has a maximum of 60 characters."
                            },
                            "city": {
                              "type": "string",
                              "maxLength": 30,
                              "example": "Anchorage",
                              "description": "city has a maximum of 30 characters."
                            },
                            "state": {
                              "type": "string",
                              "example": "AZ",
                              "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                            },
                            "postalCode": {
                              "type": "string",
                              "maxLength": 14,
                              "example": "99501",
                              "description": "Postal/ZIP code."
                            },
                            "countryCode": {
                              "type": "string",
                              "example": "US",
                              "description": "Country code in alpha-2 format."
                            }
                          }
                        },
                        "phone": {
                          "type": "object",
                          "required": [
                            "countryCode",
                            "phoneNumber"
                          ],
                          "properties": {
                            "countryCode": {
                              "type": "string",
                              "example": "+1"
                            },
                            "phoneNumber": {
                              "type": "string",
                              "example": "7785462944"
                            }
                          },
                          "description": "Phone Number Information of the account\n"
                        },
                        "identities": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "idType",
                                  "idValue",
                                  "idIssuer"
                                ],
                                "properties": {
                                  "idType": {
                                    "type": "string",
                                    "example": "EIN",
                                    "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                  },
                                  "idDescription": {
                                    "type": "string",
                                    "example": "Employee Identification Number",
                                    "description": "Description of identification type e.g. Social Security Number"
                                  },
                                  "idIssuer": {
                                    "type": "string",
                                    "example": "US",
                                    "description": "Identification issuer country name e.g. US"
                                  },
                                  "idValue": {
                                    "type": "string",
                                    "example": "999999999",
                                    "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "businessType": {
                          "type": "string",
                          "example": "Privately Owned Business",
                          "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                        },
                        "legalStructure": {
                          "type": "string",
                          "example": "LLC",
                          "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                        },
                        "industryCategory": {
                          "type": "string",
                          "example": "Accommodation and Food Services",
                          "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                        },
                        "industryType": {
                          "type": "string",
                          "example": "Bed And Breakfast Inns",
                          "description": "Industry type.\n"
                        },
                        "significantOwnership": {
                          "type": "boolean",
                          "example": true,
                          "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                        },
                        "entitiesInOwnership": {
                          "type": "boolean",
                          "example": true,
                          "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                        },
                        "businessName": {
                          "type": "string",
                          "example": "Feltz Printing Service",
                          "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                        },
                        "businessAliasName": {
                          "type": "string",
                          "example": "Feltz Printing Service of New York",
                          "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                        },
                        "businessDescription": {
                          "type": "string",
                          "example": "Printing Service of New York",
                          "description": "The business’s description.\n"
                        },
                        "websiteAvailable": {
                          "type": "boolean",
                          "example": true,
                          "description": "Does your business have a website? e.g. true|false\n"
                        },
                        "website": {
                          "type": "string",
                          "example": "https://www.company.com",
                          "description": "Website of the client. website is required if websiteAvailable is true.\n"
                        },
                        "email": {
                          "type": "string",
                          "example": "client@company.com",
                          "description": "Email of the client.\n"
                        },
                        "countryOfFormation": {
                          "type": "string",
                          "example": "US",
                          "description": "Country code in alpha-2 format"
                        },
                        "yearOfFormation": {
                          "type": "string",
                          "example": "2020",
                          "description": "Year of formation. Max and Min length is 4.\n"
                        },
                        "parentClientId": {
                          "type": "string",
                          "description": "The parent (platform) relationship owner's ID."
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "parentClientId": {
                      "type": "string",
                      "example": "0006739851",
                      "description": "Client ID of the platform entity the client is onboarded to.\n"
                    },
                    "enablePayouts": {
                      "type": "boolean",
                      "example": true,
                      "description": "Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.\nThis flag will be set to FALSE until this process completes. Only present for clients.\n"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2021-11-17T10:04:37.000Z",
                      "description": "Date the profile was created.\n"
                    },
                    "profileStatus": {
                      "type": "string",
                      "description": "active | deleted"
                    },
                    "onboardingStatus": {
                      "type": "string",
                      "example": "In Progress, Completed, Failed",
                      "description": "The Client Onboarding Status"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1bd824ef-355d-496d-9272-900cfe4b95f9",
                      "description": "Client ID. The unique identifier for a client.\n"
                    },
                    "status": {
                      "type": "string",
                      "description": "active | deleted",
                      "example": "active"
                    },
                    "relatedParties": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "type": "object",
                                        "required": [
                                          "addressLine1",
                                          "city",
                                          "countryCode",
                                          "postalCode"
                                        ],
                                        "properties": {
                                          "addressType": {
                                            "type": "string",
                                            "example": "Principle Place Of Business",
                                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                          },
                                          "addressLine1": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "689 Main St",
                                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                          },
                                          "addressLine2": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "Opposite St. Andrews Church",
                                            "description": "addressLine2 has a maximum of 60 characters."
                                          },
                                          "addressLine3": {
                                            "type": "string",
                                            "maxLength": 60,
                                            "example": "Mini York",
                                            "description": "addressLine3 has a maximum of 60 characters."
                                          },
                                          "city": {
                                            "type": "string",
                                            "maxLength": 30,
                                            "example": "Anchorage",
                                            "description": "city has a maximum of 30 characters."
                                          },
                                          "state": {
                                            "type": "string",
                                            "example": "AZ",
                                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                          },
                                          "postalCode": {
                                            "type": "string",
                                            "maxLength": 14,
                                            "example": "99501",
                                            "description": "Postal/ZIP code."
                                          },
                                          "countryCode": {
                                            "type": "string",
                                            "example": "US",
                                            "description": "Country code in alpha-2 format."
                                          }
                                        }
                                      },
                                      "phone": {
                                        "type": "object",
                                        "required": [
                                          "countryCode",
                                          "phoneNumber"
                                        ],
                                        "properties": {
                                          "countryCode": {
                                            "type": "string",
                                            "example": "+1"
                                          },
                                          "phoneNumber": {
                                            "type": "string",
                                            "example": "7785462944"
                                          }
                                        },
                                        "description": "Phone Number Information of the account\n"
                                      },
                                      "identities": {
                                        "type": "array",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "idType",
                                                "idValue",
                                                "idIssuer"
                                              ],
                                              "properties": {
                                                "idType": {
                                                  "type": "string",
                                                  "example": "EIN",
                                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                                },
                                                "idDescription": {
                                                  "type": "string",
                                                  "example": "Employee Identification Number",
                                                  "description": "Description of identification type e.g. Social Security Number"
                                                },
                                                "idIssuer": {
                                                  "type": "string",
                                                  "example": "US",
                                                  "description": "Identification issuer country name e.g. US"
                                                },
                                                "idValue": {
                                                  "type": "string",
                                                  "example": "999999999",
                                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "businessName": {
                                        "type": "string",
                                        "example": "Feltz Printing Service",
                                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                      },
                                      "firstName": {
                                        "type": "string",
                                        "minLength": 2,
                                        "maxLength": 30,
                                        "example": "Lenna",
                                        "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                      },
                                      "middleName": {
                                        "type": "string",
                                        "maxLength": 30,
                                        "example": "More",
                                        "description": "Middle name of the individual in case of party type being an individual.\n"
                                      },
                                      "lastName": {
                                        "type": "string",
                                        "minLength": 2,
                                        "maxLength": 30,
                                        "example": "Paprocki",
                                        "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                      },
                                      "jobTitle": {
                                        "type": "string",
                                        "example": "CEO",
                                        "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                      },
                                      "jobTitleDescription": {
                                        "type": "string",
                                        "example": "Acting CEO",
                                        "maxLength": 50,
                                        "description": "In case on jobTitle is Other then Job title description is required.\n"
                                      },
                                      "birthDate": {
                                        "type": "string",
                                        "example": "1983-02-08T00:00:00.000Z",
                                        "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                      },
                                      "email": {
                                        "type": "string",
                                        "example": "client@company.com",
                                        "description": "Email of the individual.\n"
                                      },
                                      "natureOfOwnership": {
                                        "type": "string",
                                        "example": "Direct",
                                        "description": "Nature of ownership e.g. Direct|Indirect\n"
                                      },
                                      "soleOwner": {
                                        "type": "boolean"
                                      },
                                      "partyType": {
                                        "type": "string",
                                        "example": "Individual",
                                        "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                      },
                                      "partyRole": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "example": [
                                          "CONTROLLER",
                                          "OWNER"
                                        ],
                                        "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id",
                                  "partyType",
                                  "partyRole",
                                  "email"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "b98355d9-d193-4f50-9957-c699266b1530",
                                    "description": "Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.\n"
                                  },
                                  "status": {
                                    "type": "string",
                                    "description": "Status of the request. Can be active or deleted.",
                                    "example": "active"
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "EB"
                      ],
                      "description": "The products available for clients.\n"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PartyDetailBusinessRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "countryCode",
                      "postalCode"
                    ],
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "required": [
                      "countryCode",
                      "phoneNumber"
                    ],
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "idType",
                            "idValue",
                            "idIssuer"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "businessType": {
                    "type": "string",
                    "example": "Privately Owned Business",
                    "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                  },
                  "legalStructure": {
                    "type": "string",
                    "example": "LLC",
                    "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                  },
                  "industryCategory": {
                    "type": "string",
                    "example": "Accommodation and Food Services",
                    "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                  },
                  "industryType": {
                    "type": "string",
                    "example": "Bed And Breakfast Inns",
                    "description": "Industry type.\n"
                  },
                  "significantOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                  },
                  "entitiesInOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                  },
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                  },
                  "businessAliasName": {
                    "type": "string",
                    "example": "Feltz Printing Service of New York",
                    "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                  },
                  "businessDescription": {
                    "type": "string",
                    "example": "Printing Service of New York",
                    "description": "The business’s description.\n"
                  },
                  "websiteAvailable": {
                    "type": "boolean",
                    "example": true,
                    "description": "Does your business have a website? e.g. true|false\n"
                  },
                  "website": {
                    "type": "string",
                    "example": "https://www.company.com",
                    "description": "Website of the client. website is required if websiteAvailable is true.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the client.\n"
                  },
                  "countryOfFormation": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format"
                  },
                  "yearOfFormation": {
                    "type": "string",
                    "example": "2020",
                    "description": "Year of formation. Max and Min length is 4.\n"
                  },
                  "parentClientId": {
                    "type": "string",
                    "description": "The parent (platform) relationship owner's ID."
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "businessName",
              "businessType",
              "industryType",
              "industryCategory",
              "businessDescription",
              "countryOfFormation",
              "websiteAvailable",
              "yearOfFormation",
              "address",
              "phone",
              "identities"
            ]
          }
        ]
      },
      "EntityDetailBusinessRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "required": [
                          "addressLine1",
                          "city",
                          "countryCode",
                          "postalCode"
                        ],
                        "properties": {
                          "addressType": {
                            "type": "string",
                            "example": "Principle Place Of Business",
                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                          },
                          "addressLine1": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "689 Main St",
                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                          },
                          "addressLine2": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Opposite St. Andrews Church",
                            "description": "addressLine2 has a maximum of 60 characters."
                          },
                          "addressLine3": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Mini York",
                            "description": "addressLine3 has a maximum of 60 characters."
                          },
                          "city": {
                            "type": "string",
                            "maxLength": 30,
                            "example": "Anchorage",
                            "description": "city has a maximum of 30 characters."
                          },
                          "state": {
                            "type": "string",
                            "example": "AZ",
                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                          },
                          "postalCode": {
                            "type": "string",
                            "maxLength": 14,
                            "example": "99501",
                            "description": "Postal/ZIP code."
                          },
                          "countryCode": {
                            "type": "string",
                            "example": "US",
                            "description": "Country code in alpha-2 format."
                          }
                        }
                      },
                      "phone": {
                        "type": "object",
                        "required": [
                          "countryCode",
                          "phoneNumber"
                        ],
                        "properties": {
                          "countryCode": {
                            "type": "string",
                            "example": "+1"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "7785462944"
                          }
                        },
                        "description": "Phone Number Information of the account\n"
                      },
                      "identities": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "idType",
                                "idValue",
                                "idIssuer"
                              ],
                              "properties": {
                                "idType": {
                                  "type": "string",
                                  "example": "EIN",
                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                },
                                "idDescription": {
                                  "type": "string",
                                  "example": "Employee Identification Number",
                                  "description": "Description of identification type e.g. Social Security Number"
                                },
                                "idIssuer": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Identification issuer country name e.g. US"
                                },
                                "idValue": {
                                  "type": "string",
                                  "example": "999999999",
                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "businessType": {
                        "type": "string",
                        "example": "Privately Owned Business",
                        "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                      },
                      "legalStructure": {
                        "type": "string",
                        "example": "LLC",
                        "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                      },
                      "industryCategory": {
                        "type": "string",
                        "example": "Accommodation and Food Services",
                        "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                      },
                      "industryType": {
                        "type": "string",
                        "example": "Bed And Breakfast Inns",
                        "description": "Industry type.\n"
                      },
                      "significantOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                      },
                      "entitiesInOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                      },
                      "businessName": {
                        "type": "string",
                        "example": "Feltz Printing Service",
                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                      },
                      "businessAliasName": {
                        "type": "string",
                        "example": "Feltz Printing Service of New York",
                        "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                      },
                      "businessDescription": {
                        "type": "string",
                        "example": "Printing Service of New York",
                        "description": "The business’s description.\n"
                      },
                      "websiteAvailable": {
                        "type": "boolean",
                        "example": true,
                        "description": "Does your business have a website? e.g. true|false\n"
                      },
                      "website": {
                        "type": "string",
                        "example": "https://www.company.com",
                        "description": "Website of the client. website is required if websiteAvailable is true.\n"
                      },
                      "email": {
                        "type": "string",
                        "example": "client@company.com",
                        "description": "Email of the client.\n"
                      },
                      "countryOfFormation": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format"
                      },
                      "yearOfFormation": {
                        "type": "string",
                        "example": "2020",
                        "description": "Year of formation. Max and Min length is 4.\n"
                      },
                      "parentClientId": {
                        "type": "string",
                        "description": "The parent (platform) relationship owner's ID."
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "required": [
                  "businessName",
                  "businessType",
                  "industryType",
                  "industryCategory",
                  "businessDescription",
                  "countryOfFormation",
                  "websiteAvailable",
                  "yearOfFormation",
                  "address",
                  "phone",
                  "identities"
                ]
              }
            ]
          }
        ]
      },
      "RelatedPartyRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "countryCode",
                      "postalCode"
                    ],
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "required": [
                      "countryCode",
                      "phoneNumber"
                    ],
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "idType",
                            "idValue",
                            "idIssuer"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Lenna",
                    "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "More",
                    "description": "Middle name of the individual in case of party type being an individual.\n"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Paprocki",
                    "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "CEO",
                    "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                  },
                  "jobTitleDescription": {
                    "type": "string",
                    "example": "Acting CEO",
                    "maxLength": 50,
                    "description": "In case on jobTitle is Other then Job title description is required.\n"
                  },
                  "birthDate": {
                    "type": "string",
                    "example": "1983-02-08T00:00:00.000Z",
                    "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the individual.\n"
                  },
                  "natureOfOwnership": {
                    "type": "string",
                    "example": "Direct",
                    "description": "Nature of ownership e.g. Direct|Indirect\n"
                  },
                  "soleOwner": {
                    "type": "boolean"
                  },
                  "partyType": {
                    "type": "string",
                    "example": "Individual",
                    "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                  },
                  "partyRole": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CONTROLLER",
                      "OWNER"
                    ],
                    "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "birthDate",
              "firstName",
              "lastName",
              "partyType",
              "partyRole",
              "email"
            ]
          }
        ]
      },
      "RelatedPartiesRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "required": [
                          "addressLine1",
                          "city",
                          "countryCode",
                          "postalCode"
                        ],
                        "properties": {
                          "addressType": {
                            "type": "string",
                            "example": "Principle Place Of Business",
                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                          },
                          "addressLine1": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "689 Main St",
                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                          },
                          "addressLine2": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Opposite St. Andrews Church",
                            "description": "addressLine2 has a maximum of 60 characters."
                          },
                          "addressLine3": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Mini York",
                            "description": "addressLine3 has a maximum of 60 characters."
                          },
                          "city": {
                            "type": "string",
                            "maxLength": 30,
                            "example": "Anchorage",
                            "description": "city has a maximum of 30 characters."
                          },
                          "state": {
                            "type": "string",
                            "example": "AZ",
                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                          },
                          "postalCode": {
                            "type": "string",
                            "maxLength": 14,
                            "example": "99501",
                            "description": "Postal/ZIP code."
                          },
                          "countryCode": {
                            "type": "string",
                            "example": "US",
                            "description": "Country code in alpha-2 format."
                          }
                        }
                      },
                      "phone": {
                        "type": "object",
                        "required": [
                          "countryCode",
                          "phoneNumber"
                        ],
                        "properties": {
                          "countryCode": {
                            "type": "string",
                            "example": "+1"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "7785462944"
                          }
                        },
                        "description": "Phone Number Information of the account\n"
                      },
                      "identities": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "idType",
                                "idValue",
                                "idIssuer"
                              ],
                              "properties": {
                                "idType": {
                                  "type": "string",
                                  "example": "EIN",
                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                },
                                "idDescription": {
                                  "type": "string",
                                  "example": "Employee Identification Number",
                                  "description": "Description of identification type e.g. Social Security Number"
                                },
                                "idIssuer": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Identification issuer country name e.g. US"
                                },
                                "idValue": {
                                  "type": "string",
                                  "example": "999999999",
                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "businessName": {
                        "type": "string",
                        "example": "Feltz Printing Service",
                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                      },
                      "firstName": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 30,
                        "example": "Lenna",
                        "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                      },
                      "middleName": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "More",
                        "description": "Middle name of the individual in case of party type being an individual.\n"
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 30,
                        "example": "Paprocki",
                        "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                      },
                      "jobTitle": {
                        "type": "string",
                        "example": "CEO",
                        "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                      },
                      "jobTitleDescription": {
                        "type": "string",
                        "example": "Acting CEO",
                        "maxLength": 50,
                        "description": "In case on jobTitle is Other then Job title description is required.\n"
                      },
                      "birthDate": {
                        "type": "string",
                        "example": "1983-02-08T00:00:00.000Z",
                        "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                      },
                      "email": {
                        "type": "string",
                        "example": "client@company.com",
                        "description": "Email of the individual.\n"
                      },
                      "natureOfOwnership": {
                        "type": "string",
                        "example": "Direct",
                        "description": "Nature of ownership e.g. Direct|Indirect\n"
                      },
                      "soleOwner": {
                        "type": "boolean"
                      },
                      "partyType": {
                        "type": "string",
                        "example": "Individual",
                        "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                      },
                      "partyRole": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "CONTROLLER",
                          "OWNER"
                        ],
                        "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "required": [
                  "birthDate",
                  "firstName",
                  "lastName",
                  "partyType",
                  "partyRole",
                  "email"
                ]
              }
            ]
          }
        ]
      },
      "CreateClientRequest": {
        "type": "object",
        "allOf": [
          {
            "allOf": [
              {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "object",
                            "required": [
                              "addressLine1",
                              "city",
                              "countryCode",
                              "postalCode"
                            ],
                            "properties": {
                              "addressType": {
                                "type": "string",
                                "example": "Principle Place Of Business",
                                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                              },
                              "addressLine1": {
                                "type": "string",
                                "maxLength": 60,
                                "example": "689 Main St",
                                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                              },
                              "addressLine2": {
                                "type": "string",
                                "maxLength": 60,
                                "example": "Opposite St. Andrews Church",
                                "description": "addressLine2 has a maximum of 60 characters."
                              },
                              "addressLine3": {
                                "type": "string",
                                "maxLength": 60,
                                "example": "Mini York",
                                "description": "addressLine3 has a maximum of 60 characters."
                              },
                              "city": {
                                "type": "string",
                                "maxLength": 30,
                                "example": "Anchorage",
                                "description": "city has a maximum of 30 characters."
                              },
                              "state": {
                                "type": "string",
                                "example": "AZ",
                                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                              },
                              "postalCode": {
                                "type": "string",
                                "maxLength": 14,
                                "example": "99501",
                                "description": "Postal/ZIP code."
                              },
                              "countryCode": {
                                "type": "string",
                                "example": "US",
                                "description": "Country code in alpha-2 format."
                              }
                            }
                          },
                          "phone": {
                            "type": "object",
                            "required": [
                              "countryCode",
                              "phoneNumber"
                            ],
                            "properties": {
                              "countryCode": {
                                "type": "string",
                                "example": "+1"
                              },
                              "phoneNumber": {
                                "type": "string",
                                "example": "7785462944"
                              }
                            },
                            "description": "Phone Number Information of the account\n"
                          },
                          "identities": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "idType",
                                    "idValue",
                                    "idIssuer"
                                  ],
                                  "properties": {
                                    "idType": {
                                      "type": "string",
                                      "example": "EIN",
                                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                    },
                                    "idDescription": {
                                      "type": "string",
                                      "example": "Employee Identification Number",
                                      "description": "Description of identification type e.g. Social Security Number"
                                    },
                                    "idIssuer": {
                                      "type": "string",
                                      "example": "US",
                                      "description": "Identification issuer country name e.g. US"
                                    },
                                    "idValue": {
                                      "type": "string",
                                      "example": "999999999",
                                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "businessType": {
                            "type": "string",
                            "example": "Privately Owned Business",
                            "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                          },
                          "legalStructure": {
                            "type": "string",
                            "example": "LLC",
                            "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                          },
                          "industryCategory": {
                            "type": "string",
                            "example": "Accommodation and Food Services",
                            "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                          },
                          "industryType": {
                            "type": "string",
                            "example": "Bed And Breakfast Inns",
                            "description": "Industry type.\n"
                          },
                          "significantOwnership": {
                            "type": "boolean",
                            "example": true,
                            "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                          },
                          "entitiesInOwnership": {
                            "type": "boolean",
                            "example": true,
                            "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                          },
                          "businessName": {
                            "type": "string",
                            "example": "Feltz Printing Service",
                            "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                          },
                          "businessAliasName": {
                            "type": "string",
                            "example": "Feltz Printing Service of New York",
                            "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                          },
                          "businessDescription": {
                            "type": "string",
                            "example": "Printing Service of New York",
                            "description": "The business’s description.\n"
                          },
                          "websiteAvailable": {
                            "type": "boolean",
                            "example": true,
                            "description": "Does your business have a website? e.g. true|false\n"
                          },
                          "website": {
                            "type": "string",
                            "example": "https://www.company.com",
                            "description": "Website of the client. website is required if websiteAvailable is true.\n"
                          },
                          "email": {
                            "type": "string",
                            "example": "client@company.com",
                            "description": "Email of the client.\n"
                          },
                          "countryOfFormation": {
                            "type": "string",
                            "example": "US",
                            "description": "Country code in alpha-2 format"
                          },
                          "yearOfFormation": {
                            "type": "string",
                            "example": "2020",
                            "description": "Year of formation. Max and Min length is 4.\n"
                          },
                          "parentClientId": {
                            "type": "string",
                            "description": "The parent (platform) relationship owner's ID."
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "required": [
                      "businessName",
                      "businessType",
                      "industryType",
                      "industryCategory",
                      "businessDescription",
                      "countryOfFormation",
                      "websiteAvailable",
                      "yearOfFormation",
                      "address",
                      "phone",
                      "identities"
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "relatedParties",
              "products"
            ],
            "properties": {
              "relatedParties": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "type": "object",
                                  "required": [
                                    "addressLine1",
                                    "city",
                                    "countryCode",
                                    "postalCode"
                                  ],
                                  "properties": {
                                    "addressType": {
                                      "type": "string",
                                      "example": "Principle Place Of Business",
                                      "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                    },
                                    "addressLine1": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "689 Main St",
                                      "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                    },
                                    "addressLine2": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Opposite St. Andrews Church",
                                      "description": "addressLine2 has a maximum of 60 characters."
                                    },
                                    "addressLine3": {
                                      "type": "string",
                                      "maxLength": 60,
                                      "example": "Mini York",
                                      "description": "addressLine3 has a maximum of 60 characters."
                                    },
                                    "city": {
                                      "type": "string",
                                      "maxLength": 30,
                                      "example": "Anchorage",
                                      "description": "city has a maximum of 30 characters."
                                    },
                                    "state": {
                                      "type": "string",
                                      "example": "AZ",
                                      "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                    },
                                    "postalCode": {
                                      "type": "string",
                                      "maxLength": 14,
                                      "example": "99501",
                                      "description": "Postal/ZIP code."
                                    },
                                    "countryCode": {
                                      "type": "string",
                                      "example": "US",
                                      "description": "Country code in alpha-2 format."
                                    }
                                  }
                                },
                                "phone": {
                                  "type": "object",
                                  "required": [
                                    "countryCode",
                                    "phoneNumber"
                                  ],
                                  "properties": {
                                    "countryCode": {
                                      "type": "string",
                                      "example": "+1"
                                    },
                                    "phoneNumber": {
                                      "type": "string",
                                      "example": "7785462944"
                                    }
                                  },
                                  "description": "Phone Number Information of the account\n"
                                },
                                "identities": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "required": [
                                          "idType",
                                          "idValue",
                                          "idIssuer"
                                        ],
                                        "properties": {
                                          "idType": {
                                            "type": "string",
                                            "example": "EIN",
                                            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                          },
                                          "idDescription": {
                                            "type": "string",
                                            "example": "Employee Identification Number",
                                            "description": "Description of identification type e.g. Social Security Number"
                                          },
                                          "idIssuer": {
                                            "type": "string",
                                            "example": "US",
                                            "description": "Identification issuer country name e.g. US"
                                          },
                                          "idValue": {
                                            "type": "string",
                                            "example": "999999999",
                                            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "businessName": {
                                  "type": "string",
                                  "example": "Feltz Printing Service",
                                  "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                                },
                                "firstName": {
                                  "type": "string",
                                  "minLength": 2,
                                  "maxLength": 30,
                                  "example": "Lenna",
                                  "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                },
                                "middleName": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "More",
                                  "description": "Middle name of the individual in case of party type being an individual.\n"
                                },
                                "lastName": {
                                  "type": "string",
                                  "minLength": 2,
                                  "maxLength": 30,
                                  "example": "Paprocki",
                                  "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                                },
                                "jobTitle": {
                                  "type": "string",
                                  "example": "CEO",
                                  "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                                },
                                "jobTitleDescription": {
                                  "type": "string",
                                  "example": "Acting CEO",
                                  "maxLength": 50,
                                  "description": "In case on jobTitle is Other then Job title description is required.\n"
                                },
                                "birthDate": {
                                  "type": "string",
                                  "example": "1983-02-08T00:00:00.000Z",
                                  "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                                },
                                "email": {
                                  "type": "string",
                                  "example": "client@company.com",
                                  "description": "Email of the individual.\n"
                                },
                                "natureOfOwnership": {
                                  "type": "string",
                                  "example": "Direct",
                                  "description": "Nature of ownership e.g. Direct|Indirect\n"
                                },
                                "soleOwner": {
                                  "type": "boolean"
                                },
                                "partyType": {
                                  "type": "string",
                                  "example": "Individual",
                                  "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                                },
                                "partyRole": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "CONTROLLER",
                                    "OWNER"
                                  ],
                                  "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "required": [
                            "birthDate",
                            "firstName",
                            "lastName",
                            "partyType",
                            "partyRole",
                            "email"
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "products": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "EB"
                ],
                "description": "The products available for clients.\n"
              }
            }
          }
        ]
      },
      "UpdateAddressDto": {
        "type": "object",
        "properties": {
          "addressType": {
            "type": "string",
            "example": "Principle Place Of Business",
            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
          },
          "addressLine1": {
            "type": "string",
            "maxLength": 60,
            "example": "689 Main St",
            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
          },
          "addressLine2": {
            "type": "string",
            "maxLength": 60,
            "example": "Opposite St. Andrews Church",
            "description": "addressLine2 has a maximum of 60 characters."
          },
          "addressLine3": {
            "type": "string",
            "maxLength": 60,
            "example": "Mini York",
            "description": "addressLine3 has a maximum of 60 characters."
          },
          "city": {
            "type": "string",
            "maxLength": 30,
            "example": "Anchorage",
            "description": "city has a maximum of 30 characters."
          },
          "state": {
            "type": "string",
            "example": "AZ",
            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
          },
          "postalCode": {
            "type": "string",
            "maxLength": 14,
            "example": "99501",
            "description": "Postal/ZIP code."
          },
          "countryCode": {
            "type": "string",
            "example": "US",
            "description": "Country code in alpha-2 format."
          }
        }
      },
      "UpdatePhone": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "example": "+1"
          },
          "phoneNumber": {
            "type": "string",
            "example": "7785462944"
          }
        },
        "description": "Phone Number Information of the account\n"
      },
      "UpdateIdentityDTO": {
        "type": "object",
        "required": [
          "action",
          "idType",
          "idIssuer",
          "idValue"
        ],
        "properties": {
          "idType": {
            "type": "string",
            "example": "EIN",
            "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
          },
          "idDescription": {
            "type": "string",
            "example": "Employee Identification Number",
            "description": "Description of identification type e.g. Social Security Number"
          },
          "idIssuer": {
            "type": "string",
            "example": "US",
            "description": "Identification issuer country name e.g. US"
          },
          "idValue": {
            "type": "string",
            "example": "999999999",
            "description": "Value of the identification type. EIN/SSN must be of 9 digits."
          },
          "action": {
            "type": "string",
            "example": "ADD",
            "description": "The action like ADD, UPDATE, REMOVE\n"
          }
        }
      },
      "UpdatePartyDetailCommon": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "properties": {
              "addressType": {
                "type": "string",
                "example": "Principle Place Of Business",
                "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
              },
              "addressLine1": {
                "type": "string",
                "maxLength": 60,
                "example": "689 Main St",
                "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
              },
              "addressLine2": {
                "type": "string",
                "maxLength": 60,
                "example": "Opposite St. Andrews Church",
                "description": "addressLine2 has a maximum of 60 characters."
              },
              "addressLine3": {
                "type": "string",
                "maxLength": 60,
                "example": "Mini York",
                "description": "addressLine3 has a maximum of 60 characters."
              },
              "city": {
                "type": "string",
                "maxLength": 30,
                "example": "Anchorage",
                "description": "city has a maximum of 30 characters."
              },
              "state": {
                "type": "string",
                "example": "AZ",
                "description": "State code in alpha-2 format. State is mandatory for countries like United States."
              },
              "postalCode": {
                "type": "string",
                "maxLength": 14,
                "example": "99501",
                "description": "Postal/ZIP code."
              },
              "countryCode": {
                "type": "string",
                "example": "US",
                "description": "Country code in alpha-2 format."
              }
            }
          },
          "phone": {
            "type": "object",
            "properties": {
              "countryCode": {
                "type": "string",
                "example": "+1"
              },
              "phoneNumber": {
                "type": "string",
                "example": "7785462944"
              }
            },
            "description": "Phone Number Information of the account\n"
          },
          "identities": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "action",
                    "idType",
                    "idIssuer",
                    "idValue"
                  ],
                  "properties": {
                    "idType": {
                      "type": "string",
                      "example": "EIN",
                      "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                    },
                    "idDescription": {
                      "type": "string",
                      "example": "Employee Identification Number",
                      "description": "Description of identification type e.g. Social Security Number"
                    },
                    "idIssuer": {
                      "type": "string",
                      "example": "US",
                      "description": "Identification issuer country name e.g. US"
                    },
                    "idValue": {
                      "type": "string",
                      "example": "999999999",
                      "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                    },
                    "action": {
                      "type": "string",
                      "example": "ADD",
                      "description": "The action like ADD, UPDATE, REMOVE\n"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UpdatePartyDetailBusiness": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "properties": {
                  "addressType": {
                    "type": "string",
                    "example": "Principle Place Of Business",
                    "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                  },
                  "addressLine1": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "689 Main St",
                    "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                  },
                  "addressLine2": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Opposite St. Andrews Church",
                    "description": "addressLine2 has a maximum of 60 characters."
                  },
                  "addressLine3": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Mini York",
                    "description": "addressLine3 has a maximum of 60 characters."
                  },
                  "city": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "Anchorage",
                    "description": "city has a maximum of 30 characters."
                  },
                  "state": {
                    "type": "string",
                    "example": "AZ",
                    "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 14,
                    "example": "99501",
                    "description": "Postal/ZIP code."
                  },
                  "countryCode": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format."
                  }
                }
              },
              "phone": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "type": "string",
                    "example": "+1"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "7785462944"
                  }
                },
                "description": "Phone Number Information of the account\n"
              },
              "identities": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "action",
                        "idType",
                        "idIssuer",
                        "idValue"
                      ],
                      "properties": {
                        "idType": {
                          "type": "string",
                          "example": "EIN",
                          "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                        },
                        "idDescription": {
                          "type": "string",
                          "example": "Employee Identification Number",
                          "description": "Description of identification type e.g. Social Security Number"
                        },
                        "idIssuer": {
                          "type": "string",
                          "example": "US",
                          "description": "Identification issuer country name e.g. US"
                        },
                        "idValue": {
                          "type": "string",
                          "example": "999999999",
                          "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                        },
                        "action": {
                          "type": "string",
                          "example": "ADD",
                          "description": "The action like ADD, UPDATE, REMOVE\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "businessType": {
                "type": "string",
                "example": "Privately Owned Business",
                "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
              },
              "legalStructure": {
                "type": "string",
                "example": "LLC",
                "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
              },
              "industryCategory": {
                "type": "string",
                "example": "Accommodation and Food Services",
                "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
              },
              "industryType": {
                "type": "string",
                "example": "Bed And Breakfast Inns",
                "description": "Industry type.\n"
              },
              "significantOwnership": {
                "type": "boolean",
                "example": true,
                "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
              },
              "entitiesInOwnership": {
                "type": "boolean",
                "example": true,
                "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
              },
              "businessName": {
                "type": "string",
                "example": "Feltz Printing Service",
                "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
              },
              "businessAliasName": {
                "type": "string",
                "example": "Feltz Printing Service of New York",
                "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
              },
              "businessDescription": {
                "type": "string",
                "example": "Printing Service of New York",
                "description": "The business’s description.\n"
              },
              "websiteAvailable": {
                "type": "boolean",
                "example": true,
                "description": "Does your business have a website? e.g. true|false\n"
              },
              "website": {
                "type": "string",
                "example": "https://www.company.com",
                "description": "Website of the client. website is required if websiteAvailable is true.\n"
              },
              "email": {
                "type": "string",
                "example": "client@company.com",
                "description": "Email of the client.\n"
              },
              "countryOfFormation": {
                "type": "string",
                "example": "US",
                "description": "Country code in alpha-2 format"
              },
              "yearOfFormation": {
                "type": "string",
                "example": "2020",
                "description": "Year of formation. Max and Min length is 4.\n"
              }
            }
          }
        ]
      },
      "UpdateEntityDetailBusinessRequest": {
        "type": "object",
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "action",
                            "idType",
                            "idIssuer",
                            "idValue"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            },
                            "action": {
                              "type": "string",
                              "example": "ADD",
                              "description": "The action like ADD, UPDATE, REMOVE\n"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "businessType": {
                    "type": "string",
                    "example": "Privately Owned Business",
                    "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                  },
                  "legalStructure": {
                    "type": "string",
                    "example": "LLC",
                    "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                  },
                  "industryCategory": {
                    "type": "string",
                    "example": "Accommodation and Food Services",
                    "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                  },
                  "industryType": {
                    "type": "string",
                    "example": "Bed And Breakfast Inns",
                    "description": "Industry type.\n"
                  },
                  "significantOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                  },
                  "entitiesInOwnership": {
                    "type": "boolean",
                    "example": true,
                    "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                  },
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                  },
                  "businessAliasName": {
                    "type": "string",
                    "example": "Feltz Printing Service of New York",
                    "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                  },
                  "businessDescription": {
                    "type": "string",
                    "example": "Printing Service of New York",
                    "description": "The business’s description.\n"
                  },
                  "websiteAvailable": {
                    "type": "boolean",
                    "example": true,
                    "description": "Does your business have a website? e.g. true|false\n"
                  },
                  "website": {
                    "type": "string",
                    "example": "https://www.company.com",
                    "description": "Website of the client. website is required if websiteAvailable is true.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the client.\n"
                  },
                  "countryOfFormation": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format"
                  },
                  "yearOfFormation": {
                    "type": "string",
                    "example": "2020",
                    "description": "Year of formation. Max and Min length is 4.\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "1234567891",
                "description": "Client id, that uniquely identifies the client.\n"
              }
            }
          }
        ]
      },
      "UpdateRelatedPartyRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "properties": {
                  "addressType": {
                    "type": "string",
                    "example": "Principle Place Of Business",
                    "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                  },
                  "addressLine1": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "689 Main St",
                    "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                  },
                  "addressLine2": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Opposite St. Andrews Church",
                    "description": "addressLine2 has a maximum of 60 characters."
                  },
                  "addressLine3": {
                    "type": "string",
                    "maxLength": 60,
                    "example": "Mini York",
                    "description": "addressLine3 has a maximum of 60 characters."
                  },
                  "city": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "Anchorage",
                    "description": "city has a maximum of 30 characters."
                  },
                  "state": {
                    "type": "string",
                    "example": "AZ",
                    "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 14,
                    "example": "99501",
                    "description": "Postal/ZIP code."
                  },
                  "countryCode": {
                    "type": "string",
                    "example": "US",
                    "description": "Country code in alpha-2 format."
                  }
                }
              },
              "phone": {
                "type": "object",
                "properties": {
                  "countryCode": {
                    "type": "string",
                    "example": "+1"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "7785462944"
                  }
                },
                "description": "Phone Number Information of the account\n"
              },
              "identities": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "action",
                        "idType",
                        "idIssuer",
                        "idValue"
                      ],
                      "properties": {
                        "idType": {
                          "type": "string",
                          "example": "EIN",
                          "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                        },
                        "idDescription": {
                          "type": "string",
                          "example": "Employee Identification Number",
                          "description": "Description of identification type e.g. Social Security Number"
                        },
                        "idIssuer": {
                          "type": "string",
                          "example": "US",
                          "description": "Identification issuer country name e.g. US"
                        },
                        "idValue": {
                          "type": "string",
                          "example": "999999999",
                          "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                        },
                        "action": {
                          "type": "string",
                          "example": "ADD",
                          "description": "The action like ADD, UPDATE, REMOVE\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
              },
              "businessName": {
                "type": "string",
                "example": "Feltz Printing Service",
                "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
              },
              "firstName": {
                "type": "string",
                "minLength": 2,
                "maxLength": 30,
                "example": "Lenna",
                "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
              },
              "middleName": {
                "type": "string",
                "maxLength": 30,
                "example": "More",
                "description": "Middle name of the individual in case of party type being an individual.\n"
              },
              "lastName": {
                "type": "string",
                "minLength": 2,
                "maxLength": 30,
                "example": "Paprocki",
                "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
              },
              "jobTitle": {
                "type": "string",
                "example": "CEO",
                "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
              },
              "jobTitleDescription": {
                "type": "string",
                "example": "Acting CEO",
                "maxLength": 50,
                "description": "In case on jobTitle is Other then Job title description is required.\n"
              },
              "birthDate": {
                "type": "string",
                "example": "1983-02-08T00:00:00.000Z",
                "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
              },
              "email": {
                "type": "string",
                "example": "client@company.com",
                "description": "Email of the individual.\n"
              },
              "natureOfOwnership": {
                "type": "string",
                "example": "Direct",
                "description": "Nature of ownership e.g. Direct|Indirect\n"
              },
              "soleOwner": {
                "type": "boolean"
              },
              "partyType": {
                "type": "string",
                "example": "Individual",
                "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
              },
              "partyRole": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "CONTROLLER",
                  "OWNER"
                ],
                "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
              }
            }
          }
        ]
      },
      "UpdateRelatedPartiesRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "action",
                            "idType",
                            "idIssuer",
                            "idValue"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            },
                            "action": {
                              "type": "string",
                              "example": "ADD",
                              "description": "The action like ADD, UPDATE, REMOVE\n"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                    "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                  },
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Lenna",
                    "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "More",
                    "description": "Middle name of the individual in case of party type being an individual.\n"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Paprocki",
                    "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "CEO",
                    "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                  },
                  "jobTitleDescription": {
                    "type": "string",
                    "example": "Acting CEO",
                    "maxLength": 50,
                    "description": "In case on jobTitle is Other then Job title description is required.\n"
                  },
                  "birthDate": {
                    "type": "string",
                    "example": "1983-02-08T00:00:00.000Z",
                    "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the individual.\n"
                  },
                  "natureOfOwnership": {
                    "type": "string",
                    "example": "Direct",
                    "description": "Nature of ownership e.g. Direct|Indirect\n"
                  },
                  "soleOwner": {
                    "type": "boolean"
                  },
                  "partyType": {
                    "type": "string",
                    "example": "Individual",
                    "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                  },
                  "partyRole": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CONTROLLER",
                      "OWNER"
                    ],
                    "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "type": "string",
                "example": "ADD",
                "description": "The action like ADD, UPDATE, REMOVE\n"
              }
            }
          }
        ]
      },
      "UpdateClientRequest": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "properties": {
                          "addressType": {
                            "type": "string",
                            "example": "Principle Place Of Business",
                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                          },
                          "addressLine1": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "689 Main St",
                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                          },
                          "addressLine2": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Opposite St. Andrews Church",
                            "description": "addressLine2 has a maximum of 60 characters."
                          },
                          "addressLine3": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Mini York",
                            "description": "addressLine3 has a maximum of 60 characters."
                          },
                          "city": {
                            "type": "string",
                            "maxLength": 30,
                            "example": "Anchorage",
                            "description": "city has a maximum of 30 characters."
                          },
                          "state": {
                            "type": "string",
                            "example": "AZ",
                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                          },
                          "postalCode": {
                            "type": "string",
                            "maxLength": 14,
                            "example": "99501",
                            "description": "Postal/ZIP code."
                          },
                          "countryCode": {
                            "type": "string",
                            "example": "US",
                            "description": "Country code in alpha-2 format."
                          }
                        }
                      },
                      "phone": {
                        "type": "object",
                        "properties": {
                          "countryCode": {
                            "type": "string",
                            "example": "+1"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "7785462944"
                          }
                        },
                        "description": "Phone Number Information of the account\n"
                      },
                      "identities": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "action",
                                "idType",
                                "idIssuer",
                                "idValue"
                              ],
                              "properties": {
                                "idType": {
                                  "type": "string",
                                  "example": "EIN",
                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                },
                                "idDescription": {
                                  "type": "string",
                                  "example": "Employee Identification Number",
                                  "description": "Description of identification type e.g. Social Security Number"
                                },
                                "idIssuer": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Identification issuer country name e.g. US"
                                },
                                "idValue": {
                                  "type": "string",
                                  "example": "999999999",
                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                },
                                "action": {
                                  "type": "string",
                                  "example": "ADD",
                                  "description": "The action like ADD, UPDATE, REMOVE\n"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "businessType": {
                        "type": "string",
                        "example": "Privately Owned Business",
                        "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                      },
                      "legalStructure": {
                        "type": "string",
                        "example": "LLC",
                        "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                      },
                      "industryCategory": {
                        "type": "string",
                        "example": "Accommodation and Food Services",
                        "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                      },
                      "industryType": {
                        "type": "string",
                        "example": "Bed And Breakfast Inns",
                        "description": "Industry type.\n"
                      },
                      "significantOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                      },
                      "entitiesInOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                      },
                      "businessName": {
                        "type": "string",
                        "example": "Feltz Printing Service",
                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                      },
                      "businessAliasName": {
                        "type": "string",
                        "example": "Feltz Printing Service of New York",
                        "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                      },
                      "businessDescription": {
                        "type": "string",
                        "example": "Printing Service of New York",
                        "description": "The business’s description.\n"
                      },
                      "websiteAvailable": {
                        "type": "boolean",
                        "example": true,
                        "description": "Does your business have a website? e.g. true|false\n"
                      },
                      "website": {
                        "type": "string",
                        "example": "https://www.company.com",
                        "description": "Website of the client. website is required if websiteAvailable is true.\n"
                      },
                      "email": {
                        "type": "string",
                        "example": "client@company.com",
                        "description": "Email of the client.\n"
                      },
                      "countryOfFormation": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format"
                      },
                      "yearOfFormation": {
                        "type": "string",
                        "example": "2020",
                        "description": "Year of formation. Max and Min length is 4.\n"
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234567891",
                    "description": "Client id, that uniquely identifies the client.\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "relatedParties": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "object",
                              "properties": {
                                "addressType": {
                                  "type": "string",
                                  "example": "Principle Place Of Business",
                                  "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                },
                                "addressLine1": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "689 Main St",
                                  "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Opposite St. Andrews Church",
                                  "description": "addressLine2 has a maximum of 60 characters."
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Mini York",
                                  "description": "addressLine3 has a maximum of 60 characters."
                                },
                                "city": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "Anchorage",
                                  "description": "city has a maximum of 30 characters."
                                },
                                "state": {
                                  "type": "string",
                                  "example": "AZ",
                                  "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "maxLength": 14,
                                  "example": "99501",
                                  "description": "Postal/ZIP code."
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format."
                                }
                              }
                            },
                            "phone": {
                              "type": "object",
                              "properties": {
                                "countryCode": {
                                  "type": "string",
                                  "example": "+1"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "7785462944"
                                }
                              },
                              "description": "Phone Number Information of the account\n"
                            },
                            "identities": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "action",
                                      "idType",
                                      "idIssuer",
                                      "idValue"
                                    ],
                                    "properties": {
                                      "idType": {
                                        "type": "string",
                                        "example": "EIN",
                                        "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                      },
                                      "idDescription": {
                                        "type": "string",
                                        "example": "Employee Identification Number",
                                        "description": "Description of identification type e.g. Social Security Number"
                                      },
                                      "idIssuer": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Identification issuer country name e.g. US"
                                      },
                                      "idValue": {
                                        "type": "string",
                                        "example": "999999999",
                                        "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                      },
                                      "action": {
                                        "type": "string",
                                        "example": "ADD",
                                        "description": "The action like ADD, UPDATE, REMOVE\n"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                              "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                            },
                            "businessName": {
                              "type": "string",
                              "example": "Feltz Printing Service",
                              "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                            },
                            "firstName": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 30,
                              "example": "Lenna",
                              "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                            },
                            "middleName": {
                              "type": "string",
                              "maxLength": 30,
                              "example": "More",
                              "description": "Middle name of the individual in case of party type being an individual.\n"
                            },
                            "lastName": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 30,
                              "example": "Paprocki",
                              "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                            },
                            "jobTitle": {
                              "type": "string",
                              "example": "CEO",
                              "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                            },
                            "jobTitleDescription": {
                              "type": "string",
                              "example": "Acting CEO",
                              "maxLength": 50,
                              "description": "In case on jobTitle is Other then Job title description is required.\n"
                            },
                            "birthDate": {
                              "type": "string",
                              "example": "1983-02-08T00:00:00.000Z",
                              "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                            },
                            "email": {
                              "type": "string",
                              "example": "client@company.com",
                              "description": "Email of the individual.\n"
                            },
                            "natureOfOwnership": {
                              "type": "string",
                              "example": "Direct",
                              "description": "Nature of ownership e.g. Direct|Indirect\n"
                            },
                            "soleOwner": {
                              "type": "boolean"
                            },
                            "partyType": {
                              "type": "string",
                              "example": "Individual",
                              "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                            },
                            "partyRole": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "CONTROLLER",
                                "OWNER"
                              ],
                              "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": [
                        "action"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "example": "ADD",
                          "description": "The action like ADD, UPDATE, REMOVE\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "UpdateRelatedPartiesResponse": {
        "type": "object",
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "addressType": {
                        "type": "string",
                        "example": "Principle Place Of Business",
                        "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                      },
                      "addressLine1": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "689 Main St",
                        "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                      },
                      "addressLine2": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Opposite St. Andrews Church",
                        "description": "addressLine2 has a maximum of 60 characters."
                      },
                      "addressLine3": {
                        "type": "string",
                        "maxLength": 60,
                        "example": "Mini York",
                        "description": "addressLine3 has a maximum of 60 characters."
                      },
                      "city": {
                        "type": "string",
                        "maxLength": 30,
                        "example": "Anchorage",
                        "description": "city has a maximum of 30 characters."
                      },
                      "state": {
                        "type": "string",
                        "example": "AZ",
                        "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                      },
                      "postalCode": {
                        "type": "string",
                        "maxLength": 14,
                        "example": "99501",
                        "description": "Postal/ZIP code."
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format."
                      }
                    }
                  },
                  "phone": {
                    "type": "object",
                    "properties": {
                      "countryCode": {
                        "type": "string",
                        "example": "+1"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "example": "7785462944"
                      }
                    },
                    "description": "Phone Number Information of the account\n"
                  },
                  "identities": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "action",
                            "idType",
                            "idIssuer",
                            "idValue"
                          ],
                          "properties": {
                            "idType": {
                              "type": "string",
                              "example": "EIN",
                              "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                            },
                            "idDescription": {
                              "type": "string",
                              "example": "Employee Identification Number",
                              "description": "Description of identification type e.g. Social Security Number"
                            },
                            "idIssuer": {
                              "type": "string",
                              "example": "US",
                              "description": "Identification issuer country name e.g. US"
                            },
                            "idValue": {
                              "type": "string",
                              "example": "999999999",
                              "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                            },
                            "action": {
                              "type": "string",
                              "example": "ADD",
                              "description": "The action like ADD, UPDATE, REMOVE\n"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                    "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                  },
                  "businessName": {
                    "type": "string",
                    "example": "Feltz Printing Service",
                    "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Lenna",
                    "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 30,
                    "example": "More",
                    "description": "Middle name of the individual in case of party type being an individual.\n"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 30,
                    "example": "Paprocki",
                    "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "CEO",
                    "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                  },
                  "jobTitleDescription": {
                    "type": "string",
                    "example": "Acting CEO",
                    "maxLength": 50,
                    "description": "In case on jobTitle is Other then Job title description is required.\n"
                  },
                  "birthDate": {
                    "type": "string",
                    "example": "1983-02-08T00:00:00.000Z",
                    "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                  },
                  "email": {
                    "type": "string",
                    "example": "client@company.com",
                    "description": "Email of the individual.\n"
                  },
                  "natureOfOwnership": {
                    "type": "string",
                    "example": "Direct",
                    "description": "Nature of ownership e.g. Direct|Indirect\n"
                  },
                  "soleOwner": {
                    "type": "boolean"
                  },
                  "partyType": {
                    "type": "string",
                    "example": "Individual",
                    "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                  },
                  "partyRole": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CONTROLLER",
                      "OWNER"
                    ],
                    "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "1234567891",
                "description": "Client id, that uniquely identifies the client.\n"
              }
            }
          }
        ]
      },
      "UpdateClientResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "properties": {
                          "addressType": {
                            "type": "string",
                            "example": "Principle Place Of Business",
                            "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                          },
                          "addressLine1": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "689 Main St",
                            "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                          },
                          "addressLine2": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Opposite St. Andrews Church",
                            "description": "addressLine2 has a maximum of 60 characters."
                          },
                          "addressLine3": {
                            "type": "string",
                            "maxLength": 60,
                            "example": "Mini York",
                            "description": "addressLine3 has a maximum of 60 characters."
                          },
                          "city": {
                            "type": "string",
                            "maxLength": 30,
                            "example": "Anchorage",
                            "description": "city has a maximum of 30 characters."
                          },
                          "state": {
                            "type": "string",
                            "example": "AZ",
                            "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                          },
                          "postalCode": {
                            "type": "string",
                            "maxLength": 14,
                            "example": "99501",
                            "description": "Postal/ZIP code."
                          },
                          "countryCode": {
                            "type": "string",
                            "example": "US",
                            "description": "Country code in alpha-2 format."
                          }
                        }
                      },
                      "phone": {
                        "type": "object",
                        "properties": {
                          "countryCode": {
                            "type": "string",
                            "example": "+1"
                          },
                          "phoneNumber": {
                            "type": "string",
                            "example": "7785462944"
                          }
                        },
                        "description": "Phone Number Information of the account\n"
                      },
                      "identities": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "action",
                                "idType",
                                "idIssuer",
                                "idValue"
                              ],
                              "properties": {
                                "idType": {
                                  "type": "string",
                                  "example": "EIN",
                                  "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                },
                                "idDescription": {
                                  "type": "string",
                                  "example": "Employee Identification Number",
                                  "description": "Description of identification type e.g. Social Security Number"
                                },
                                "idIssuer": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Identification issuer country name e.g. US"
                                },
                                "idValue": {
                                  "type": "string",
                                  "example": "999999999",
                                  "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                },
                                "action": {
                                  "type": "string",
                                  "example": "ADD",
                                  "description": "The action like ADD, UPDATE, REMOVE\n"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "businessType": {
                        "type": "string",
                        "example": "Privately Owned Business",
                        "description": "The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship\n"
                      },
                      "legalStructure": {
                        "type": "string",
                        "example": "LLC",
                        "description": "Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.\n"
                      },
                      "industryCategory": {
                        "type": "string",
                        "example": "Accommodation and Food Services",
                        "description": "Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade\n"
                      },
                      "industryType": {
                        "type": "string",
                        "example": "Bed And Breakfast Inns",
                        "description": "Industry type.\n"
                      },
                      "significantOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.\n"
                      },
                      "entitiesInOwnership": {
                        "type": "boolean",
                        "example": true,
                        "description": "If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.\n"
                      },
                      "businessName": {
                        "type": "string",
                        "example": "Feltz Printing Service",
                        "description": "The business’s legal name. It is the official name of the person or entity that owns a company.\nAnd, it’s the name used on your government forms and business paperwork\n"
                      },
                      "businessAliasName": {
                        "type": "string",
                        "example": "Feltz Printing Service of New York",
                        "description": "The business’s alias name. It is the other alias name of the  entity that owns a company.\n"
                      },
                      "businessDescription": {
                        "type": "string",
                        "example": "Printing Service of New York",
                        "description": "The business’s description.\n"
                      },
                      "websiteAvailable": {
                        "type": "boolean",
                        "example": true,
                        "description": "Does your business have a website? e.g. true|false\n"
                      },
                      "website": {
                        "type": "string",
                        "example": "https://www.company.com",
                        "description": "Website of the client. website is required if websiteAvailable is true.\n"
                      },
                      "email": {
                        "type": "string",
                        "example": "client@company.com",
                        "description": "Email of the client.\n"
                      },
                      "countryOfFormation": {
                        "type": "string",
                        "example": "US",
                        "description": "Country code in alpha-2 format"
                      },
                      "yearOfFormation": {
                        "type": "string",
                        "example": "2020",
                        "description": "Year of formation. Max and Min length is 4.\n"
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234567891",
                    "description": "Client id, that uniquely identifies the client.\n"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "relatedParties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "object",
                              "properties": {
                                "addressType": {
                                  "type": "string",
                                  "example": "Principle Place Of Business",
                                  "description": "Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'."
                                },
                                "addressLine1": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "689 Main St",
                                  "description": "addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters."
                                },
                                "addressLine2": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Opposite St. Andrews Church",
                                  "description": "addressLine2 has a maximum of 60 characters."
                                },
                                "addressLine3": {
                                  "type": "string",
                                  "maxLength": 60,
                                  "example": "Mini York",
                                  "description": "addressLine3 has a maximum of 60 characters."
                                },
                                "city": {
                                  "type": "string",
                                  "maxLength": 30,
                                  "example": "Anchorage",
                                  "description": "city has a maximum of 30 characters."
                                },
                                "state": {
                                  "type": "string",
                                  "example": "AZ",
                                  "description": "State code in alpha-2 format. State is mandatory for countries like United States."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "maxLength": 14,
                                  "example": "99501",
                                  "description": "Postal/ZIP code."
                                },
                                "countryCode": {
                                  "type": "string",
                                  "example": "US",
                                  "description": "Country code in alpha-2 format."
                                }
                              }
                            },
                            "phone": {
                              "type": "object",
                              "properties": {
                                "countryCode": {
                                  "type": "string",
                                  "example": "+1"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "example": "7785462944"
                                }
                              },
                              "description": "Phone Number Information of the account\n"
                            },
                            "identities": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "action",
                                      "idType",
                                      "idIssuer",
                                      "idValue"
                                    ],
                                    "properties": {
                                      "idType": {
                                        "type": "string",
                                        "example": "EIN",
                                        "description": "IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners, Controllers and Decision Makers SSN is accepted as idType.\n"
                                      },
                                      "idDescription": {
                                        "type": "string",
                                        "example": "Employee Identification Number",
                                        "description": "Description of identification type e.g. Social Security Number"
                                      },
                                      "idIssuer": {
                                        "type": "string",
                                        "example": "US",
                                        "description": "Identification issuer country name e.g. US"
                                      },
                                      "idValue": {
                                        "type": "string",
                                        "example": "999999999",
                                        "description": "Value of the identification type. EIN/SSN must be of 9 digits."
                                      },
                                      "action": {
                                        "type": "string",
                                        "example": "ADD",
                                        "description": "The action like ADD, UPDATE, REMOVE\n"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "f773b9c1-13e5-4e5a-b055-def345eb85d0",
                              "description": "Unique identifier for this party. It is only required for UPDATE and REMOVE actions\n"
                            },
                            "businessName": {
                              "type": "string",
                              "example": "Feltz Printing Service",
                              "description": "The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND\n"
                            },
                            "firstName": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 30,
                              "example": "Lenna",
                              "description": "First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                            },
                            "middleName": {
                              "type": "string",
                              "maxLength": 30,
                              "example": "More",
                              "description": "Middle name of the individual in case of party type being an individual.\n"
                            },
                            "lastName": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 30,
                              "example": "Paprocki",
                              "description": "Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.\n"
                            },
                            "jobTitle": {
                              "type": "string",
                              "example": "CEO",
                              "description": "Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other\n"
                            },
                            "jobTitleDescription": {
                              "type": "string",
                              "example": "Acting CEO",
                              "maxLength": 50,
                              "description": "In case on jobTitle is Other then Job title description is required.\n"
                            },
                            "birthDate": {
                              "type": "string",
                              "example": "1983-02-08T00:00:00.000Z",
                              "description": "The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.\n"
                            },
                            "email": {
                              "type": "string",
                              "example": "client@company.com",
                              "description": "Email of the individual.\n"
                            },
                            "natureOfOwnership": {
                              "type": "string",
                              "example": "Direct",
                              "description": "Nature of ownership e.g. Direct|Indirect\n"
                            },
                            "soleOwner": {
                              "type": "boolean"
                            },
                            "partyType": {
                              "type": "string",
                              "example": "Individual",
                              "description": "A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual\n"
                            },
                            "partyRole": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "CONTROLLER",
                                "OWNER"
                              ],
                              "description": "A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER\nIf a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]\n"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "1234567891",
                          "description": "Client id, that uniquely identifies the client.\n"
                        }
                      }
                    }
                  ]
                }
              },
              "products": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "EB"
                ],
                "description": "The products available for clients.\n"
              }
            }
          }
        ]
      },
      "VerificationIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "A01148"
          },
          "label": {
            "type": "string",
            "example": "If so, select which ones (multiple possible)"
          }
        }
      },
      "AnswerOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "CUB"
          },
          "label": {
            "type": "string",
            "example": "Cuba"
          }
        }
      },
      "AnswerResponse": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "CUB",
              "SYR"
            ],
            "description": "The answer/s of a question. Can contain one or more elements.\n"
          },
          "updatedDateTime": {
            "type": "string",
            "example": "2022-05-17T12:24:09.000Z",
            "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
          },
          "format": {
            "type": "string",
            "example": "list",
            "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
          },
          "maxLength": {
            "type": "number",
            "format": "int64",
            "example": 255,
            "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
          },
          "parentId": {
            "type": "string",
            "example": "A00033",
            "description": "Id of parent Question"
          },
          "answerOptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "CUB"
                },
                "label": {
                  "type": "string",
                  "example": "Cuba"
                }
              }
            }
          }
        }
      },
      "VerificationResponse": {
        "type": "object",
        "properties": {
          "verification": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "A01148"
              },
              "label": {
                "type": "string",
                "example": "If so, select which ones (multiple possible)"
              }
            }
          },
          "response": {
            "type": "array",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "CUB",
                  "SYR"
                ],
                "description": "The answer/s of a question. Can contain one or more elements.\n"
              },
              "updatedDateTime": {
                "type": "string",
                "example": "2022-05-17T12:24:09.000Z",
                "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
              },
              "format": {
                "type": "string",
                "example": "list",
                "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
              },
              "maxLength": {
                "type": "number",
                "format": "int64",
                "example": 255,
                "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
              },
              "parentId": {
                "type": "string",
                "example": "A00033",
                "description": "Id of parent Question"
              },
              "answerOptions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "CUB"
                    },
                    "label": {
                      "type": "string",
                      "example": "Cuba"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "VerificationsResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "verification": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "A01148"
                  },
                  "label": {
                    "type": "string",
                    "example": "If so, select which ones (multiple possible)"
                  }
                }
              },
              "response": {
                "type": "array",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CUB",
                      "SYR"
                    ],
                    "description": "The answer/s of a question. Can contain one or more elements.\n"
                  },
                  "updatedDateTime": {
                    "type": "string",
                    "example": "2022-05-17T12:24:09.000Z",
                    "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                  },
                  "format": {
                    "type": "string",
                    "example": "list",
                    "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
                  },
                  "maxLength": {
                    "type": "number",
                    "format": "int64",
                    "example": 255,
                    "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
                  },
                  "parentId": {
                    "type": "string",
                    "example": "A00033",
                    "description": "Id of parent Question"
                  },
                  "answerOptions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "CUB"
                        },
                        "label": {
                          "type": "string",
                          "example": "Cuba"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "AttestationResponse": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Rob Allen"
          },
          "ipAddress": {
            "type": "string",
            "example": "192.168.0.1"
          },
          "attestationDateTime": {
            "type": "string",
            "example": "2022-05-17T12:24:09.000Z",
            "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
          },
          "documentType": {
            "type": "string",
            "example": "DISCLOSURE_AND_CONSENT"
          },
          "documentId": {
            "type": "string",
            "example": "123"
          },
          "documentVersion": {
            "type": "string",
            "example": "v1.0"
          },
          "documentName": {
            "type": "string",
            "example": "Disclosure and consent"
          }
        }
      },
      "AttestationsResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "fullName": {
                "type": "string",
                "example": "Rob Allen"
              },
              "ipAddress": {
                "type": "string",
                "example": "192.168.0.1"
              },
              "attestationDateTime": {
                "type": "string",
                "example": "2022-05-17T12:24:09.000Z",
                "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
              },
              "documentType": {
                "type": "string",
                "example": "DISCLOSURE_AND_CONSENT"
              },
              "documentId": {
                "type": "string",
                "example": "123"
              },
              "documentVersion": {
                "type": "string",
                "example": "v1.0"
              },
              "documentName": {
                "type": "string",
                "example": "Disclosure and consent"
              }
            }
          }
        ]
      },
      "AdditionalDocument": {
        "type": "object",
        "properties": {
          "partyId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "documentType": {
            "type": "string"
          },
          "documentLevel": {
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "partyType": {
            "type": "string"
          },
          "supportedDocuments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdditionalDocuments": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "partyId": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "documentType": {
                "type": "string"
              },
              "documentLevel": {
                "type": "string"
              },
              "documentId": {
                "type": "string"
              },
              "partyType": {
                "type": "string"
              },
              "supportedDocuments": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ClientVerificationsInformationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "PENDING_VALIDATION"
          },
          "verifications": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "verification": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "A01148"
                        },
                        "label": {
                          "type": "string",
                          "example": "If so, select which ones (multiple possible)"
                        }
                      }
                    },
                    "response": {
                      "type": "array",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "CUB",
                            "SYR"
                          ],
                          "description": "The answer/s of a question. Can contain one or more elements.\n"
                        },
                        "updatedDateTime": {
                          "type": "string",
                          "example": "2022-05-17T12:24:09.000Z",
                          "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                        },
                        "format": {
                          "type": "string",
                          "example": "list",
                          "description": "Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed"
                        },
                        "maxLength": {
                          "type": "number",
                          "format": "int64",
                          "example": 255,
                          "description": "max length allowed in values field. In case of freeText, the maximum length is 2000"
                        },
                        "parentId": {
                          "type": "string",
                          "example": "A00033",
                          "description": "Id of parent Question"
                        },
                        "answerOptions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "CUB"
                              },
                              "label": {
                                "type": "string",
                                "example": "Cuba"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "attestations": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "Rob Allen"
                    },
                    "ipAddress": {
                      "type": "string",
                      "example": "192.168.0.1"
                    },
                    "attestationDateTime": {
                      "type": "string",
                      "example": "2022-05-17T12:24:09.000Z",
                      "description": "date time of submission in ISO format yyyy-MM-ddTHH:mm:ss"
                    },
                    "documentType": {
                      "type": "string",
                      "example": "DISCLOSURE_AND_CONSENT"
                    },
                    "documentId": {
                      "type": "string",
                      "example": "123"
                    },
                    "documentVersion": {
                      "type": "string",
                      "example": "v1.0"
                    },
                    "documentName": {
                      "type": "string",
                      "example": "Disclosure and consent"
                    }
                  }
                }
              ]
            }
          },
          "additionalDocuments": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "partyId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "documentType": {
                      "type": "string"
                    },
                    "documentLevel": {
                      "type": "string"
                    },
                    "documentId": {
                      "type": "string"
                    },
                    "partyType": {
                      "type": "string"
                    },
                    "supportedDocuments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "VerificationIdRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "A01148"
          }
        }
      },
      "AnswerRequest": {
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "CUB",
              "SYR"
            ],
            "description": "The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.\n"
          }
        }
      },
      "VerificationRequest": {
        "type": "object",
        "required": [
          "verification",
          "response"
        ],
        "properties": {
          "verification": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "A01148"
              }
            }
          },
          "response": {
            "type": "object",
            "required": [
              "values"
            ],
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "CUB",
                  "SYR"
                ],
                "description": "The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.\n"
              }
            }
          }
        }
      },
      "VerificationsRequest": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "verification",
              "response"
            ],
            "properties": {
              "verification": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "A01148"
                  }
                }
              },
              "response": {
                "type": "object",
                "required": [
                  "values"
                ],
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "CUB",
                      "SYR"
                    ],
                    "description": "The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.\n"
                  }
                }
              }
            }
          }
        ]
      },
      "AttestationRequest": {
        "type": "object",
        "required": [
          "fullName",
          "ipAddress",
          "documentId"
        ],
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Rob Allen"
          },
          "ipAddress": {
            "type": "string",
            "example": "192.168.0.1"
          },
          "documentId": {
            "type": "string",
            "example": "123"
          }
        }
      },
      "AttestationsRequest": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "fullName",
              "ipAddress",
              "documentId"
            ],
            "properties": {
              "fullName": {
                "type": "string",
                "example": "Rob Allen"
              },
              "ipAddress": {
                "type": "string",
                "example": "192.168.0.1"
              },
              "documentId": {
                "type": "string",
                "example": "123"
              }
            }
          }
        ]
      },
      "ClientVerificationsInformationRequest": {
        "type": "object",
        "properties": {
          "verifications": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "verification",
                    "response"
                  ],
                  "properties": {
                    "verification": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "A01148"
                        }
                      }
                    },
                    "response": {
                      "type": "object",
                      "required": [
                        "values"
                      ],
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "CUB",
                            "SYR"
                          ],
                          "description": "The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.\n"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "attestations": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "fullName",
                    "ipAddress",
                    "documentId"
                  ],
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "Rob Allen"
                    },
                    "ipAddress": {
                      "type": "string",
                      "example": "192.168.0.1"
                    },
                    "documentId": {
                      "type": "string",
                      "example": "123"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DocumentType": {
        "description": "Supported document types.",
        "type": "string",
        "enum": [
          "IRS_DOCUMENT_TIN",
          "ARTICLES_OF_INCORPORATION",
          "MOA",
          "MAA",
          "CONSTITUTIONAL_DOCUMENT",
          "TRUST_DEED",
          "PARTNERSHIP_AGREEMENT",
          "LLC_AGREEMENT",
          "OPERATING_AGREEMENT",
          "OFFERING_MEMO",
          "BANKING_LICENSE",
          "BUSINESS_LICENSE",
          "BUSINESS_REGISTRATION_CERT",
          "OTHER_GOV_REGISTRATION_DOCS",
          "SEC_FILINGS_10K",
          "PASSPORT",
          "SSN_CARD",
          "DRIVERS_LICENSE",
          "GOV_ISSUED_ID_CARD",
          "TERMS_CONDITION",
          "DISCLOSURE_AND_CONSENT"
        ]
      },
      "ProductType": {
        "description": "Product type identifies which domain the document is being uploaded to.",
        "type": "string",
        "enum": [
          "EB"
        ]
      },
      "DocumentMetadata": {
        "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "partyId"
          },
          "value": {
            "type": "string",
            "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
          }
        }
      },
      "DocumentUploadData": {
        "type": "object",
        "properties": {
          "documentType": {
            "description": "Supported document types.",
            "type": "string",
            "enum": [
              "IRS_DOCUMENT_TIN",
              "ARTICLES_OF_INCORPORATION",
              "MOA",
              "MAA",
              "CONSTITUTIONAL_DOCUMENT",
              "TRUST_DEED",
              "PARTNERSHIP_AGREEMENT",
              "LLC_AGREEMENT",
              "OPERATING_AGREEMENT",
              "OFFERING_MEMO",
              "BANKING_LICENSE",
              "BUSINESS_LICENSE",
              "BUSINESS_REGISTRATION_CERT",
              "OTHER_GOV_REGISTRATION_DOCS",
              "SEC_FILINGS_10K",
              "PASSPORT",
              "SSN_CARD",
              "DRIVERS_LICENSE",
              "GOV_ISSUED_ID_CARD",
              "TERMS_CONDITION",
              "DISCLOSURE_AND_CONSENT"
            ]
          },
          "productType": {
            "description": "Product type identifies which domain the document is being uploaded to.",
            "type": "string",
            "enum": [
              "EB"
            ]
          },
          "metadata": {
            "type": "array",
            "items": {
              "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "example": "partyId"
                },
                "value": {
                  "type": "string",
                  "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
                }
              }
            }
          }
        },
        "required": [
          "documentType",
          "productType"
        ]
      },
      "DocumentDetails": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique id generated by the system for the uploaded document,  which can be used for future retrieval.\n",
            "type": "string",
            "format": "uuid",
            "example": "abcd1c1d-6635-43ff-a8e5-b252926bddef"
          },
          "documentType": {
            "description": "Supported document types.",
            "type": "string",
            "enum": [
              "IRS_DOCUMENT_TIN",
              "ARTICLES_OF_INCORPORATION",
              "MOA",
              "MAA",
              "CONSTITUTIONAL_DOCUMENT",
              "TRUST_DEED",
              "PARTNERSHIP_AGREEMENT",
              "LLC_AGREEMENT",
              "OPERATING_AGREEMENT",
              "OFFERING_MEMO",
              "BANKING_LICENSE",
              "BUSINESS_LICENSE",
              "BUSINESS_REGISTRATION_CERT",
              "OTHER_GOV_REGISTRATION_DOCS",
              "SEC_FILINGS_10K",
              "PASSPORT",
              "SSN_CARD",
              "DRIVERS_LICENSE",
              "GOV_ISSUED_ID_CARD",
              "TERMS_CONDITION",
              "DISCLOSURE_AND_CONSENT"
            ]
          },
          "productType": {
            "description": "Product type identifies which domain the document is being uploaded to.",
            "type": "string",
            "enum": [
              "EB"
            ]
          },
          "metadata": {
            "type": "array",
            "items": {
              "description": "- Additional information about the document in a key-value pair array.\n- The processing domain should only support the specific keys for thier relevant workflows.\n- The productType and documentType combination will determine the\n  list of allowed meta-data keys and the format of their values.\n    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),\n\n      Mandatory meta-data key list = [\"partyId\"] and allowed meta-data value format = [\"uuid\"].\n\n      Example - {\"key\": \"partyId\", \"value\": \"73bd1c1d-6635-43ff-a8e5-b252926bdd9e\"} .\n",
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "example": "partyId"
                },
                "value": {
                  "type": "string",
                  "example": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"
                }
              }
            }
          }
        }
      },
      "RequestTransactionType": {
        "description": "The types of transaction that the client is allowed to search by.",
        "type": "string",
        "enum": [
          "PAYIN",
          "PAYOUT",
          "TRANSFER",
          "REVERSAL",
          "UNDEFINED",
          "RETURN",
          "CARD",
          "HOLD"
        ],
        "example": "PAYIN"
      },
      "RequestTransactionStatus": {
        "description": "The statuses of the transaction that the client is allowed to search by.",
        "type": "string",
        "enum": [
          "PENDING",
          "CANCELED",
          "COMPLETED",
          "COMPLETED_WITH_EXCEPTIONS",
          "REJECTED",
          "RETURNED",
          "PARTIALLY_COMPLETED",
          "UNDEFINED"
        ],
        "example": "PENDING"
      },
      "TransactionStatus": {
        "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
        "type": "string",
        "enum": [
          "PENDING",
          "CANCELED",
          "COMPLETED",
          "COMPLETED_WITH_EXCEPTIONS",
          "COMPLETED_NOT_IN_TARGET_WALLET",
          "REJECTED",
          "RETURNED",
          "PARTIALLY_COMPLETED",
          "UNDEFINED"
        ],
        "example": "PENDING"
      },
      "TransactionType": {
        "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
        "type": "string",
        "enum": [
          "PAYIN",
          "PAYTO",
          "PAYINTO",
          "TRANSFER",
          "PAYOUT",
          "PAYIN_REVERSAL",
          "PAYOUT_REVERSAL",
          "MISC_CREDIT",
          "MISC_DEBIT",
          "UNDEFINED",
          "PAYINTORECEIPT",
          "PAYOUTCOLLECTION",
          "PAYINTOCOLLECTION",
          "PAYINTO_RETURN",
          "PAYOUTCOLLECTION_RETURN",
          "PAYINTOCOLLECTION_RETURN",
          "RETURN",
          "CARD",
          "FEE"
        ],
        "example": "PAYIN"
      },
      "AccountingType": {
        "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
        "type": "string",
        "nullable": false,
        "enum": [
          "DR",
          "CR"
        ],
        "example": "DR"
      },
      "PaymentRoute": {
        "description": "The method by which the payment was made - RTP, WIRE, ACH",
        "type": "string",
        "enum": [
          "RTP",
          "WIRE",
          "ACH"
        ],
        "example": "ACH"
      },
      "TransactionsSearchResponse": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
            "type": "string",
            "enum": [
              "PENDING",
              "CANCELED",
              "COMPLETED",
              "COMPLETED_WITH_EXCEPTIONS",
              "COMPLETED_NOT_IN_TARGET_WALLET",
              "REJECTED",
              "RETURNED",
              "PARTIALLY_COMPLETED",
              "UNDEFINED"
            ],
            "example": "PENDING"
          },
          "transactionType": {
            "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
            "type": "string",
            "enum": [
              "PAYIN",
              "PAYTO",
              "PAYINTO",
              "TRANSFER",
              "PAYOUT",
              "PAYIN_REVERSAL",
              "PAYOUT_REVERSAL",
              "MISC_CREDIT",
              "MISC_DEBIT",
              "UNDEFINED",
              "PAYINTORECEIPT",
              "PAYOUTCOLLECTION",
              "PAYINTOCOLLECTION",
              "PAYINTO_RETURN",
              "PAYOUTCOLLECTION_RETURN",
              "PAYINTOCOLLECTION_RETURN",
              "RETURN",
              "CARD",
              "FEE"
            ],
            "example": "PAYIN"
          },
          "ledgerBalance": {
            "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
            "type": "number",
            "example": 10000
          },
          "creationTimestamp": {
            "description": "The date and time the transaction was created.",
            "type": "string",
            "format": "date-time",
            "example": "2023-02-22T15:05:46.952+0000"
          },
          "effectiveDate": {
            "description": "The time and date when the ledger balance was updated.",
            "type": "string",
            "format": "date",
            "example": "2023-02-22T00:00:00.000Z"
          },
          "postingVersion": {
            "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
            "type": "integer",
            "example": 1
          },
          "transactionId": {
            "type": "string",
            "example": "qsajdb3ybv3",
            "description": "Unique identifier of a transaction"
          },
          "debtorAccount": {
            "type": "string",
            "example": "200293631511",
            "description": "Debtor account number (PRN)"
          },
          "creditorAccount": {
            "type": "string",
            "example": "200293631511",
            "description": "Creditor account number (PRN)"
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "Transaction currency"
          },
          "createdDate": {
            "type": "string",
            "example": "01-01-2022",
            "description": "Transaction creation date"
          },
          "amount": {
            "type": "string",
            "example": "12.45",
            "description": "Transaction amount"
          },
          "debtorName": {
            "type": "string",
            "example": "Modells Sporting Goods",
            "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
          },
          "creditorName": {
            "type": "string",
            "example": "HSBC Holding",
            "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
          },
          "accountingType": {
            "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
            "type": "string",
            "nullable": false,
            "enum": [
              "DR",
              "CR"
            ],
            "example": "DR"
          },
          "paymentRoute": {
            "description": "The method by which the payment was made - RTP, WIRE, ACH",
            "type": "string",
            "enum": [
              "RTP",
              "WIRE",
              "ACH"
            ],
            "example": "ACH"
          }
        }
      },
      "ListTransactionsSearchResponse": {
        "type": "object",
        "required": [
          "metadata",
          "items"
        ],
        "properties": {
          "metadata": {
            "nullable": false,
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "nullable": false,
            "description": "List of transactions meeting the request criteria",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                  "type": "string",
                  "enum": [
                    "PENDING",
                    "CANCELED",
                    "COMPLETED",
                    "COMPLETED_WITH_EXCEPTIONS",
                    "COMPLETED_NOT_IN_TARGET_WALLET",
                    "REJECTED",
                    "RETURNED",
                    "PARTIALLY_COMPLETED",
                    "UNDEFINED"
                  ],
                  "example": "PENDING"
                },
                "transactionType": {
                  "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                  "type": "string",
                  "enum": [
                    "PAYIN",
                    "PAYTO",
                    "PAYINTO",
                    "TRANSFER",
                    "PAYOUT",
                    "PAYIN_REVERSAL",
                    "PAYOUT_REVERSAL",
                    "MISC_CREDIT",
                    "MISC_DEBIT",
                    "UNDEFINED",
                    "PAYINTORECEIPT",
                    "PAYOUTCOLLECTION",
                    "PAYINTOCOLLECTION",
                    "PAYINTO_RETURN",
                    "PAYOUTCOLLECTION_RETURN",
                    "PAYINTOCOLLECTION_RETURN",
                    "RETURN",
                    "CARD",
                    "FEE"
                  ],
                  "example": "PAYIN"
                },
                "ledgerBalance": {
                  "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                  "type": "number",
                  "example": 10000
                },
                "creationTimestamp": {
                  "description": "The date and time the transaction was created.",
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-02-22T15:05:46.952+0000"
                },
                "effectiveDate": {
                  "description": "The time and date when the ledger balance was updated.",
                  "type": "string",
                  "format": "date",
                  "example": "2023-02-22T00:00:00.000Z"
                },
                "postingVersion": {
                  "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                  "type": "integer",
                  "example": 1
                },
                "transactionId": {
                  "type": "string",
                  "example": "qsajdb3ybv3",
                  "description": "Unique identifier of a transaction"
                },
                "debtorAccount": {
                  "type": "string",
                  "example": "200293631511",
                  "description": "Debtor account number (PRN)"
                },
                "creditorAccount": {
                  "type": "string",
                  "example": "200293631511",
                  "description": "Creditor account number (PRN)"
                },
                "currency": {
                  "type": "string",
                  "example": "USD",
                  "description": "Transaction currency"
                },
                "createdDate": {
                  "type": "string",
                  "example": "01-01-2022",
                  "description": "Transaction creation date"
                },
                "amount": {
                  "type": "string",
                  "example": "12.45",
                  "description": "Transaction amount"
                },
                "debtorName": {
                  "type": "string",
                  "example": "Modells Sporting Goods",
                  "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
                },
                "creditorName": {
                  "type": "string",
                  "example": "HSBC Holding",
                  "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
                },
                "accountingType": {
                  "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                  "type": "string",
                  "nullable": false,
                  "enum": [
                    "DR",
                    "CR"
                  ],
                  "example": "DR"
                },
                "paymentRoute": {
                  "description": "The method by which the payment was made - RTP, WIRE, ACH",
                  "type": "string",
                  "enum": [
                    "RTP",
                    "WIRE",
                    "ACH"
                  ],
                  "example": "ACH"
                }
              }
            }
          }
        }
      },
      "PaymentType": {
        "description": "Payment method - RTP, WIRE, ACH or TRANSFER",
        "type": "string",
        "nullable": false,
        "enum": [
          "RTP",
          "WIRE",
          "ACH",
          "TRANSFER"
        ],
        "example": "ACH"
      },
      "CountryCode": {
        "type": "string",
        "enum": [
          "US"
        ],
        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
        "example": "US"
      },
      "TransactionRecipientAddress": {
        "type": "object",
        "description": "Recipient's postal address\nMandatory for payment types WIRE, RTP\n",
        "required": [
          "addressLine1",
          "city",
          "state",
          "countryCode",
          "zip"
        ],
        "properties": {
          "addressLine1": {
            "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "345 Wouda St"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of the recipient's postal address",
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "Malibu Point"
          },
          "addressLine3": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Third line of the recipient's postal address",
            "example": "Greater Woking"
          },
          "city": {
            "type": "string",
            "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
            "nullable": false,
            "minLength": 1,
            "maxLength": 35,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "Springfield"
          },
          "countryCode": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
            "example": "US"
          },
          "state": {
            "type": "string",
            "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
            "nullable": false,
            "minLength": 1,
            "maxLength": 35,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "ND"
          },
          "zip": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 16,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Zip code of the recipient's postal address",
            "example": "58008"
          }
        }
      },
      "RecipientType": {
        "type": "string",
        "enum": [
          "INDIVIDUAL",
          "ORGANIZATION"
        ],
        "nullable": false,
        "example": "INDIVIDUAL"
      },
      "RecipientContact": {
        "type": "object",
        "required": [
          "contactType",
          "value"
        ],
        "properties": {
          "contactType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "EMAIL",
              "WEBSITE",
              "PHONE"
            ],
            "description": "Type of contact information being provided",
            "example": "PHONE"
          },
          "countryCode": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{0,2}$",
            "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
            "example": "+44"
          },
          "value": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 2048,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
            "example": "5343245789"
          }
        }
      },
      "TransactionRecipientPartyDetail": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
            "type": "object",
            "required": [
              "addressLine1",
              "city",
              "state",
              "countryCode",
              "zip"
            ],
            "properties": {
              "addressLine1": {
                "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "345 Wouda St"
              },
              "addressLine2": {
                "type": "string",
                "description": "Second line of the recipient's postal address",
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "Malibu Point"
              },
              "addressLine3": {
                "type": "string",
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Third line of the recipient's postal address",
                "example": "Greater Woking"
              },
              "city": {
                "type": "string",
                "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                "nullable": false,
                "minLength": 1,
                "maxLength": 35,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "Springfield"
              },
              "countryCode": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                "example": "US"
              },
              "state": {
                "type": "string",
                "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                "nullable": false,
                "minLength": 1,
                "maxLength": 35,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "ND"
              },
              "zip": {
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 16,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Zip code of the recipient's postal address",
                "example": "58008"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "INDIVIDUAL",
              "ORGANIZATION"
            ],
            "nullable": false,
            "example": "INDIVIDUAL"
          },
          "firstName": {
            "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
            "type": "string",
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "Jon"
          },
          "lastName": {
            "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
            "type": "string",
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "Smith"
          },
          "businessName": {
            "type": "string",
            "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
            "maxLength": 140,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "Widget Co."
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "contactType",
                "value"
              ],
              "properties": {
                "contactType": {
                  "type": "string",
                  "nullable": false,
                  "enum": [
                    "EMAIL",
                    "WEBSITE",
                    "PHONE"
                  ],
                  "description": "Type of contact information being provided",
                  "example": "PHONE"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "^\\+[1-9]\\d{0,2}$",
                  "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                  "example": "+44"
                },
                "value": {
                  "type": "string",
                  "nullable": false,
                  "minLength": 1,
                  "maxLength": 2048,
                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                  "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                  "example": "5343245789"
                }
              }
            }
          }
        }
      },
      "AccountNumber": {
        "type": "string",
        "nullable": false,
        "pattern": "^\\d{1,35}$",
        "description": "Payment Routing Number or Demand Deposit Account number.",
        "example": "021000021"
      },
      "AccountType": {
        "type": "string",
        "nullable": false,
        "enum": [
          "CHECKING",
          "SAVINGS"
        ],
        "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
        "example": "CHECKING"
      },
      "RoutingCodeType": {
        "type": "string",
        "nullable": false,
        "enum": [
          "USABA"
        ],
        "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
        "example": "USABA"
      },
      "RoutingNumber": {
        "type": "string",
        "nullable": false,
        "pattern": "^\\d{9}$",
        "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
        "example": "021000021"
      },
      "TransactionRecipientAccount": {
        "type": "object",
        "required": [
          "number"
        ],
        "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
        "properties": {
          "number": {
            "type": "string",
            "nullable": false,
            "pattern": "^\\d{1,35}$",
            "description": "Payment Routing Number or Demand Deposit Account number.",
            "example": "021000021"
          },
          "type": {
            "type": "string",
            "nullable": false,
            "enum": [
              "CHECKING",
              "SAVINGS"
            ],
            "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
            "example": "CHECKING"
          },
          "routingCodeType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "USABA"
            ],
            "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
            "example": "USABA"
          },
          "routingNumber": {
            "type": "string",
            "nullable": false,
            "pattern": "^\\d{9}$",
            "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
            "example": "021000021"
          },
          "countryCode": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
            "example": "US"
          }
        }
      },
      "TransactionRecipientDetails": {
        "type": "object",
        "required": [
          "account"
        ],
        "properties": {
          "partyDetails": {
            "type": "object",
            "properties": {
              "address": {
                "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
                "type": "object",
                "required": [
                  "addressLine1",
                  "city",
                  "state",
                  "countryCode",
                  "zip"
                ],
                "properties": {
                  "addressLine1": {
                    "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "345 Wouda St"
                  },
                  "addressLine2": {
                    "type": "string",
                    "description": "Second line of the recipient's postal address",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Malibu Point"
                  },
                  "addressLine3": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Third line of the recipient's postal address",
                    "example": "Greater Woking"
                  },
                  "city": {
                    "type": "string",
                    "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Springfield"
                  },
                  "countryCode": {
                    "type": "string",
                    "enum": [
                      "US"
                    ],
                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                    "example": "US"
                  },
                  "state": {
                    "type": "string",
                    "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "ND"
                  },
                  "zip": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 16,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Zip code of the recipient's postal address",
                    "example": "58008"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "INDIVIDUAL",
                  "ORGANIZATION"
                ],
                "nullable": false,
                "example": "INDIVIDUAL"
              },
              "firstName": {
                "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "Jon"
              },
              "lastName": {
                "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "Smith"
              },
              "businessName": {
                "type": "string",
                "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
                "maxLength": 140,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "example": "Widget Co."
              },
              "contacts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "contactType",
                    "value"
                  ],
                  "properties": {
                    "contactType": {
                      "type": "string",
                      "nullable": false,
                      "enum": [
                        "EMAIL",
                        "WEBSITE",
                        "PHONE"
                      ],
                      "description": "Type of contact information being provided",
                      "example": "PHONE"
                    },
                    "countryCode": {
                      "type": "string",
                      "pattern": "^\\+[1-9]\\d{0,2}$",
                      "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                      "example": "+44"
                    },
                    "value": {
                      "type": "string",
                      "nullable": false,
                      "minLength": 1,
                      "maxLength": 2048,
                      "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                      "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                      "example": "5343245789"
                    }
                  }
                }
              }
            }
          },
          "account": {
            "type": "object",
            "required": [
              "number"
            ],
            "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
            "properties": {
              "number": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{1,35}$",
                "description": "Payment Routing Number or Demand Deposit Account number.",
                "example": "021000021"
              },
              "type": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "CHECKING",
                  "SAVINGS"
                ],
                "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                "example": "CHECKING"
              },
              "routingCodeType": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "USABA"
                ],
                "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                "example": "USABA"
              },
              "routingNumber": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{9}$",
                "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                "example": "021000021"
              },
              "countryCode": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                "example": "US"
              }
            }
          }
        }
      },
      "PostTransactionRequest": {
        "type": "object",
        "required": [
          "type",
          "originatingAccount",
          "recipient",
          "amount",
          "currency",
          "paymentDate"
        ],
        "properties": {
          "type": {
            "description": "Payment method - RTP, WIRE, ACH or TRANSFER",
            "type": "string",
            "nullable": false,
            "enum": [
              "RTP",
              "WIRE",
              "ACH",
              "TRANSFER"
            ],
            "example": "ACH"
          },
          "originatingAccount": {
            "description": "ID of the account to make the payment from",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 35,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "recipient": {
            "description": "Payment recipient",
            "nullable": false,
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "partyDetails": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "state",
                      "countryCode",
                      "zip"
                    ],
                    "properties": {
                      "addressLine1": {
                        "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                        "type": "string",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "345 Wouda St"
                      },
                      "addressLine2": {
                        "type": "string",
                        "description": "Second line of the recipient's postal address",
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "Malibu Point"
                      },
                      "addressLine3": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Third line of the recipient's postal address",
                        "example": "Greater Woking"
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 35,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "Springfield"
                      },
                      "countryCode": {
                        "type": "string",
                        "enum": [
                          "US"
                        ],
                        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                        "example": "US"
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 35,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "ND"
                      },
                      "zip": {
                        "type": "string",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 16,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Zip code of the recipient's postal address",
                        "example": "58008"
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "INDIVIDUAL",
                      "ORGANIZATION"
                    ],
                    "nullable": false,
                    "example": "INDIVIDUAL"
                  },
                  "firstName": {
                    "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                    "type": "string",
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Jon"
                  },
                  "lastName": {
                    "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                    "type": "string",
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Smith"
                  },
                  "businessName": {
                    "type": "string",
                    "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
                    "maxLength": 140,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Widget Co."
                  },
                  "contacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "contactType",
                        "value"
                      ],
                      "properties": {
                        "contactType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "EMAIL",
                            "WEBSITE",
                            "PHONE"
                          ],
                          "description": "Type of contact information being provided",
                          "example": "PHONE"
                        },
                        "countryCode": {
                          "type": "string",
                          "pattern": "^\\+[1-9]\\d{0,2}$",
                          "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                          "example": "+44"
                        },
                        "value": {
                          "type": "string",
                          "nullable": false,
                          "minLength": 1,
                          "maxLength": 2048,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                          "example": "5343245789"
                        }
                      }
                    }
                  }
                }
              },
              "account": {
                "type": "object",
                "required": [
                  "number"
                ],
                "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
                "properties": {
                  "number": {
                    "type": "string",
                    "nullable": false,
                    "pattern": "^\\d{1,35}$",
                    "description": "Payment Routing Number or Demand Deposit Account number.",
                    "example": "021000021"
                  },
                  "type": {
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "CHECKING",
                      "SAVINGS"
                    ],
                    "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                    "example": "CHECKING"
                  },
                  "routingCodeType": {
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "USABA"
                    ],
                    "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                    "example": "USABA"
                  },
                  "routingNumber": {
                    "type": "string",
                    "nullable": false,
                    "pattern": "^\\d{9}$",
                    "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                    "example": "021000021"
                  },
                  "countryCode": {
                    "type": "string",
                    "enum": [
                      "US"
                    ],
                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                    "example": "US"
                  }
                }
              }
            }
          },
          "amount": {
            "type": "number",
            "nullable": false,
            "minimum": 0.01,
            "example": 100
          },
          "currency": {
            "description": "Payment currency - currently supported: USD",
            "type": "string",
            "nullable": false,
            "enum": [
              "USD"
            ],
            "example": "USD"
          },
          "memo": {
            "type": "string",
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "minLength": 1,
            "maxLength": 140,
            "description": "Memorandum",
            "example": "Invoice 1234"
          },
          "paymentDate": {
            "description": "ISO date format - yyyy-MM-dd",
            "type": "string",
            "nullable": false,
            "format": "date",
            "example": "2022-12-31T00:00:00.000Z"
          }
        }
      },
      "MerchantAddress": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "345 Wouda St"
          },
          "city": {
            "type": "string",
            "example": "Springfield"
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          },
          "state": {
            "type": "string",
            "example": "ND"
          },
          "zip": {
            "type": "string",
            "example": "58008"
          }
        }
      },
      "Merchant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "XYZ001"
          },
          "address": {
            "type": "object",
            "properties": {
              "addressLine1": {
                "type": "string",
                "example": "345 Wouda St"
              },
              "city": {
                "type": "string",
                "example": "Springfield"
              },
              "countryCode": {
                "type": "string",
                "example": "US"
              },
              "state": {
                "type": "string",
                "example": "ND"
              },
              "zip": {
                "type": "string",
                "example": "58008"
              }
            }
          }
        }
      },
      "DebitCardDetails": {
        "type": "object",
        "properties": {
          "cardPaymentRoutingNumber": {
            "type": "string",
            "example": "2000303444"
          },
          "cardLast4": {
            "type": "string",
            "example": "0000"
          },
          "cardSerialNumber": {
            "type": "string",
            "example": "100000158935"
          },
          "messageType": {
            "type": "string",
            "example": "1200"
          },
          "cardTransactionType": {
            "type": "string",
            "example": "CR"
          },
          "isa": {
            "type": "string",
            "example": "0"
          },
          "surcharge": {
            "type": "number",
            "example": 1
          },
          "merchant": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "XYZ001"
              },
              "address": {
                "type": "object",
                "properties": {
                  "addressLine1": {
                    "type": "string",
                    "example": "345 Wouda St"
                  },
                  "city": {
                    "type": "string",
                    "example": "Springfield"
                  },
                  "countryCode": {
                    "type": "string",
                    "example": "US"
                  },
                  "state": {
                    "type": "string",
                    "example": "ND"
                  },
                  "zip": {
                    "type": "string",
                    "example": "58008"
                  }
                }
              }
            }
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123434534"
          },
          "status": {
            "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
            "type": "string",
            "enum": [
              "PENDING",
              "CANCELED",
              "COMPLETED",
              "COMPLETED_WITH_EXCEPTIONS",
              "COMPLETED_NOT_IN_TARGET_WALLET",
              "REJECTED",
              "RETURNED",
              "PARTIALLY_COMPLETED",
              "UNDEFINED"
            ],
            "example": "PENDING"
          },
          "type": {
            "description": "Payment method - RTP, WIRE, ACH or TRANSFER",
            "type": "string",
            "nullable": false,
            "enum": [
              "RTP",
              "WIRE",
              "ACH",
              "TRANSFER"
            ],
            "example": "ACH"
          },
          "accountId": {
            "type": "string",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "accountNumber": {
            "type": "string",
            "example": "20000023556044"
          },
          "recipient": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "partyDetails": {
                "type": "object",
                "properties": {
                  "address": {
                    "description": "Address details for the recipient\nMandatory for RTP and WIRE payment types\n",
                    "type": "object",
                    "required": [
                      "addressLine1",
                      "city",
                      "state",
                      "countryCode",
                      "zip"
                    ],
                    "properties": {
                      "addressLine1": {
                        "description": "First line of the recipient's postal address\nFor payment type WIRE addressLine1 cannot exceed 35 characters\nFor payment type RTP addressLine1 cannot exceed 70 characters\n",
                        "type": "string",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "345 Wouda St"
                      },
                      "addressLine2": {
                        "type": "string",
                        "description": "Second line of the recipient's postal address",
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "Malibu Point"
                      },
                      "addressLine3": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 70,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Third line of the recipient's postal address",
                        "example": "Greater Woking"
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 35,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "Springfield"
                      },
                      "countryCode": {
                        "type": "string",
                        "enum": [
                          "US"
                        ],
                        "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                        "example": "US"
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the recipient's postal address\nFor payment type WIRE city and state combined cannot exceed 35 characters\n",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 35,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "example": "ND"
                      },
                      "zip": {
                        "type": "string",
                        "nullable": false,
                        "minLength": 1,
                        "maxLength": 16,
                        "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                        "description": "Zip code of the recipient's postal address",
                        "example": "58008"
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "INDIVIDUAL",
                      "ORGANIZATION"
                    ],
                    "nullable": false,
                    "example": "INDIVIDUAL"
                  },
                  "firstName": {
                    "description": "Recipient's first name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                    "type": "string",
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Jon"
                  },
                  "lastName": {
                    "description": "Recipient's last name\nMandatory for recipient type INDIVIDUAL\nFor payment type WIRE firstName and lastName combined cannot exceed 35 characters\n",
                    "type": "string",
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Smith"
                  },
                  "businessName": {
                    "type": "string",
                    "description": "Recipient company name\nMandatory for recipient type ORGANIZATION\nFor payment type WIRE business name cannot exceed 35 characters\n",
                    "maxLength": 140,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "example": "Widget Co."
                  },
                  "contacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "contactType",
                        "value"
                      ],
                      "properties": {
                        "contactType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "EMAIL",
                            "WEBSITE",
                            "PHONE"
                          ],
                          "description": "Type of contact information being provided",
                          "example": "PHONE"
                        },
                        "countryCode": {
                          "type": "string",
                          "pattern": "^\\+[1-9]\\d{0,2}$",
                          "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                          "example": "+44"
                        },
                        "value": {
                          "type": "string",
                          "nullable": false,
                          "minLength": 1,
                          "maxLength": 2048,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                          "example": "5343245789"
                        }
                      }
                    }
                  }
                }
              },
              "account": {
                "type": "object",
                "required": [
                  "number"
                ],
                "description": "First line of the recipient's postal address.\nFor payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.\nFor payment type of ACH account type is required.\n",
                "properties": {
                  "number": {
                    "type": "string",
                    "nullable": false,
                    "pattern": "^\\d{1,35}$",
                    "description": "Payment Routing Number or Demand Deposit Account number.",
                    "example": "021000021"
                  },
                  "type": {
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "CHECKING",
                      "SAVINGS"
                    ],
                    "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                    "example": "CHECKING"
                  },
                  "routingCodeType": {
                    "type": "string",
                    "nullable": false,
                    "enum": [
                      "USABA"
                    ],
                    "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                    "example": "USABA"
                  },
                  "routingNumber": {
                    "type": "string",
                    "nullable": false,
                    "pattern": "^\\d{9}$",
                    "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                    "example": "021000021"
                  },
                  "countryCode": {
                    "type": "string",
                    "enum": [
                      "US"
                    ],
                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                    "example": "US"
                  }
                }
              }
            }
          },
          "amount": {
            "type": "number",
            "example": 100
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "memo": {
            "type": "string",
            "example": "Invoice 1234"
          },
          "paymentDate": {
            "description": "ISO date format - yyyy-MM-dd",
            "type": "string",
            "format": "date",
            "example": "2022-12-31T00:00:00.000Z"
          },
          "c2ProfileId": {
            "type": "string",
            "example": "0030000132"
          },
          "debitCardDetails": {
            "type": "object",
            "properties": {
              "cardPaymentRoutingNumber": {
                "type": "string",
                "example": "2000303444"
              },
              "cardLast4": {
                "type": "string",
                "example": "0000"
              },
              "cardSerialNumber": {
                "type": "string",
                "example": "100000158935"
              },
              "messageType": {
                "type": "string",
                "example": "1200"
              },
              "cardTransactionType": {
                "type": "string",
                "example": "CR"
              },
              "isa": {
                "type": "string",
                "example": "0"
              },
              "surcharge": {
                "type": "number",
                "example": 1
              },
              "merchant": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "XYZ001"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "addressLine1": {
                        "type": "string",
                        "example": "345 Wouda St"
                      },
                      "city": {
                        "type": "string",
                        "example": "Springfield"
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US"
                      },
                      "state": {
                        "type": "string",
                        "example": "ND"
                      },
                      "zip": {
                        "type": "string",
                        "example": "58008"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TransactionGetResponseDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction ID",
            "example": "123434534"
          },
          "creditorAccount": {
            "description": "Creditor account number - PRN or DDA",
            "type": "string",
            "example": "20000023556044"
          },
          "creditorName": {
            "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.",
            "type": "string",
            "example": "JPMC"
          },
          "debtorAccount": {
            "description": "Debtor account number - PRN or DDA",
            "type": "string",
            "example": "20000023556044"
          },
          "debtorName": {
            "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.",
            "type": "string",
            "example": "JPMC C2"
          },
          "amount": {
            "description": "Transaction value",
            "type": "number",
            "example": 100
          },
          "currency": {
            "description": "Transaction currency",
            "type": "string",
            "example": "USD"
          },
          "memo": {
            "description": "Memorandum",
            "type": "string",
            "example": "Invoice 1234"
          },
          "paymentDate": {
            "description": "Date of transaction",
            "type": "string",
            "example": "01-01-2022"
          },
          "debitCardDetails": {
            "type": "object",
            "properties": {
              "cardPaymentRoutingNumber": {
                "type": "string",
                "example": "2000303444"
              },
              "cardLast4": {
                "type": "string",
                "example": "0000"
              },
              "cardSerialNumber": {
                "type": "string",
                "example": "100000158935"
              },
              "messageType": {
                "type": "string",
                "example": "1200"
              },
              "cardTransactionType": {
                "type": "string",
                "example": "CR"
              },
              "isa": {
                "type": "string",
                "example": "0"
              },
              "surcharge": {
                "type": "number",
                "example": 1
              },
              "merchant": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "XYZ001"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "addressLine1": {
                        "type": "string",
                        "example": "345 Wouda St"
                      },
                      "city": {
                        "type": "string",
                        "example": "Springfield"
                      },
                      "countryCode": {
                        "type": "string",
                        "example": "US"
                      },
                      "state": {
                        "type": "string",
                        "example": "ND"
                      },
                      "zip": {
                        "type": "string",
                        "example": "58008"
                      }
                    }
                  }
                }
              }
            }
          },
          "accountingType": {
            "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
            "type": "string",
            "nullable": false,
            "enum": [
              "DR",
              "CR"
            ],
            "example": "DR"
          }
        }
      },
      "TransactionGetResponse": {
        "type": "object",
        "required": [
          "id",
          "creditorAccount",
          "creditorName",
          "debtorAccount",
          "debtorName",
          "amount",
          "currency",
          "memo",
          "paymentDate",
          "accountingType",
          "status",
          "transactionType"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Transaction ID",
                "example": "123434534"
              },
              "creditorAccount": {
                "description": "Creditor account number - PRN or DDA",
                "type": "string",
                "example": "20000023556044"
              },
              "creditorName": {
                "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.",
                "type": "string",
                "example": "JPMC"
              },
              "debtorAccount": {
                "description": "Debtor account number - PRN or DDA",
                "type": "string",
                "example": "20000023556044"
              },
              "debtorName": {
                "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.",
                "type": "string",
                "example": "JPMC C2"
              },
              "amount": {
                "description": "Transaction value",
                "type": "number",
                "example": 100
              },
              "currency": {
                "description": "Transaction currency",
                "type": "string",
                "example": "USD"
              },
              "memo": {
                "description": "Memorandum",
                "type": "string",
                "example": "Invoice 1234"
              },
              "paymentDate": {
                "description": "Date of transaction",
                "type": "string",
                "example": "01-01-2022"
              },
              "debitCardDetails": {
                "type": "object",
                "properties": {
                  "cardPaymentRoutingNumber": {
                    "type": "string",
                    "example": "2000303444"
                  },
                  "cardLast4": {
                    "type": "string",
                    "example": "0000"
                  },
                  "cardSerialNumber": {
                    "type": "string",
                    "example": "100000158935"
                  },
                  "messageType": {
                    "type": "string",
                    "example": "1200"
                  },
                  "cardTransactionType": {
                    "type": "string",
                    "example": "CR"
                  },
                  "isa": {
                    "type": "string",
                    "example": "0"
                  },
                  "surcharge": {
                    "type": "number",
                    "example": 1
                  },
                  "merchant": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "XYZ001"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "addressLine1": {
                            "type": "string",
                            "example": "345 Wouda St"
                          },
                          "city": {
                            "type": "string",
                            "example": "Springfield"
                          },
                          "countryCode": {
                            "type": "string",
                            "example": "US"
                          },
                          "state": {
                            "type": "string",
                            "example": "ND"
                          },
                          "zip": {
                            "type": "string",
                            "example": "58008"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "accountingType": {
                "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                "type": "string",
                "nullable": false,
                "enum": [
                  "DR",
                  "CR"
                ],
                "example": "DR"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                "type": "string",
                "enum": [
                  "PENDING",
                  "CANCELED",
                  "COMPLETED",
                  "COMPLETED_WITH_EXCEPTIONS",
                  "COMPLETED_NOT_IN_TARGET_WALLET",
                  "REJECTED",
                  "RETURNED",
                  "PARTIALLY_COMPLETED",
                  "UNDEFINED"
                ],
                "example": "PENDING"
              },
              "transactionType": {
                "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                "type": "string",
                "enum": [
                  "PAYIN",
                  "PAYTO",
                  "PAYINTO",
                  "TRANSFER",
                  "PAYOUT",
                  "PAYIN_REVERSAL",
                  "PAYOUT_REVERSAL",
                  "MISC_CREDIT",
                  "MISC_DEBIT",
                  "UNDEFINED",
                  "PAYINTORECEIPT",
                  "PAYOUTCOLLECTION",
                  "PAYINTOCOLLECTION",
                  "PAYINTO_RETURN",
                  "PAYOUTCOLLECTION_RETURN",
                  "PAYINTOCOLLECTION_RETURN",
                  "RETURN",
                  "CARD",
                  "FEE"
                ],
                "example": "PAYIN"
              }
            }
          }
        ]
      },
      "TransactionsSearchRequest": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "200293631511"
          },
          "transactionId": {
            "type": "string",
            "example": "2451821d-e6f9-450d-b041-a20ae9d08f14"
          },
          "amountEquals": {
            "type": "string",
            "example": "100",
            "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
          },
          "amountLessThan": {
            "type": "string",
            "example": "100",
            "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
          },
          "amountGreaterThan": {
            "type": "string",
            "example": "100",
            "pattern": "^\\d{0,15}(?:[.]\\d{1,2})?$"
          },
          "recipientAccount": {
            "type": "string",
            "example": "200293632041"
          },
          "paymentType": {
            "example": "CARD",
            "description": "The types of transaction that the client is allowed to search by.",
            "type": "string",
            "enum": [
              "PAYIN",
              "PAYOUT",
              "TRANSFER",
              "REVERSAL",
              "UNDEFINED",
              "RETURN",
              "CARD",
              "HOLD"
            ]
          },
          "dateLessThan": {
            "type": "string",
            "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
            "example": "2022-01-01T00:00:00.000Z"
          },
          "dateGreaterThan": {
            "type": "string",
            "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
            "example": "2022-01-01T00:00:00.000Z"
          },
          "dateEquals": {
            "type": "string",
            "pattern": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
            "example": "2022-01-01T00:00:00.000Z"
          },
          "status": {
            "example": "PENDING",
            "description": "The statuses of the transaction that the client is allowed to search by.",
            "type": "string",
            "enum": [
              "PENDING",
              "CANCELED",
              "COMPLETED",
              "COMPLETED_WITH_EXCEPTIONS",
              "REJECTED",
              "RETURNED",
              "PARTIALLY_COMPLETED",
              "UNDEFINED"
            ]
          }
        }
      },
      "RecipientAddress": {
        "type": "object",
        "description": "Recipient's postal address. Always required for RTP payment type.",
        "required": [
          "addressLine1",
          "city",
          "countryCode",
          "state",
          "zip"
        ],
        "properties": {
          "addressLine1": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
            "example": "345 Wouda St"
          },
          "addressLine2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Information to complete the street address, such as apartment number or the name of a building.",
            "example": "Malibu Point"
          },
          "addressLine3": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Further information about an address, such as a locally known area.",
            "example": "Greater Woking"
          },
          "city": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 35,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Whole name of the city or town of the address.",
            "example": "Springfield"
          },
          "countryCode": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
            "example": "US"
          },
          "state": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 35,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
            "example": "ND"
          },
          "zip": {
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "maxLength": 16,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "The postal code, such as a ZIP code in the USA, for the address.",
            "example": "58008"
          }
        }
      },
      "RecipientPartyDetails": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "address": {
            "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
            "type": "object",
            "required": [
              "addressLine1",
              "city",
              "countryCode",
              "state",
              "zip"
            ],
            "properties": {
              "addressLine1": {
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                "example": "345 Wouda St"
              },
              "addressLine2": {
                "type": "string",
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Information to complete the street address, such as apartment number or the name of a building.",
                "example": "Malibu Point"
              },
              "addressLine3": {
                "type": "string",
                "minLength": 1,
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Further information about an address, such as a locally known area.",
                "example": "Greater Woking"
              },
              "city": {
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 35,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Whole name of the city or town of the address.",
                "example": "Springfield"
              },
              "countryCode": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                "example": "US"
              },
              "state": {
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 35,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                "example": "ND"
              },
              "zip": {
                "type": "string",
                "nullable": false,
                "minLength": 1,
                "maxLength": 16,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "The postal code, such as a ZIP code in the USA, for the address.",
                "example": "58008"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "INDIVIDUAL",
              "ORGANIZATION"
            ],
            "nullable": false,
            "example": "INDIVIDUAL"
          },
          "firstName": {
            "type": "string",
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
            "example": "Jon"
          },
          "lastName": {
            "type": "string",
            "maxLength": 70,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
            "example": "Smith"
          },
          "businessName": {
            "type": "string",
            "maxLength": 140,
            "pattern": "^(.|\\s)*\\S(.|\\s)*$",
            "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
            "example": "Widget Co."
          },
          "contacts": {
            "type": "array",
            "description": "Contact details for the recipient.",
            "items": {
              "type": "object",
              "required": [
                "contactType",
                "value"
              ],
              "properties": {
                "contactType": {
                  "type": "string",
                  "nullable": false,
                  "enum": [
                    "EMAIL",
                    "WEBSITE",
                    "PHONE"
                  ],
                  "description": "Type of contact information being provided",
                  "example": "PHONE"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "^\\+[1-9]\\d{0,2}$",
                  "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                  "example": "+44"
                },
                "value": {
                  "type": "string",
                  "nullable": false,
                  "minLength": 1,
                  "maxLength": 2048,
                  "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                  "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                  "example": "5343245789"
                }
              }
            }
          }
        }
      },
      "RecipientAccount": {
        "type": "object",
        "required": [
          "number",
          "routingCodeType",
          "routingNumber",
          "countryCode"
        ],
        "description": "Bank account details of the recipient.",
        "properties": {
          "number": {
            "type": "string",
            "nullable": false,
            "pattern": "^\\d{1,35}$",
            "description": "Payment Routing Number or Demand Deposit Account number.",
            "example": "021000021"
          },
          "type": {
            "type": "string",
            "nullable": false,
            "enum": [
              "CHECKING",
              "SAVINGS"
            ],
            "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
            "example": "CHECKING"
          },
          "routingCodeType": {
            "type": "string",
            "nullable": false,
            "enum": [
              "USABA"
            ],
            "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
            "example": "USABA"
          },
          "routingNumber": {
            "type": "string",
            "nullable": false,
            "pattern": "^\\d{9}$",
            "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
            "example": "021000021"
          },
          "countryCode": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
            "example": "US"
          }
        }
      },
      "Recipient": {
        "type": "object",
        "required": [
          "id",
          "account",
          "partyDetails"
        ],
        "properties": {
          "partyDetails": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "address": {
                "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                "type": "object",
                "required": [
                  "addressLine1",
                  "city",
                  "countryCode",
                  "state",
                  "zip"
                ],
                "properties": {
                  "addressLine1": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                    "example": "345 Wouda St"
                  },
                  "addressLine2": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Information to complete the street address, such as apartment number or the name of a building.",
                    "example": "Malibu Point"
                  },
                  "addressLine3": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Further information about an address, such as a locally known area.",
                    "example": "Greater Woking"
                  },
                  "city": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Whole name of the city or town of the address.",
                    "example": "Springfield"
                  },
                  "countryCode": {
                    "type": "string",
                    "enum": [
                      "US"
                    ],
                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                    "example": "US"
                  },
                  "state": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                    "example": "ND"
                  },
                  "zip": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 16,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "The postal code, such as a ZIP code in the USA, for the address.",
                    "example": "58008"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "INDIVIDUAL",
                  "ORGANIZATION"
                ],
                "nullable": false,
                "example": "INDIVIDUAL"
              },
              "firstName": {
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                "example": "Jon"
              },
              "lastName": {
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                "example": "Smith"
              },
              "businessName": {
                "type": "string",
                "maxLength": 140,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                "example": "Widget Co."
              },
              "contacts": {
                "type": "array",
                "description": "Contact details for the recipient.",
                "items": {
                  "type": "object",
                  "required": [
                    "contactType",
                    "value"
                  ],
                  "properties": {
                    "contactType": {
                      "type": "string",
                      "nullable": false,
                      "enum": [
                        "EMAIL",
                        "WEBSITE",
                        "PHONE"
                      ],
                      "description": "Type of contact information being provided",
                      "example": "PHONE"
                    },
                    "countryCode": {
                      "type": "string",
                      "pattern": "^\\+[1-9]\\d{0,2}$",
                      "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                      "example": "+44"
                    },
                    "value": {
                      "type": "string",
                      "nullable": false,
                      "minLength": 1,
                      "maxLength": 2048,
                      "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                      "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                      "example": "5343245789"
                    }
                  }
                }
              }
            }
          },
          "account": {
            "type": "object",
            "required": [
              "number",
              "routingCodeType",
              "routingNumber",
              "countryCode"
            ],
            "description": "Bank account details of the recipient.",
            "properties": {
              "number": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{1,35}$",
                "description": "Payment Routing Number or Demand Deposit Account number.",
                "example": "021000021"
              },
              "type": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "CHECKING",
                  "SAVINGS"
                ],
                "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                "example": "CHECKING"
              },
              "routingCodeType": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "USABA"
                ],
                "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                "example": "USABA"
              },
              "routingNumber": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{9}$",
                "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                "example": "021000021"
              },
              "countryCode": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                "example": "US"
              }
            }
          },
          "id": {
            "type": "string",
            "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
          }
        }
      },
      "ListRecipientsResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "array",
                "description": "Recipients available in current page",
                "items": {
                  "type": "object",
                  "required": [
                    "id",
                    "account",
                    "partyDetails"
                  ],
                  "properties": {
                    "partyDetails": {
                      "type": "object",
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "address": {
                          "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                          "type": "object",
                          "required": [
                            "addressLine1",
                            "city",
                            "countryCode",
                            "state",
                            "zip"
                          ],
                          "properties": {
                            "addressLine1": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                              "example": "345 Wouda St"
                            },
                            "addressLine2": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Information to complete the street address, such as apartment number or the name of a building.",
                              "example": "Malibu Point"
                            },
                            "addressLine3": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 70,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Further information about an address, such as a locally known area.",
                              "example": "Greater Woking"
                            },
                            "city": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "Whole name of the city or town of the address.",
                              "example": "Springfield"
                            },
                            "countryCode": {
                              "type": "string",
                              "enum": [
                                "US"
                              ],
                              "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                              "example": "US"
                            },
                            "state": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 35,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                              "example": "ND"
                            },
                            "zip": {
                              "type": "string",
                              "nullable": false,
                              "minLength": 1,
                              "maxLength": 16,
                              "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                              "description": "The postal code, such as a ZIP code in the USA, for the address.",
                              "example": "58008"
                            }
                          }
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "INDIVIDUAL",
                            "ORGANIZATION"
                          ],
                          "nullable": false,
                          "example": "INDIVIDUAL"
                        },
                        "firstName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Jon"
                        },
                        "lastName": {
                          "type": "string",
                          "maxLength": 70,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                          "example": "Smith"
                        },
                        "businessName": {
                          "type": "string",
                          "maxLength": 140,
                          "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                          "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                          "example": "Widget Co."
                        },
                        "contacts": {
                          "type": "array",
                          "description": "Contact details for the recipient.",
                          "items": {
                            "type": "object",
                            "required": [
                              "contactType",
                              "value"
                            ],
                            "properties": {
                              "contactType": {
                                "type": "string",
                                "nullable": false,
                                "enum": [
                                  "EMAIL",
                                  "WEBSITE",
                                  "PHONE"
                                ],
                                "description": "Type of contact information being provided",
                                "example": "PHONE"
                              },
                              "countryCode": {
                                "type": "string",
                                "pattern": "^\\+[1-9]\\d{0,2}$",
                                "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                                "example": "+44"
                              },
                              "value": {
                                "type": "string",
                                "nullable": false,
                                "minLength": 1,
                                "maxLength": 2048,
                                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                                "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                                "example": "5343245789"
                              }
                            }
                          }
                        }
                      }
                    },
                    "account": {
                      "type": "object",
                      "required": [
                        "number",
                        "routingCodeType",
                        "routingNumber",
                        "countryCode"
                      ],
                      "description": "Bank account details of the recipient.",
                      "properties": {
                        "number": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{1,35}$",
                          "description": "Payment Routing Number or Demand Deposit Account number.",
                          "example": "021000021"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "CHECKING",
                            "SAVINGS"
                          ],
                          "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                          "example": "CHECKING"
                        },
                        "routingCodeType": {
                          "type": "string",
                          "nullable": false,
                          "enum": [
                            "USABA"
                          ],
                          "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                          "example": "USABA"
                        },
                        "routingNumber": {
                          "type": "string",
                          "nullable": false,
                          "pattern": "^\\d{9}$",
                          "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                          "example": "021000021"
                        },
                        "countryCode": {
                          "type": "string",
                          "enum": [
                            "US"
                          ],
                          "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                          "example": "US"
                        }
                      }
                    },
                    "id": {
                      "type": "string",
                      "example": "a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "RecipientRequest": {
        "type": "object",
        "required": [
          "account",
          "partyDetails"
        ],
        "properties": {
          "partyDetails": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "address": {
                "description": "Address details for the recipient. Mandatory for payments using the RTP payment type.",
                "type": "object",
                "required": [
                  "addressLine1",
                  "city",
                  "countryCode",
                  "state",
                  "zip"
                ],
                "properties": {
                  "addressLine1": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "The building number and street name of the address. Must start with a number. Cannot be a PO box.",
                    "example": "345 Wouda St"
                  },
                  "addressLine2": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Information to complete the street address, such as apartment number or the name of a building.",
                    "example": "Malibu Point"
                  },
                  "addressLine3": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 70,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Further information about an address, such as a locally known area.",
                    "example": "Greater Woking"
                  },
                  "city": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "Whole name of the city or town of the address.",
                    "example": "Springfield"
                  },
                  "countryCode": {
                    "type": "string",
                    "enum": [
                      "US"
                    ],
                    "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                    "example": "US"
                  },
                  "state": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 35,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "State code in alpla-2 format. State is mandatory for countries divided into states, such as USA.",
                    "example": "ND"
                  },
                  "zip": {
                    "type": "string",
                    "nullable": false,
                    "minLength": 1,
                    "maxLength": 16,
                    "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                    "description": "The postal code, such as a ZIP code in the USA, for the address.",
                    "example": "58008"
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "INDIVIDUAL",
                  "ORGANIZATION"
                ],
                "nullable": false,
                "example": "INDIVIDUAL"
              },
              "firstName": {
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient's first name. Mandatory for recipient type INDIVIDUAL.\n",
                "example": "Jon"
              },
              "lastName": {
                "type": "string",
                "maxLength": 70,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient's last name. Mandatory for recipient type INDIVIDUAL.\n",
                "example": "Smith"
              },
              "businessName": {
                "type": "string",
                "maxLength": 140,
                "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                "description": "Recipient company name. Mandatory for recipient type ORGANIZATION.\n",
                "example": "Widget Co."
              },
              "contacts": {
                "type": "array",
                "description": "Contact details for the recipient.",
                "items": {
                  "type": "object",
                  "required": [
                    "contactType",
                    "value"
                  ],
                  "properties": {
                    "contactType": {
                      "type": "string",
                      "nullable": false,
                      "enum": [
                        "EMAIL",
                        "WEBSITE",
                        "PHONE"
                      ],
                      "description": "Type of contact information being provided",
                      "example": "PHONE"
                    },
                    "countryCode": {
                      "type": "string",
                      "pattern": "^\\+[1-9]\\d{0,2}$",
                      "description": "E.164 format compatible telephone country code\nMandatory for contactType PHONE\n",
                      "example": "+44"
                    },
                    "value": {
                      "type": "string",
                      "nullable": false,
                      "minLength": 1,
                      "maxLength": 2048,
                      "pattern": "^(.|\\s)*\\S(.|\\s)*$",
                      "description": "Contact information corresponding to contactType:\nPHONE - E.164-compliant telephone number (excluding country code).\nEMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).\nWEBSITE - URL starting with http:// or https://.\n",
                      "example": "5343245789"
                    }
                  }
                }
              }
            }
          },
          "account": {
            "type": "object",
            "required": [
              "number",
              "routingCodeType",
              "routingNumber",
              "countryCode"
            ],
            "description": "Bank account details of the recipient.",
            "properties": {
              "number": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{1,35}$",
                "description": "Payment Routing Number or Demand Deposit Account number.",
                "example": "021000021"
              },
              "type": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "CHECKING",
                  "SAVINGS"
                ],
                "description": "Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.",
                "example": "CHECKING"
              },
              "routingCodeType": {
                "type": "string",
                "nullable": false,
                "enum": [
                  "USABA"
                ],
                "description": "Type of routing code. Only USABA is supported in this version of Embedded Banking.",
                "example": "USABA"
              },
              "routingNumber": {
                "type": "string",
                "nullable": false,
                "pattern": "^\\d{9}$",
                "description": "Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)",
                "example": "021000021"
              },
              "countryCode": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.",
                "example": "US"
              }
            }
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "required": [
          "limit",
          "page",
          "totalItems"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The number of items on a page"
          },
          "page": {
            "type": "integer",
            "description": "The page number"
          },
          "totalItems": {
            "type": "integer",
            "description": "Total number of items in all pages"
          }
        }
      },
      "ContactDetails": {
        "type": "object",
        "required": [
          "name",
          "agent"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Contact name",
            "example": "Service Agent"
          },
          "agent": {
            "type": "boolean",
            "description": "Agent identifier",
            "example": false
          }
        }
      },
      "CasesDetails": {
        "type": "object",
        "required": [
          "id",
          "type",
          "status",
          "subject",
          "createdDate",
          "updatedDate",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Case ID. A unique identifier for a case.",
            "example": "00001154"
          },
          "type": {
            "type": "string",
            "description": "Case category",
            "enum": [
              "ACCOUNT",
              "CARD",
              "ENROLLMENT_OR_SIGNUP",
              "OTHER",
              "PROFILE",
              "STATEMENT",
              "SUSPICIOUS_ACTIVITY",
              "TRANSACTION"
            ],
            "example": "ACCOUNT"
          },
          "status": {
            "type": "string",
            "description": "Current status on case",
            "enum": [
              "CLOSED",
              "REOPEN",
              "OPEN"
            ],
            "example": "OPEN"
          },
          "subject": {
            "type": "string",
            "description": "Subject of a case",
            "example": "Lost my debit card"
          },
          "createdDate": {
            "type": "string",
            "description": "Date/Time the case was opened",
            "example": "2022-02-22T18:02:23.000+0000"
          },
          "updatedDate": {
            "type": "string",
            "description": "Date/Time the case was closed",
            "example": "2022-02-24T19:02:23.000+0000"
          },
          "createdBy": {
            "type": "object",
            "required": [
              "name",
              "agent"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Contact name",
                "example": "Service Agent"
              },
              "agent": {
                "type": "boolean",
                "description": "Agent identifier",
                "example": false
              }
            }
          }
        }
      },
      "CasesPaginationResponse": {
        "type": "object",
        "required": [
          "metadata",
          "items"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "required": [
              "limit",
              "page",
              "totalItems"
            ],
            "properties": {
              "limit": {
                "type": "integer",
                "description": "The number of items on a page"
              },
              "page": {
                "type": "integer",
                "description": "The page number"
              },
              "totalItems": {
                "type": "integer",
                "description": "Total number of items in all pages"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "type",
                "status",
                "subject",
                "createdDate",
                "updatedDate",
                "createdBy"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Case ID. A unique identifier for a case.",
                  "example": "00001154"
                },
                "type": {
                  "type": "string",
                  "description": "Case category",
                  "enum": [
                    "ACCOUNT",
                    "CARD",
                    "ENROLLMENT_OR_SIGNUP",
                    "OTHER",
                    "PROFILE",
                    "STATEMENT",
                    "SUSPICIOUS_ACTIVITY",
                    "TRANSACTION"
                  ],
                  "example": "ACCOUNT"
                },
                "status": {
                  "type": "string",
                  "description": "Current status on case",
                  "enum": [
                    "CLOSED",
                    "REOPEN",
                    "OPEN"
                  ],
                  "example": "OPEN"
                },
                "subject": {
                  "type": "string",
                  "description": "Subject of a case",
                  "example": "Lost my debit card"
                },
                "createdDate": {
                  "type": "string",
                  "description": "Date/Time the case was opened",
                  "example": "2022-02-22T18:02:23.000+0000"
                },
                "updatedDate": {
                  "type": "string",
                  "description": "Date/Time the case was closed",
                  "example": "2022-02-24T19:02:23.000+0000"
                },
                "createdBy": {
                  "type": "object",
                  "required": [
                    "name",
                    "agent"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Contact name",
                      "example": "Service Agent"
                    },
                    "agent": {
                      "type": "boolean",
                      "description": "Agent identifier",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CaseCreateRequest": {
        "type": "object",
        "required": [
          "type",
          "subject",
          "description"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Case category",
            "enum": [
              "ACCOUNT",
              "CARD",
              "ENROLLMENT_OR_SIGNUP",
              "PROFILE",
              "STATEMENT",
              "SUSPICIOUS_ACTIVITY",
              "TRANSACTION",
              "OTHER"
            ],
            "example": "STATEMENT"
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^(?!\\s*$).+",
            "description": "Subject of a Case",
            "example": "Information on Statements"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3000,
            "pattern": "^(?!\\s*$).+",
            "description": "More detailed description of the Case",
            "example": "I would like more information about my statements and about charges on my account"
          }
        }
      },
      "CaseCreateResponse": {
        "type": "object",
        "required": [
          "id",
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Case identifier",
            "example": "00001159"
          },
          "createdDate": {
            "type": "string",
            "description": "Date/Time the case was opened",
            "example": "2022-02-24T19:02:23.000+0000"
          }
        }
      },
      "CommentDetails": {
        "type": "object",
        "required": [
          "createdDate",
          "comment",
          "commentedBy"
        ],
        "properties": {
          "createdDate": {
            "type": "string",
            "description": "Comment creation date",
            "example": "2022-01-06T21:53:27.000+0000"
          },
          "comment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3000,
            "pattern": "^(?!\\s*$).+",
            "description": "Comment description or a copy of the main points of the comment.",
            "example": "Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?"
          },
          "commentedBy": {
            "type": "object",
            "required": [
              "name",
              "agent"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Contact name",
                "example": "Service Agent"
              },
              "agent": {
                "type": "boolean",
                "description": "Agent identifier",
                "example": false
              }
            }
          }
        }
      },
      "CaseDetails": {
        "type": "object",
        "required": [
          "id",
          "type",
          "status",
          "origin",
          "subject",
          "description",
          "createdDate",
          "updatedDate",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Case identifier.",
            "example": "00001154"
          },
          "type": {
            "type": "string",
            "description": "Case category",
            "enum": [
              "ACCOUNT",
              "CARD",
              "ENROLLMENT_OR_SIGNUP",
              "OTHER",
              "PROFILE",
              "STATEMENT",
              "SUSPICIOUS_ACTIVITY",
              "TRANSACTION"
            ],
            "example": "ACCOUNT"
          },
          "status": {
            "type": "string",
            "description": "Current status on case.",
            "enum": [
              "CLOSED",
              "REOPEN",
              "OPEN"
            ],
            "example": "OPEN"
          },
          "origin": {
            "type": "string",
            "description": "How the case was originally reported. This can be by form, phone, or email.",
            "enum": [
              "PHONE",
              "FORM",
              "EMAIL"
            ],
            "example": "FORM"
          },
          "subject": {
            "type": "string",
            "description": "Subject of a case.",
            "example": "Issue with a payment made on 2/23/2022"
          },
          "description": {
            "type": "string",
            "description": "More detailed description of the case.",
            "example": "I noticed that I mistakenly made a payment to the wrong supplier. I would like to revert the charges and send the correct one."
          },
          "createdDate": {
            "type": "string",
            "description": "Date/Time the case was opened",
            "example": "2022-02-22T18:02:23.000+0000"
          },
          "updatedDate": {
            "type": "string",
            "description": "Date/Time the case was closed",
            "example": "2022-02-24T19:02:23.000+0000"
          },
          "createdBy": {
            "type": "object",
            "required": [
              "name",
              "agent"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Contact name",
                "example": "Service Agent"
              },
              "agent": {
                "type": "boolean",
                "description": "Agent identifier",
                "example": false
              }
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "createdDate",
                "comment",
                "commentedBy"
              ],
              "properties": {
                "createdDate": {
                  "type": "string",
                  "description": "Comment creation date",
                  "example": "2022-01-06T21:53:27.000+0000"
                },
                "comment": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 3000,
                  "pattern": "^(?!\\s*$).+",
                  "description": "Comment description or a copy of the main points of the comment.",
                  "example": "Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?"
                },
                "commentedBy": {
                  "type": "object",
                  "required": [
                    "name",
                    "agent"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Contact name",
                      "example": "Service Agent"
                    },
                    "agent": {
                      "type": "boolean",
                      "description": "Agent identifier",
                      "example": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CaseUpdateRequest": {
        "type": "object",
        "required": [
          "comment"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN.",
            "enum": [
              "CLOSED",
              "REOPEN"
            ],
            "example": "REOPEN"
          },
          "comment": {
            "type": "string",
            "description": "A comment on the case. Can be the reason for updating the status of a case.",
            "pattern": "^(?!\\s*$).+",
            "minLength": 1,
            "maxLength": 3000,
            "example": "I'm still having issues with one of my Debit cards. I would like to have a new card re-issued."
          }
        }
      },
      "FAQ": {
        "type": "object",
        "required": [
          "question",
          "answer",
          "type",
          "tags"
        ],
        "properties": {
          "question": {
            "type": "string",
            "description": "Question",
            "example": "How can I get a new Debit Card?"
          },
          "answer": {
            "type": "string",
            "description": "Answer",
            "example": "Login to your profile and request a new card"
          },
          "type": {
            "type": "string",
            "description": "FAQ Type enum",
            "enum": [
              "C1 General",
              "C1 Specific"
            ],
            "example": "C1 Specific"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "FAQ Tags",
            "example": [
              "Banking",
              "Payment"
            ]
          }
        }
      },
      "FAQResponse": {
        "type": "object",
        "description": "List of FAQ Questions and Answers",
        "required": [
          "faqs"
        ],
        "properties": {
          "faqs": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "question",
                "answer",
                "type",
                "tags"
              ],
              "properties": {
                "question": {
                  "type": "string",
                  "description": "Question",
                  "example": "How can I get a new Debit Card?"
                },
                "answer": {
                  "type": "string",
                  "description": "Answer",
                  "example": "Login to your profile and request a new card"
                },
                "type": {
                  "type": "string",
                  "description": "FAQ Type enum",
                  "enum": [
                    "C1 General",
                    "C1 Specific"
                  ],
                  "example": "C1 Specific"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "FAQ Tags",
                  "example": [
                    "Banking",
                    "Payment"
                  ]
                }
              }
            },
            "description": "Object of a FAQ"
          }
        }
      },
      "InternalTransactionsSearchResponse": {
        "type": "object",
        "required": [
          "transactionId",
          "debtorAccount",
          "creditorAccount",
          "currency",
          "createdDate",
          "amount",
          "accountingType",
          "status",
          "transactionType"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "status": {
                "description": "The current status of the transaction as it is processed:\n * `PENDING` - The transaction is still being processed.\n * `CANCELED` - The transaction has been canceled.\n * `COMPLETED` - The transaction has been completed.\n * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.\n * `REJECTED` - The transaction has been rejected and will not be completed.\n * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator.\n * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed.\n * `UNDEFINED` - The status of this transaction cannot be found.\n",
                "type": "string",
                "enum": [
                  "PENDING",
                  "CANCELED",
                  "COMPLETED",
                  "COMPLETED_WITH_EXCEPTIONS",
                  "COMPLETED_NOT_IN_TARGET_WALLET",
                  "REJECTED",
                  "RETURNED",
                  "PARTIALLY_COMPLETED",
                  "UNDEFINED"
                ],
                "example": "PENDING"
              },
              "transactionType": {
                "description": "Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.",
                "type": "string",
                "enum": [
                  "PAYIN",
                  "PAYTO",
                  "PAYINTO",
                  "TRANSFER",
                  "PAYOUT",
                  "PAYIN_REVERSAL",
                  "PAYOUT_REVERSAL",
                  "MISC_CREDIT",
                  "MISC_DEBIT",
                  "UNDEFINED",
                  "PAYINTORECEIPT",
                  "PAYOUTCOLLECTION",
                  "PAYINTOCOLLECTION",
                  "PAYINTO_RETURN",
                  "PAYOUTCOLLECTION_RETURN",
                  "PAYINTOCOLLECTION_RETURN",
                  "RETURN",
                  "CARD",
                  "FEE"
                ],
                "example": "PAYIN"
              },
              "ledgerBalance": {
                "description": "The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.",
                "type": "number",
                "example": 10000
              },
              "creationTimestamp": {
                "description": "The date and time the transaction was created.",
                "type": "string",
                "format": "date-time",
                "example": "2023-02-22T15:05:46.952+0000"
              },
              "effectiveDate": {
                "description": "The time and date when the ledger balance was updated.",
                "type": "string",
                "format": "date",
                "example": "2023-02-22T00:00:00.000Z"
              },
              "postingVersion": {
                "description": "A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.",
                "type": "integer",
                "example": 1
              },
              "transactionId": {
                "type": "string",
                "example": "qsajdb3ybv3",
                "description": "Unique identifier of a transaction"
              },
              "debtorAccount": {
                "type": "string",
                "example": "200293631511",
                "description": "Debtor account number (PRN)"
              },
              "creditorAccount": {
                "type": "string",
                "example": "200293631511",
                "description": "Creditor account number (PRN)"
              },
              "currency": {
                "type": "string",
                "example": "USD",
                "description": "Transaction currency"
              },
              "createdDate": {
                "type": "string",
                "example": "01-01-2022",
                "description": "Transaction creation date"
              },
              "amount": {
                "type": "string",
                "example": "12.45",
                "description": "Transaction amount"
              },
              "debtorName": {
                "type": "string",
                "example": "Modells Sporting Goods",
                "description": "The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name."
              },
              "creditorName": {
                "type": "string",
                "example": "HSBC Holding",
                "description": "The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name."
              },
              "accountingType": {
                "description": "Accounting type (Credit (CR) / Debit (DR)) for transaction",
                "type": "string",
                "nullable": false,
                "enum": [
                  "DR",
                  "CR"
                ],
                "example": "DR"
              },
              "paymentRoute": {
                "description": "The method by which the payment was made - RTP, WIRE, ACH",
                "type": "string",
                "enum": [
                  "RTP",
                  "WIRE",
                  "ACH"
                ],
                "example": "ACH"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "clientName": {
                "description": "Name of the client that is associated with the transaction",
                "type": "string",
                "example": "Hawaiian King Hotel"
              }
            }
          }
        ]
      },
      "CountryInformation": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "US"
          },
          "name": {
            "type": "string",
            "example": "United States"
          }
        }
      },
      "CountriesResponse": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "US"
                },
                "name": {
                  "type": "string",
                  "example": "United States"
                }
              }
            }
          }
        }
      },
      "LegalStructureResponse": {
        "type": "object",
        "properties": {
          "legalStructures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of client legal structures"
          }
        }
      },
      "DocumentTypeItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "legalStructures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentTypes": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "example": "IDENTITY_VERIFICATION"
          },
          "organization": {
            "type": "object",
            "properties": {
              "primary": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "legalStructures": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "secondary": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "legalStructures": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "individual": {
            "type": "object",
            "properties": {
              "primary": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "legalStructures": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "secondary": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "legalStructures": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DocumentTypeResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "example": "US"
          },
          "documentTypes": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "example": "IDENTITY_VERIFICATION"
              },
              "organization": {
                "type": "object",
                "properties": {
                  "primary": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "legalStructures": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "secondary": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "legalStructures": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "individual": {
                "type": "object",
                "properties": {
                  "primary": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "legalStructures": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "secondary": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "legalStructures": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DocumentTypesResponses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "country": {
              "type": "string",
              "example": "US"
            },
            "documentTypes": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "example": "IDENTITY_VERIFICATION"
                },
                "organization": {
                  "type": "object",
                  "properties": {
                    "primary": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "legalStructures": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "secondary": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "legalStructures": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "individual": {
                  "type": "object",
                  "properties": {
                    "primary": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "legalStructures": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "secondary": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "legalStructures": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DocumentTypesResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "country": {
                  "type": "string",
                  "example": "US"
                },
                "documentTypes": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "example": "IDENTITY_VERIFICATION"
                    },
                    "organization": {
                      "type": "object",
                      "properties": {
                        "primary": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              },
                              "legalStructures": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "secondary": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              },
                              "legalStructures": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "individual": {
                      "type": "object",
                      "properties": {
                        "primary": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              },
                              "legalStructures": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "secondary": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              },
                              "legalStructures": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IdentificationInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "EIN"
          },
          "id_value_type": {
            "type": "string",
            "example": "NUMERIC"
          },
          "id_value_length": {
            "type": "integer",
            "example": 10
          },
          "type": {
            "type": "string",
            "example": "NUMERIC"
          },
          "length": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "IdentificationTypes": {
        "type": "object",
        "properties": {
          "identificationTypes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "EIN"
                },
                "id_value_type": {
                  "type": "string",
                  "example": "NUMERIC"
                },
                "id_value_length": {
                  "type": "integer",
                  "example": 10
                },
                "type": {
                  "type": "string",
                  "example": "NUMERIC"
                },
                "length": {
                  "type": "integer",
                  "example": 10
                }
              }
            }
          }
        }
      },
      "IndustryCategory": {
        "type": "object",
        "properties": {
          "industryCategory": {
            "type": "string",
            "example": "Finance and Insurance"
          },
          "industryTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Abrasive Product Manufacturing"
            }
          }
        }
      },
      "IndustryCategories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "industryCategory": {
              "type": "string",
              "example": "Finance and Insurance"
            },
            "industryTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Abrasive Product Manufacturing"
              }
            }
          }
        }
      },
      "IndustryCategoriesReponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "industryCategory": {
                  "type": "string",
                  "example": "Finance and Insurance"
                },
                "industryTypes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Abrasive Product Manufacturing"
                  }
                }
              }
            }
          }
        }
      },
      "StateInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alabama"
          },
          "code": {
            "type": "string",
            "example": "AL"
          }
        }
      },
      "StateResponse": {
        "type": "object",
        "properties": {
          "states": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Alabama"
                },
                "code": {
                  "type": "string",
                  "example": "AL"
                }
              }
            }
          },
          "country_code": {
            "type": "string",
            "example": "US"
          }
        }
      },
      "SubdivisionInformation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alabama"
          },
          "code": {
            "type": "string",
            "example": "AL"
          }
        }
      },
      "CountrySubdivisionResponse": {
        "type": "object",
        "properties": {
          "subDivision": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Alabama"
                },
                "code": {
                  "type": "string",
                  "example": "AL"
                }
              }
            }
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          }
        }
      },
      "ProductInformation": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EB"
          },
          "name": {
            "type": "string",
            "example": "Embedded Banking"
          }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "EB"
                },
                "name": {
                  "type": "string",
                  "example": "Embedded Banking"
                }
              }
            }
          }
        }
      },
      "BusinessTypes": {
        "type": "object",
        "properties": {
          "businessTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Sole Proprietorship",
              "Privately Owned Business"
            ],
            "description": "The list of business types."
          }
        }
      },
      "JobTitles": {
        "type": "object",
        "properties": {
          "jobTitles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "CEO",
              "CFO",
              "COO",
              "President",
              "Other"
            ],
            "description": "The list of job titles"
          }
        }
      },
      "PartyRoles": {
        "type": "object",
        "properties": {
          "partyRoles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of available partyRoles e.g. OWNER, DECISION_MAKER, CONTROLLER"
          }
        }
      },
      "AddressTypes": {
        "type": "object",
        "properties": {
          "addressTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of available partyRoles e.g. \"Principle place of business\", \"Primary Residence\""
          }
        }
      },
      "NatureOfOwnerships": {
        "type": "object",
        "properties": {
          "natureOfOwnerships": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of available partyRoles e.g.  \"Direct\", \"Indirect\""
          }
        }
      },
      "PartyTypes": {
        "type": "object",
        "properties": {
          "partyTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of available partyRoles e.g.   \"Individual\", \"Organization\""
          }
        }
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "description": "Payment routing number of the account related to the statement.",
            "type": "string",
            "example": "20000046316998"
          },
          "createdDate": {
            "description": "Statement creation date and time.",
            "type": "string",
            "example": "2022-08-01T12:00"
          },
          "month": {
            "type": "string",
            "example": "AUGUST"
          },
          "year": {
            "type": "string",
            "example": "2022"
          }
        }
      },
      "Statement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Statement identifier used to retrieve statement document (Base64 encoded).",
            "example": "ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl"
          },
          "metaData": {
            "type": "object",
            "properties": {
              "accountNumber": {
                "description": "Payment routing number of the account related to the statement.",
                "type": "string",
                "example": "20000046316998"
              },
              "createdDate": {
                "description": "Statement creation date and time.",
                "type": "string",
                "example": "2022-08-01T12:00"
              },
              "month": {
                "type": "string",
                "example": "AUGUST"
              },
              "year": {
                "type": "string",
                "example": "2022"
              }
            }
          }
        }
      },
      "StatementsResponse": {
        "type": "object",
        "properties": {
          "statements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Statement identifier used to retrieve statement document (Base64 encoded).",
                  "example": "ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl"
                },
                "metaData": {
                  "type": "object",
                  "properties": {
                    "accountNumber": {
                      "description": "Payment routing number of the account related to the statement.",
                      "type": "string",
                      "example": "20000046316998"
                    },
                    "createdDate": {
                      "description": "Statement creation date and time.",
                      "type": "string",
                      "example": "2022-08-01T12:00"
                    },
                    "month": {
                      "type": "string",
                      "example": "AUGUST"
                    },
                    "year": {
                      "type": "string",
                      "example": "2022"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AccountState": {
        "description": "Account State",
        "type": "string",
        "enum": [
          "OPEN",
          "CLOSED",
          "PENDING_CLOSE"
        ],
        "example": "OPEN"
      },
      "schemas-CountryCode": {
        "type": "string",
        "enum": [
          "US"
        ],
        "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
        "example": "US"
      },
      "RoutingCode": {
        "type": "string",
        "enum": [
          "ABA"
        ],
        "description": "Routing codes supported (currently only ABA is supported)",
        "example": "ABA"
      },
      "RoutingInformationDto": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ABA"
            ],
            "description": "Routing codes supported (currently only ABA is supported)",
            "example": "ABA"
          },
          "value": {
            "type": "string",
            "description": "Routing number",
            "example": "028000024"
          }
        }
      },
      "PaymentRoutingInformationDto": {
        "type": "object",
        "required": [
          "accountNumber",
          "country",
          "routingInformation"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "20000113278882",
            "description": "Account number (PRN)"
          },
          "country": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
            "example": "US"
          },
          "routingInformation": {
            "type": "array",
            "description": "Routing information",
            "items": {
              "type": "object",
              "required": [
                "type",
                "value"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "ABA"
                  ],
                  "description": "Routing codes supported (currently only ABA is supported)",
                  "example": "ABA"
                },
                "value": {
                  "type": "string",
                  "description": "Routing number",
                  "example": "028000024"
                }
              }
            }
          }
        }
      },
      "AccountResponse": {
        "type": "object",
        "required": [
          "id",
          "label",
          "state",
          "paymentRoutingInformation"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "label": {
            "type": "string",
            "example": "TAXES1234",
            "description": "Account label"
          },
          "state": {
            "description": "Account State",
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "PENDING_CLOSE"
            ],
            "example": "OPEN"
          },
          "paymentRoutingInformation": {
            "type": "object",
            "required": [
              "accountNumber",
              "country",
              "routingInformation"
            ],
            "properties": {
              "accountNumber": {
                "type": "string",
                "example": "20000113278882",
                "description": "Account number (PRN)"
              },
              "country": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                "example": "US"
              },
              "routingInformation": {
                "type": "array",
                "description": "Routing information",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ABA"
                      ],
                      "description": "Routing codes supported (currently only ABA is supported)",
                      "example": "ABA"
                    },
                    "value": {
                      "type": "string",
                      "description": "Routing number",
                      "example": "028000024"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListAccountsResponse": {
        "type": "object",
        "required": [
          "metadata",
          "items"
        ],
        "properties": {
          "metadata": {
            "nullable": false,
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "example": 2,
                "description": "Page Number.\n"
              },
              "limit": {
                "type": "integer",
                "example": 30,
                "description": "Number of records per page.\n"
              },
              "total_items": {
                "type": "integer",
                "example": 340,
                "description": "Total number of items.\n"
              }
            }
          },
          "items": {
            "type": "array",
            "nullable": false,
            "description": "List of accounts for a specific client",
            "items": {
              "type": "object",
              "required": [
                "id",
                "label",
                "state",
                "paymentRoutingInformation"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Account identifier",
                  "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                },
                "label": {
                  "type": "string",
                  "example": "TAXES1234",
                  "description": "Account label"
                },
                "state": {
                  "description": "Account State",
                  "type": "string",
                  "enum": [
                    "OPEN",
                    "CLOSED",
                    "PENDING_CLOSE"
                  ],
                  "example": "OPEN"
                },
                "paymentRoutingInformation": {
                  "type": "object",
                  "required": [
                    "accountNumber",
                    "country",
                    "routingInformation"
                  ],
                  "properties": {
                    "accountNumber": {
                      "type": "string",
                      "example": "20000113278882",
                      "description": "Account number (PRN)"
                    },
                    "country": {
                      "type": "string",
                      "enum": [
                        "US"
                      ],
                      "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                      "example": "US"
                    },
                    "routingInformation": {
                      "type": "array",
                      "description": "Routing information",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "value"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "ABA"
                            ],
                            "description": "Routing codes supported (currently only ABA is supported)",
                            "example": "ABA"
                          },
                          "value": {
                            "type": "string",
                            "description": "Routing number",
                            "example": "028000024"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "schemas-ApiErrorReason": {
        "type": "object",
        "required": [
          "reason",
          "message"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "pattern": "^[A-Z0-9_]+$",
            "description": "Readable reason returned to indicate a reason behind the error occurred",
            "example": "INVALID_INPUT_VALUE_LENGTH"
          },
          "field": {
            "type": "string",
            "example": "header client_id",
            "description": "Part of the request which is responsible for the reason"
          },
          "rejectedValue": {
            "type": "object",
            "description": "Rejected value from the request which is responsible for the reason"
          },
          "message": {
            "type": "string",
            "example": "Client with ID 0031234567 does not exist.",
            "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
          }
        }
      },
      "schemas-ApiError": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "discriminator": {
          "propertyName": "error"
        },
        "properties": {
          "error": {
            "type": "string",
            "pattern": "^[A-Z0-9_]+$",
            "description": "Readable code returned to indicate an error occurred",
            "example": "BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
            "example": "Error in Request Formatting"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "reason",
                "message"
              ],
              "properties": {
                "reason": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable reason returned to indicate a reason behind the error occurred",
                  "example": "INVALID_INPUT_VALUE_LENGTH"
                },
                "field": {
                  "type": "string",
                  "example": "header client_id",
                  "description": "Part of the request which is responsible for the reason"
                },
                "rejectedValue": {
                  "type": "object",
                  "description": "Rejected value from the request which is responsible for the reason"
                },
                "message": {
                  "type": "string",
                  "example": "Client with ID 0031234567 does not exist.",
                  "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                }
              }
            }
          }
        }
      },
      "CreateAccountRequest": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Account label: PROJECT, TAXES or RAINY_DAY",
            "example": "TAXES"
          }
        }
      },
      "PaymentRoutingStatus": {
        "description": "Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.",
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ],
        "example": "ACTIVE"
      },
      "PaymentRoutingInformationDtoWithStatus": {
        "type": "object",
        "required": [
          "accountNumber",
          "country",
          "routingInformation",
          "status"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "20000113278882",
            "description": "Account number (PRN)"
          },
          "country": {
            "type": "string",
            "enum": [
              "US"
            ],
            "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
            "example": "US"
          },
          "routingInformation": {
            "type": "array",
            "description": "Routing information",
            "items": {
              "type": "object",
              "required": [
                "type",
                "value"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "ABA"
                  ],
                  "description": "Routing codes supported (currently only ABA is supported)",
                  "example": "ABA"
                },
                "value": {
                  "type": "string",
                  "description": "Routing number",
                  "example": "028000024"
                }
              }
            }
          },
          "status": {
            "description": "Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          }
        }
      },
      "AccountResponseWithStatus": {
        "type": "object",
        "required": [
          "id",
          "label",
          "state",
          "paymentRoutingInformation"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "label": {
            "type": "string",
            "example": "TAXES1234",
            "description": "Account label"
          },
          "state": {
            "description": "Account State",
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED",
              "PENDING_CLOSE"
            ],
            "example": "OPEN"
          },
          "paymentRoutingInformation": {
            "type": "object",
            "required": [
              "accountNumber",
              "country",
              "routingInformation",
              "status"
            ],
            "properties": {
              "accountNumber": {
                "type": "string",
                "example": "20000113278882",
                "description": "Account number (PRN)"
              },
              "country": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                "example": "US"
              },
              "routingInformation": {
                "type": "array",
                "description": "Routing information",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ABA"
                      ],
                      "description": "Routing codes supported (currently only ABA is supported)",
                      "example": "ABA"
                    },
                    "value": {
                      "type": "string",
                      "description": "Routing number",
                      "example": "028000024"
                    }
                  }
                }
              },
              "status": {
                "description": "Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE"
                ],
                "example": "ACTIVE"
              }
            }
          }
        }
      },
      "AccountBalanceDto": {
        "type": "object",
        "required": [
          "typeCode",
          "amount"
        ],
        "properties": {
          "typeCode": {
            "type": "string",
            "enum": [
              "ITAV",
              "ITBD"
            ],
            "description": "Balance type: ITAV (interim available balance) or ITBD (interim booked balance)",
            "example": "ITAV"
          },
          "amount": {
            "type": "number",
            "description": "Balance amount",
            "example": 100.23
          }
        }
      },
      "AccountBalanceResponse": {
        "type": "object",
        "required": [
          "id",
          "date",
          "currency",
          "balanceTypes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "date": {
            "type": "string",
            "description": "Balance date",
            "example": "2020-03-12T00:00:00.000Z"
          },
          "currency": {
            "type": "string",
            "description": "Balance currency",
            "example": "USD"
          },
          "balanceTypes": {
            "type": "array",
            "description": "List of account balances",
            "items": {
              "type": "object",
              "required": [
                "typeCode",
                "amount"
              ],
              "properties": {
                "typeCode": {
                  "type": "string",
                  "enum": [
                    "ITAV",
                    "ITBD"
                  ],
                  "description": "Balance type: ITAV (interim available balance) or ITBD (interim booked balance)",
                  "example": "ITAV"
                },
                "amount": {
                  "type": "number",
                  "description": "Balance amount",
                  "example": 100.23
                }
              }
            }
          }
        }
      },
      "AccountOpsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "clientId": {
            "type": "string",
            "description": "Client identifier",
            "example": "0030000132"
          },
          "label": {
            "type": "string",
            "example": "TAXES1234",
            "description": "Account label"
          },
          "state": {
            "type": "string",
            "description": "Account state",
            "enum": [
              "OPEN",
              "PENDING_CLOSE",
              "CLOSED"
            ]
          },
          "paymentRoutingInformation": {
            "type": "object",
            "required": [
              "accountNumber",
              "country",
              "routingInformation"
            ],
            "properties": {
              "accountNumber": {
                "type": "string",
                "example": "20000113278882",
                "description": "Account number (PRN)"
              },
              "country": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                "example": "US"
              },
              "routingInformation": {
                "type": "array",
                "description": "Routing information",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ABA"
                      ],
                      "description": "Routing codes supported (currently only ABA is supported)",
                      "example": "ABA"
                    },
                    "value": {
                      "type": "string",
                      "description": "Routing number",
                      "example": "028000024"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PrnRoutingInformationExternalV2": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        }
      },
      "PaymentRoutingNumberExternalV2": {
        "type": "object",
        "properties": {
          "paymentRoutingNumber": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "routingInformation": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BalanceLimits": {
        "type": "object",
        "properties": {
          "minimumBalance": {
            "type": "number",
            "example": 0.11
          },
          "maximumBalance": {
            "type": "number",
            "example": 1000000.11
          }
        }
      },
      "RegulatoryReporting": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "legalEntityIdentifier": {
            "type": "string"
          },
          "businessUnitIdentifier": {
            "type": "string"
          }
        }
      },
      "PostingRestrictionV2ExternalResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "restrictionId": {
              "type": "string"
            },
            "restrictionType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DEBITS",
                  "CREDITS",
                  "ALL",
                  "NOT_BLOCKED"
                ]
              }
            },
            "restrictionReason": {
              "type": "string"
            },
            "requestor": {
              "type": "string"
            },
            "referralContact": {
              "type": "string"
            },
            "notes": {
              "type": "string"
            }
          }
        }
      },
      "VirtualAccountOptionsResponse": {
        "type": "object",
        "properties": {
          "paymentRoutingNumber": {
            "type": "object",
            "properties": {
              "paymentRoutingNumber": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "routingInformation": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "balanceLimits": {
            "type": "object",
            "properties": {
              "minimumBalance": {
                "type": "number",
                "example": 0.11
              },
              "maximumBalance": {
                "type": "number",
                "example": 1000000.11
              }
            }
          },
          "regulatoryReporting": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "legalEntityIdentifier": {
                "type": "string"
              },
              "businessUnitIdentifier": {
                "type": "string"
              }
            }
          },
          "postingRestrictions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "restrictionId": {
                  "type": "string"
                },
                "restrictionType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "DEBITS",
                      "CREDITS",
                      "ALL",
                      "NOT_BLOCKED"
                    ]
                  }
                },
                "restrictionReason": {
                  "type": "string"
                },
                "requestor": {
                  "type": "string"
                },
                "referralContact": {
                  "type": "string"
                },
                "notes": {
                  "type": "string"
                }
              }
            }
          },
          "customerIdentifier": {
            "type": "string"
          }
        }
      },
      "IndividualWalletV2ExternalResponse": {
        "type": "object",
        "properties": {
          "requestIdentification": {
            "type": "string"
          },
          "parentAccountName": {
            "type": "string"
          },
          "accountName": {
            "type": "string"
          },
          "accountType": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VSA",
                "VTA",
                "SHADOW",
                "PAYIN",
                "PAYOUT",
                "SBAL",
                "CARD",
                "DEFAULT",
                "DEFAULTSUMMARY"
              ]
            }
          },
          "accountOptions": {
            "type": "object",
            "properties": {
              "paymentRoutingNumber": {
                "type": "object",
                "properties": {
                  "paymentRoutingNumber": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "routingInformation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "balanceLimits": {
                "type": "object",
                "properties": {
                  "minimumBalance": {
                    "type": "number",
                    "example": 0.11
                  },
                  "maximumBalance": {
                    "type": "number",
                    "example": 1000000.11
                  }
                }
              },
              "regulatoryReporting": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "legalEntityIdentifier": {
                    "type": "string"
                  },
                  "businessUnitIdentifier": {
                    "type": "string"
                  }
                }
              },
              "postingRestrictions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "restrictionId": {
                      "type": "string"
                    },
                    "restrictionType": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "DEBITS",
                          "CREDITS",
                          "ALL",
                          "NOT_BLOCKED"
                        ]
                      }
                    },
                    "restrictionReason": {
                      "type": "string"
                    },
                    "requestor": {
                      "type": "string"
                    },
                    "referralContact": {
                      "type": "string"
                    },
                    "notes": {
                      "type": "string"
                    }
                  }
                }
              },
              "customerIdentifier": {
                "type": "string"
              }
            }
          },
          "accountState": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OPEN",
                "PENDING_CLOSE",
                "CLOSED"
              ]
            }
          }
        }
      },
      "AccountOpsWithWalletResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "label": {
            "type": "string",
            "example": "TAXES1234",
            "description": "Account label"
          },
          "state": {
            "type": "string",
            "description": "Account state",
            "enum": [
              "OPEN",
              "PENDING_CLOSE",
              "CLOSED"
            ]
          },
          "paymentRoutingInformation": {
            "type": "object",
            "required": [
              "accountNumber",
              "country",
              "routingInformation"
            ],
            "properties": {
              "accountNumber": {
                "type": "string",
                "example": "20000113278882",
                "description": "Account number (PRN)"
              },
              "country": {
                "type": "string",
                "enum": [
                  "US"
                ],
                "description": "Two letter country code based on ISO 3166 standard (currently only US is supported)",
                "example": "US"
              },
              "routingInformation": {
                "type": "array",
                "description": "Routing information",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ABA"
                      ],
                      "description": "Routing codes supported (currently only ABA is supported)",
                      "example": "ABA"
                    },
                    "value": {
                      "type": "string",
                      "description": "Routing number",
                      "example": "028000024"
                    }
                  }
                }
              }
            }
          },
          "walletResponse": {
            "type": "object",
            "properties": {
              "requestIdentification": {
                "type": "string"
              },
              "parentAccountName": {
                "type": "string"
              },
              "accountName": {
                "type": "string"
              },
              "accountType": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "VSA",
                    "VTA",
                    "SHADOW",
                    "PAYIN",
                    "PAYOUT",
                    "SBAL",
                    "CARD",
                    "DEFAULT",
                    "DEFAULTSUMMARY"
                  ]
                }
              },
              "accountOptions": {
                "type": "object",
                "properties": {
                  "paymentRoutingNumber": {
                    "type": "object",
                    "properties": {
                      "paymentRoutingNumber": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "routingInformation": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "balanceLimits": {
                    "type": "object",
                    "properties": {
                      "minimumBalance": {
                        "type": "number",
                        "example": 0.11
                      },
                      "maximumBalance": {
                        "type": "number",
                        "example": 1000000.11
                      }
                    }
                  },
                  "regulatoryReporting": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "legalEntityIdentifier": {
                        "type": "string"
                      },
                      "businessUnitIdentifier": {
                        "type": "string"
                      }
                    }
                  },
                  "postingRestrictions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "restrictionId": {
                          "type": "string"
                        },
                        "restrictionType": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "DEBITS",
                              "CREDITS",
                              "ALL",
                              "NOT_BLOCKED"
                            ]
                          }
                        },
                        "restrictionReason": {
                          "type": "string"
                        },
                        "requestor": {
                          "type": "string"
                        },
                        "referralContact": {
                          "type": "string"
                        },
                        "notes": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "customerIdentifier": {
                    "type": "string"
                  }
                }
              },
              "accountState": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "OPEN",
                    "PENDING_CLOSE",
                    "CLOSED"
                  ]
                }
              }
            }
          }
        }
      },
      "SearchAccountRequest": {
        "type": "object",
        "properties": {
          "prn": {
            "type": "string",
            "example": "20000113278882",
            "description": "Account number (PRN)"
          }
        }
      },
      "AccountStructureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          },
          "type": {
            "type": "string",
            "example": "VSA",
            "description": "Account type"
          },
          "accountNumber": {
            "type": "string",
            "example": "20000113278882",
            "description": "Account number (PRN)"
          },
          "parentAccountId": {
            "type": "string",
            "description": "Parent account identifier",
            "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
          }
        }
      },
      "AccountStructureResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Account identifier",
                  "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                },
                "type": {
                  "type": "string",
                  "example": "VSA",
                  "description": "Account type"
                },
                "accountNumber": {
                  "type": "string",
                  "example": "20000113278882",
                  "description": "Account number (PRN)"
                },
                "parentAccountId": {
                  "type": "string",
                  "description": "Parent account identifier",
                  "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
                }
              }
            }
          }
        }
      },
      "CreateOpsAccountStructureRequest": {
        "type": "object",
        "required": [
          "walletProgramId",
          "branch",
          "name",
          "ecid",
          "dda"
        ],
        "properties": {
          "walletProgramId": {
            "type": "string",
            "example": "1000000082"
          },
          "branch": {
            "type": "string",
            "example": "0802"
          },
          "name": {
            "type": "string",
            "example": "OPS Account"
          },
          "ecid": {
            "type": "string",
            "example": "10009267254"
          },
          "dda": {
            "type": "string",
            "example": "0182119492"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "BAD_REQUEST",
              "message": "Error in Request Formatting",
              "reasons": [
                {
                  "reason": "CURRENCY_NOT_SUPPORTED",
                  "message": "Currency not supported. Make sure you specify a default currency type from ISO 3166.",
                  "field": "body .currency",
                  "rejectedValue": "USDX"
                },
                {
                  "reason": "INVALID_AMOUNT",
                  "message": "Invalid amount specified. Check the amount and retry.",
                  "field": "body .amount",
                  "rejectedValue": "123.23.3"
                }
              ]
            }
          }
        }
      },
      "401": {
        "description": "Unauthenticated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "UNAUTHORIZED",
              "message": "Request is unauthorized",
              "reasons": [
                {
                  "reason": "MALFORMED_TOKEN",
                  "message": "Provided token does not follow required JWT format. It may also be missing mandatory parts"
                }
              ]
            }
          }
        }
      },
      "403": {
        "description": "Forbidden - Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "FORBIDDEN",
              "message": "Unauthorized request. The client does not have access rights to the content."
            }
          }
        }
      },
      "404": {
        "description": "No data found for the criteria specified",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "NOT_FOUND",
              "message": "The server can not find the requested resource."
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error - Generic Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "INTERNAL_SERVER_ERROR",
              "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable - API Processing Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "string",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "error": "SERVICE_UNAVAILABLE",
              "message": "The server encountered an unexpected condition that prevented it from fulfilling the request."
            }
          }
        }
      },
      "4001": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "4011": {
        "description": "Unauthenticated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "4031": {
        "description": "Forbidden - Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "4041": {
        "description": "The server can not find the requested resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "5001": {
        "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "5031": {
        "description": "Service Unavailable - API Processing Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error",
                "message"
              ],
              "discriminator": {
                "propertyName": "error"
              },
              "properties": {
                "error": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_]+$",
                  "description": "Readable code returned to indicate an error occurred",
                  "example": "BAD_REQUEST"
                },
                "message": {
                  "type": "string",
                  "description": "Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise",
                  "example": "Error in Request Formatting"
                },
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "reason": {
                        "type": "string",
                        "pattern": "^[A-Z0-9_]+$",
                        "description": "Readable reason returned to indicate a reason behind the error occurred",
                        "example": "INVALID_INPUT_VALUE_LENGTH"
                      },
                      "field": {
                        "type": "string",
                        "example": "header client_id",
                        "description": "Part of the request which is responsible for the reason"
                      },
                      "rejectedValue": {
                        "type": "object",
                        "description": "Rejected value from the request which is responsible for the reason"
                      },
                      "message": {
                        "type": "string",
                        "example": "Client with ID 0031234567 does not exist.",
                        "description": "Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "countryCode": {
        "name": "countryCode",
        "in": "query",
        "description": "Two-letter ISO code for a country, such as US for USA.",
        "required": false,
        "examples": {
          "Default": {
            "value": "US"
          }
        },
        "schema": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "^[A-Z]{2}$",
          "example": "US",
          "description": "ISO 3166-1 Alpha-2 Country Code"
        }
      },
      "documentCategory": {
        "name": "documentCategory",
        "in": "query",
        "description": "Document category type.",
        "required": false,
        "example": "IDENTITY_VERIFICATION",
        "schema": {
          "type": "string"
        }
      },
      "legalStructure": {
        "name": "legalStructure",
        "in": "query",
        "description": "url encoded legalStructure type.",
        "required": false,
        "example": "Limited Liability Company",
        "schema": {
          "type": "string"
        }
      },
      "platformId": {
        "name": "platform_id",
        "in": "header",
        "description": "Unique identifier for the platform.",
        "required": true,
        "example": "0005191231 ",
        "schema": {
          "type": "string"
        }
      },
      "clientId": {
        "name": "client_id",
        "in": "header",
        "description": "Unique Client Identifier (C2) with following pattern - '^\\d{10}$'",
        "required": true,
        "example": "0030000131",
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}$"
        }
      },
      "clientIdQuery": {
        "name": "client_id",
        "in": "query",
        "description": "Unique client identifier",
        "example": "0030000131",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}$"
        }
      },
      "legalDocumentType": {
        "name": "type",
        "in": "query",
        "description": "The type of legal document. Can be terms and conditions or disclosure and consent documents.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "TERMS_CONDITION",
            "DISCLOSURE_AND_CONSENT"
          ]
        }
      },
      "product": {
        "name": "product",
        "in": "query",
        "description": "The product type to which the legal documents apply. Value should always be EB, for Embedded Banking.",
        "schema": {
          "type": "string",
          "enum": [
            "EB"
          ]
        },
        "required": true
      },
      "token": {
        "name": "token",
        "in": "header",
        "description": "JWT Client token",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "checkDepositID": {
        "in": "path",
        "name": "id",
        "description": "Check deposit identification number.",
        "required": true,
        "example": "1234567890",
        "schema": {
          "type": "string"
        }
      },
      "pageSize": {
        "name": "limit",
        "in": "query",
        "description": "Number of records per page.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 25
        }
      },
      "pageNo": {
        "name": "page",
        "in": "query",
        "description": "Page Number",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "clientIdHeader": {
        "name": "client_id",
        "in": "header",
        "description": "Unique client identifier",
        "example": "0030000131",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}$"
        }
      },
      "accountId": {
        "name": "id",
        "in": "path",
        "description": "Unique account identifier",
        "schema": {
          "type": "string"
        },
        "required": true,
        "example": "dc2eda9084bf40b7a1d8baa8c5e0ea0ax"
      },
      "parameters-pageSize": {
        "name": "limit",
        "in": "query",
        "description": "Number of records per page.",
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "parameters-pageNo": {
        "name": "page",
        "in": "query",
        "description": "Page Number",
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "securitySchemes": {
      "TokenAuth": {
        "type": "apiKey",
        "description": "API key to authorize requests (TBC).",
        "name": "appid",
        "in": "header"
      },
      "IDAnywhere": {
        "type": "apiKey",
        "description": "IDAnywhere token to authorize requests.",
        "name": "Authorization",
        "in": "header"
      }
    },
    "examples": {
      "CreateClientSolePropReq": {
        "summary": "Create Client - Sole Prop",
        "description": "Create Client - Sole Prop",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Sole Proprietorship",
          "legalStructure": "Sole Proprietorship",
          "businessName": "Unitedhealth Group Incorporated 003",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "identities": [
            {
              "idType": "SSN",
              "idDescription": "Employer Identification Number",
              "idIssuer": "US",
              "idValue": "100081236"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "email": "rgs@rgs.com",
          "websiteAvailable": true,
          "website": "https://www.robsgolfshop.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100081236"
                }
              ],
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              }
            }
          ]
        }
      },
      "CreateClientSolePropItinReq": {
        "summary": "Create Client - Sole Prop ITIN",
        "description": "Create Client - Sole Prop ITIN",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Sole Proprietorship",
          "businessName": "Unitedhealth Group Incorporated",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "legalStructure": "Sole Proprietorship",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Individual Taxpayer Identification Number",
              "idIssuer": "US",
              "idValue": "107595004"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "email": "rgs@rgs.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "websiteAvailable": true,
          "website": "https://www.robsgolfshop.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "suffix": "M.D.",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081234"
                }
              ],
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              }
            }
          ]
        }
      },
      "CreateClientLlcReq": {
        "summary": "Create Client - LLC",
        "description": "Create Client - LLC",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Privately Owned Business",
          "legalStructure": "Limited Liability Company",
          "businessName": "Rollo PVT LLC",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Employer Identification Number",
              "idIssuer": "US",
              "idValue": "457750412"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "websiteAvailable": true,
          "website": "https://www.rollopvtltd.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100081242"
                }
              ],
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-04T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100081245"
                }
              ],
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "firstName": "DMFN",
              "middleName": "DMMN",
              "lastName": "DMLN",
              "jobTitle": "CFO",
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100081246"
                }
              ],
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              }
            }
          ]
        }
      },
      "CreateClientLlcItinReq": {
        "summary": "Create Client - LLC ITIN",
        "description": "Create Client - LLC ITIN",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Privately Owned Business",
          "legalStructure": "Limited Liability Company",
          "businessName": "Rollo PVT LLC",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Individual Taxpayer Identification Number",
              "idIssuer": "US",
              "idValue": "457750412"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "websiteAvailable": true,
          "website": "https://www.rollopvtltd.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081242"
                }
              ],
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "jobTitle": "CFO",
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-02T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081243"
                }
              ],
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-03T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081244"
                }
              ],
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-04T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081245"
                }
              ],
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-05T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081246"
                }
              ],
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-06T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081247"
                }
              ],
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            }
          ]
        }
      },
      "CreateClientCorpReq": {
        "summary": "Create Client - Corp",
        "description": "Create Client - Corp",
        "value": {
          "products": [
            "EB"
          ],
          "businessName": "Caterease Banking First Client",
          "businessType": "Privately Owned Business",
          "legalStructure": "Corporation",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "websiteAvailable": true,
          "email": "rgs@rgs.com",
          "phone": {
            "countryCode": "1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.robsgolfshop.com",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Employer identification number",
              "idIssuer": "US",
              "idValue": "147099273"
            }
          ],
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER",
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100091984"
                }
              ],
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "50"
            },
            {
              "jobTitle": "CEO",
              "firstName": "Dave",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "dave.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100095284"
                }
              ],
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "50"
            }
          ]
        }
      },
      "CreateClientCorporationItinReq": {
        "summary": "Create Client - Corporation ITIN",
        "description": "Create Client - Corporation ITIN",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Privately Owned Business",
          "legalStructure": "Corporation",
          "businessName": "Rollo PVT Corporation",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Individual Taxpayer Identification Number",
              "idIssuer": "US",
              "idValue": "457750412"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "websiteAvailable": true,
          "website": "https://www.rollopvtltd.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081242"
                }
              ],
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "jobTitle": "CFO",
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-02T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081243"
                }
              ],
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-03T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081244"
                }
              ],
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-04T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081245"
                }
              ],
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-05T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081246"
                }
              ],
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-06T00:00:00.000Z",
              "identities": [
                {
                  "idType": "ITIN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081247"
                }
              ],
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            }
          ]
        }
      },
      "CreateClientLpSsnReq": {
        "summary": "Create Client - LP SSN",
        "description": "Create Client - LP SSN",
        "value": {
          "products": [
            "EB"
          ],
          "businessType": "Privately Owned Business",
          "legalStructure": "Limited Partnership",
          "businessName": "Rollo PVT LLP",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "identities": [
            {
              "idType": "EIN",
              "idDescription": "Individual Taxpayer Identification Number",
              "idIssuer": "US",
              "idValue": "457750412"
            }
          ],
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US"
          },
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "websiteAvailable": true,
          "website": "https://www.rollopvtltd.com",
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "relatedParties": [
            {
              "partyType": "Individual",
              "partyRole": [
                "CONTROLLER"
              ],
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "jobTitle": "CEO",
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-01T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Social Security Number",
                  "idIssuer": "US",
                  "idValue": "100081242"
                }
              ],
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "jobTitle": "CFO",
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-02T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081243"
                }
              ],
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              }
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-03T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081244"
                }
              ],
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-04T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081245"
                }
              ],
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-05T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081246"
                }
              ],
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            },
            {
              "partyType": "Individual",
              "partyRole": [
                "OWNER"
              ],
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US"
              },
              "birthDate": "1990-01-06T00:00:00.000Z",
              "identities": [
                {
                  "idType": "SSN",
                  "idDescription": "Individual Taxpayer Identification Number",
                  "idIssuer": "US",
                  "idValue": "100081247"
                }
              ],
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "natureOfOwnership": "Direct",
              "percentageOfOwnership": "25"
            }
          ]
        }
      },
      "CreateClientSolePropRes": {
        "summary": "Create Client - Sole Prop",
        "description": "Create Client - Sole Prop",
        "value": {
          "id": "1000011676",
          "businessName": "Unitedhealth Group Incorporated 003",
          "businessType": "Sole Proprietorship",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "websiteAvailable": true,
          "email": "rgs@rgs.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.robsgolfshop.com",
          "legalStructure": "Sole Proprietorship",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "e4c14bbb-8238-442b-a752-940ad71ad6c8",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:01.000Z"
        }
      },
      "CreateClientSolePropItinRes": {
        "summary": "Create Client - Sole Prop ITIN",
        "description": "Create Client - Sole Prop ITIN",
        "value": {
          "id": "1000011673",
          "businessName": "Unitedhealth Group Incorporated",
          "businessType": "Sole Proprietorship",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "websiteAvailable": true,
          "email": "rgs@rgs.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.robsgolfshop.com",
          "legalStructure": "Sole Proprietorship",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "10aa439e-abf9-4d3c-9f61-bfe6aac2e17c",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T10:09:39.000Z"
        }
      },
      "CreateClientLlcRes": {
        "summary": "Create Client - LLC",
        "description": "Create Client - LLC",
        "value": {
          "id": "1000011677",
          "businessName": "Rollo PVT LLC",
          "businessType": "Privately Owned Business",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": true,
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.rollopvtltd.com",
          "legalStructure": "Limited Liability Company",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "10123037-5879-41ff-a9c5-0992f5d4496f",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              },
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            },
            {
              "id": "87d64f5a-b63d-48a1-8213-e13c10277ab6",
              "status": "active",
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "birthDate": "1990-01-04T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "e165d19d-9514-410c-bec5-33b28a25d4a4",
              "status": "active",
              "jobTitle": "CFO",
              "firstName": "DMFN",
              "middleName": "DMMN",
              "lastName": "DMLN",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "partyType": "Individual",
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              },
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:16.000Z"
        }
      },
      "CreateClientLlcItinRes": {
        "summary": "Create Client - LLC ITIN",
        "description": "Create Client - LLC ITIN",
        "value": {
          "id": "1000011678",
          "businessName": "Rollo PVT LLC",
          "businessType": "Privately Owned Business",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": true,
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.rollopvtltd.com",
          "legalStructure": "Limited Liability Company",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "c4730b6e-6276-48c3-98c0-09e42bd1895b",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              },
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            },
            {
              "id": "e4fbc61c-5706-4796-966c-b11d7579fcf1",
              "status": "active",
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "birthDate": "1990-01-04T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "c7f97a1e-64e3-43e1-b0e9-ce1c2b3a996e",
              "status": "active",
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "birthDate": "1990-01-03T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "3e439e22-6ae4-4ac6-8046-9e51614340aa",
              "status": "active",
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "birthDate": "1990-01-06T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "41c57153-8110-484f-a2b6-6defb7230801",
              "status": "active",
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "birthDate": "1990-01-05T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "fe4c7cea-02ba-4197-bf45-ab6db3fa2529",
              "status": "active",
              "jobTitle": "CFO",
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "birthDate": "1990-01-02T00:00:00.000Z",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "partyType": "Individual",
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              },
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:23.000Z"
        }
      },
      "CreateClientCorpRes": {
        "summary": "Create Client - Corp",
        "description": "Create Client - Corp",
        "value": {
          "id": "1000011679",
          "businessName": "Caterease Banking First Client",
          "businessType": "Privately Owned Business",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make fabulous food for your four-legged best friend",
          "websiteAvailable": true,
          "email": "rgs@rgs.com",
          "phone": {
            "countryCode": "1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.robsgolfshop.com",
          "legalStructure": "Corporation",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "fd48765c-f753-4d1e-97ab-8f3fb6aa4142",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER",
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "Alex.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "29c43101-7234-44c3-8e01-350d585df20f",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Dave",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "dave.mitch@rgs.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:29.000Z"
        }
      },
      "CreateClientCorporationItinRes": {
        "summary": "Create Client - Corporation ITIN",
        "description": "Create Client - Corporation ITIN",
        "value": {
          "id": "1000011680",
          "businessName": "Rollo PVT Corporation",
          "businessType": "Privately Owned Business",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": true,
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.rollopvtltd.com",
          "legalStructure": "Corporation",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "5a2ef358-f2e2-46a8-af6f-873f35694680",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              },
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            },
            {
              "id": "3d0b699a-b62d-43fd-a264-1f4b8ebf6484",
              "status": "active",
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "birthDate": "1990-01-04T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "e5f34f9d-8678-482a-abbe-760f4336e28d",
              "status": "active",
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "birthDate": "1990-01-06T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "f2d987f9-9be2-4f4b-b356-9a3b79046ee2",
              "status": "active",
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "birthDate": "1990-01-05T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "c961175e-f0f0-4bed-beca-0e27208fd9e4",
              "status": "active",
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "birthDate": "1990-01-03T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "27ba007d-6bbb-4cf6-a07a-967d10ea01aa",
              "status": "active",
              "jobTitle": "CFO",
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "birthDate": "1990-01-02T00:00:00.000Z",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "partyType": "Individual",
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              },
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:35.000Z"
        }
      },
      "CreateClientLpSsnRes": {
        "summary": "Create Client - LP SSN",
        "description": "Create Client - LP SSN",
        "value": {
          "id": "1000011681",
          "businessName": "Rollo PVT LLP",
          "businessType": "Privately Owned Business",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": true,
          "email": "info@rollo.com",
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "website": "https://www.rollopvtltd.com",
          "legalStructure": "Limited Partnership",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": true,
          "entitiesInOwnership": false,
          "businessAliasName": "Accommodation and Food Services Alias Name",
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "78e4b9a5-d77b-467f-9c58-0dd790545b21",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "CONTROLLERFN",
              "middleName": "CONTROLLERMN",
              "lastName": "CONTROLLERLN",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "CONTROLLERFN.CONTROLLERLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304561"
              },
              "address": {
                "addressLine1": "451 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            },
            {
              "id": "ba91838e-6415-4f82-91d8-5ebabcaaa021",
              "status": "active",
              "firstName": "OWNERFNONE",
              "middleName": "OWNERMNONE",
              "lastName": "OWNERLNONE",
              "birthDate": "1990-01-03T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNONE.OWNERLNONE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304563"
              },
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "d6a881c7-a259-467f-ac8f-6f96aad1622c",
              "status": "active",
              "firstName": "OWNERFNFOUR",
              "middleName": "OWNERMNFOUR",
              "lastName": "OWNERLNFOUR",
              "birthDate": "1990-01-06T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNFOUR.OWNERLNFOUR@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304566"
              },
              "address": {
                "addressLine1": "456 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "9abba205-d184-4dcc-9296-0cf7c4973af0",
              "status": "active",
              "firstName": "OWNERFNTHREE",
              "middleName": "OWNERMNTHREE",
              "lastName": "OWNERLNTHREE",
              "birthDate": "1990-01-05T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTHREE.OWNERLNTHREE@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304565"
              },
              "address": {
                "addressLine1": "455 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "c004176b-815a-4c40-8933-e1cc6e2c3ef4",
              "status": "active",
              "firstName": "OWNERFNTWO",
              "middleName": "OWNERMNTWO",
              "lastName": "OWNERLNTWO",
              "birthDate": "1990-01-04T00:00:00.000Z",
              "partyRole": [
                "OWNER"
              ],
              "partyType": "Individual",
              "email": "OWNERFNTWO.OWNERLNTWO@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304564"
              },
              "address": {
                "addressLine1": "454 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              },
              "natureOfOwnership": "Direct"
            },
            {
              "id": "cdac35e9-f5bd-4a24-a53b-348e5607f4f7",
              "status": "active",
              "jobTitle": "CFO",
              "firstName": "DECISIONFN",
              "middleName": "DECISIONMN",
              "lastName": "DECISIONLN",
              "birthDate": "1990-01-02T00:00:00.000Z",
              "partyRole": [
                "DECISION_MAKER"
              ],
              "partyType": "Individual",
              "email": "DECISIONFN.DECISIONLN@rollo.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "2024304562"
              },
              "address": {
                "addressLine1": "452 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission",
          "products": [
            "EB"
          ],
          "profileStatus": "INACTIVE",
          "createdAt": "2023-03-09T13:15:41.000Z"
        }
      },
      "SkeletonClientClientShouldRetrieveItsOwnInformationRes": {
        "summary": "Skeleton Client - Client should retrieve its own information",
        "description": "Skeleton Client - Client should retrieve its own information",
        "value": {
          "id": "1000011675",
          "businessName": "Postman bunisess businessName",
          "websiteAvailable": false,
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "partyRole": [
            "CLIENT"
          ],
          "partyType": "Organization",
          "relatedParties": [
            {
              "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
              "status": "active",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "controller@email.com"
            }
          ],
          "enablePayouts": false,
          "onboardingStatus": "Pending Submission"
        }
      },
      "IncompleteOnboardingClientShouldRetrieveItsOwnInformationRes": {
        "summary": "Incomplete Onboarding - Client should retrieve its own information",
        "description": "Incomplete Onboarding - Client should retrieve its own information",
        "value": {
          "id": "1000011675",
          "businessName": "Postman bunisess businessName",
          "businessType": "Sole Proprietorship",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": false,
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "legalStructure": "Sole Proprietorship",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "partyRole": [
            "CLIENT"
          ],
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "controller@email.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": false,
          "onboardingStatus": "Review in Progress"
        }
      },
      "FullyOnboardedClientClientShouldRetrieveItsOwnInformationRes": {
        "summary": "Fully Onboarded Client - Client should retrieve its own information",
        "description": "Fully Onboarded Client - Client should retrieve its own information",
        "value": {
          "id": "1000011675",
          "businessName": "Postman bunisess businessName",
          "businessType": "Sole Proprietorship",
          "industryCategory": "Accommodation and Food Services",
          "industryType": "Full-Service Restaurants",
          "businessDescription": "We make delicious food for you and your friends",
          "websiteAvailable": false,
          "phone": {
            "countryCode": "+1",
            "phoneNumber": "2024304567"
          },
          "legalStructure": "Sole Proprietorship",
          "status": "ACTIVE",
          "parentClientId": "0005191231",
          "significantOwnership": false,
          "entitiesInOwnership": false,
          "partyRole": [
            "CLIENT"
          ],
          "partyType": "Organization",
          "address": {
            "addressLine1": "2550 Landmeier Rd",
            "addressLine2": "Elk Groove village",
            "addressLine3": "Elk Groove lane",
            "city": "Chicago",
            "state": "IL",
            "postalCode": "60007",
            "countryCode": "US",
            "addressType": "Principal place of business"
          },
          "relatedParties": [
            {
              "id": "f4c0d79c-edc0-44fd-97f7-557f683e87a8",
              "status": "active",
              "jobTitle": "CEO",
              "firstName": "Alex",
              "middleName": "XR",
              "lastName": "Mitch",
              "birthDate": "1990-01-01T00:00:00.000Z",
              "partyRole": [
                "CONTROLLER"
              ],
              "partyType": "Individual",
              "email": "controller@email.com",
              "phone": {
                "countryCode": "+1",
                "phoneNumber": "3453453450"
              },
              "address": {
                "addressLine1": "453 Rose Garden",
                "addressLine2": "Rose Lane",
                "addressLine3": "Rose House",
                "city": "Newyork",
                "state": "NY",
                "postalCode": "10006",
                "countryCode": "US",
                "addressType": "Primary Residence"
              }
            }
          ],
          "countryOfFormation": "US",
          "yearOfFormation": "2015",
          "enablePayouts": true,
          "onboardingStatus": "Complete"
        }
      },
      "ClientShouldSuccessfullyPostVerificationAnswersReq": {
        "summary": "Client should successfully post verification answers",
        "description": "Client should successfully post verification answers",
        "value": {
          "verifications": [
            {
              "verification": {
                "id": "A00033"
              },
              "response": {
                "values": [
                  "TRUE"
                ]
              }
            },
            {
              "verification": {
                "id": "A00034"
              },
              "response": {
                "values": [
                  "We sell more food in Summer"
                ]
              }
            },
            {
              "verification": {
                "id": "A00043"
              },
              "response": {
                "values": [
                  "FALSE"
                ]
              }
            }
          ],
          "attestations": [
            {
              "documentType": "TERMS_CONDITION",
              "documentId": "f8634cff-4335-4110-aacc-ffe39468e811",
              "fullName": "Alex James",
              "ipAddress": "192.0.0.1"
            },
            {
              "documentType": "DISCLOSURE_AND_CONSENT",
              "documentId": "ca55d694-b2f0-4bc0-9544-57df7eeaa722",
              "fullName": "Alex James",
              "ipAddress": "192.0.0.1"
            }
          ]
        }
      },
      "ClientShouldSuccessfullyPostVerificationAnswersRes": {
        "summary": "Client should successfully post verification answers",
        "description": "Client should successfully post verification answers",
        "value": {
          "status": "PENDING_VALIDATION",
          "verifications": [
            {
              "verification": {
                "id": "A00033",
                "label": "Will there be any seasonal volume and value threshold fluctuations from the expected average monthly activity? If yes, please describe including causes and timing."
              },
              "response": {
                "values": [
                  "FALSE"
                ],
                "updatedDateTime": "2023-03-09T12:35:46.000Z",
                "format": "single",
                "maxLength": 255,
                "answerOptions": [
                  {
                    "id": "FALSE",
                    "label": "No"
                  },
                  {
                    "id": "TRUE",
                    "label": "Yes"
                  }
                ]
              }
            },
            {
              "verification": {
                "id": "A00043",
                "label": "Do you have any operations, vendors, suppliers or sell goods or services in, or support other activities directly or indirectly relating to Cuba, Iran, Syria, North Korea or Crimea?"
              },
              "response": {
                "values": [
                  "FALSE"
                ],
                "updatedDateTime": "2023-03-09T12:35:46.000Z",
                "format": "single",
                "maxLength": 255,
                "answerOptions": [
                  {
                    "id": "FALSE",
                    "label": "No"
                  },
                  {
                    "id": "TRUE",
                    "label": "Yes"
                  }
                ]
              }
            }
          ],
          "attestations": [
            {
              "fullName": "Alex James",
              "ipAddress": "192.0.0.1",
              "attestationDateTime": "2023-03-09T12:35:46.000Z",
              "documentType": "DISCLOSURE_AND_CONSENT",
              "documentVersion": "1",
              "documentName": "disclosure_and_consent-eb-1.pdf",
              "documentId": "f8634cff-4335-4110-aacc-ffe39468e811"
            },
            {
              "fullName": "Alex James",
              "ipAddress": "192.0.0.1",
              "attestationDateTime": "2023-03-09T12:35:46.000Z",
              "documentType": "TERMS_CONDITION",
              "documentVersion": "1",
              "documentName": "terms_condition-eb-petsy-1.pdf",
              "documentId": "ca55d694-b2f0-4bc0-9544-57df7eeaa722"
            }
          ]
        }
      },
      "setPinPayload": {
        "summary": "Payload to set PIN",
        "value": {
          "pin": "1234"
        }
      },
      "setCardLockedPayload": {
        "summary": "Payload to set card as locked",
        "value": {
          "status": "LOCKED"
        }
      },
      "setCardReplacedPayload": {
        "summary": "Payload to set card as replaced",
        "value": {
          "status": "REPLACED",
          "replacementReason": "LOST"
        }
      },
      "setCardCancelledPayload": {
        "summary": "Payload to set card as cancelled",
        "value": {
          "status": "CANCELLED",
          "cancellingReason": "DAMAGED"
        }
      },
      "ListOfCountries": {
        "summary": "List of countries",
        "description": "List of countries",
        "value": {
          "countries": [
            {
              "code": "US",
              "name": "United States"
            }
          ]
        }
      },
      "LegalStructures": {
        "summary": "Accepted list of legal structures",
        "description": "Accepted list of legal structures",
        "value": {
          "legalStructures": [
            "Corporation",
            "Limited Liability Company",
            "Limited Partnership",
            "Sole Proprietorship"
          ]
        }
      },
      "ListOfAllSupportingDocumentTypes": {
        "summary": "List of all supporting document types",
        "description": "List of all supporting document types",
        "value": {
          "metadata": {
            "page": 0,
            "limit": 25,
            "total_items": 1
          },
          "items": [
            {
              "country": "US",
              "documentTypes": {
                "category": "IDENTITY_VERIFICATION",
                "organization": {
                  "primary": [
                    {
                      "id": "IRS_DOCUMENT_TIN",
                      "label": "Letter/Document issued by IRS with TIN Assignment",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    }
                  ],
                  "secondary": [
                    {
                      "id": "MAA",
                      "label": "Memorandums & Articles of Association",
                      "legalStructures": []
                    },
                    {
                      "id": "ARTICLES_OF_INCORPORATION",
                      "label": "Articles of Incorporation",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "MOA",
                      "label": "Memorandums of Association",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "CONSTITUTIONAL_DOCUMENT",
                      "label": "Constitutional document",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "TRUST_DEED",
                      "label": "Trust Deed",
                      "legalStructures": []
                    },
                    {
                      "id": "PARTNERSHIP_AGREEMENT",
                      "label": "Partnership Agreement",
                      "legalStructures": [
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "LLC_AGREEMENT",
                      "label": "LLC Agreement",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "OPERATING_AGREEMENT",
                      "label": "Operating Agreement",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "OFFERING_MEMO",
                      "label": "Offering Memorandum",
                      "legalStructures": []
                    },
                    {
                      "id": "BANKING_LICENSE",
                      "label": "Banking License",
                      "legalStructures": []
                    },
                    {
                      "id": "BUSINESS_LICENSE",
                      "label": "Business License",
                      "legalStructures": [
                        "Sole Proprietorship"
                      ]
                    },
                    {
                      "id": "BUSINESS_REGISTRATION_CERT",
                      "label": "Business Registration Certificate",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "OTHER_GOV_REGISTRATION_DOCS",
                      "label": "Other Government/Regulatory Registration Documents",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "SEC_FILINGS_10K",
                      "label": "10K",
                      "legalStructures": []
                    }
                  ]
                },
                "individual": {
                  "primary": [
                    {
                      "id": "SSN_CARD",
                      "label": "Social Security Card",
                      "legalStructures": []
                    }
                  ],
                  "secondary": [
                    {
                      "id": "PASSPORT",
                      "label": "Passport",
                      "legalStructures": []
                    },
                    {
                      "id": "DRIVERS_LICENSE",
                      "label": "Drivers License",
                      "legalStructures": []
                    },
                    {
                      "id": "GOV_ISSUED_ID_CARD",
                      "label": "Government-issued identity card",
                      "legalStructures": []
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "ListOfSupportingDocumentTypesByLegalStructure": {
        "summary": "List of supporting document types with legalStructure Limited Liability Company",
        "description": "List of supporting document types with legalStructure Limited Liability Company",
        "value": {
          "metadata": {
            "page": 0,
            "limit": 25,
            "total_items": 1
          },
          "items": [
            {
              "country": "US",
              "documentTypes": {
                "category": "IDENTITY_VERIFICATION",
                "organization": {
                  "primary": [
                    {
                      "id": "IRS_DOCUMENT_TIN",
                      "label": "Letter/Document issued by IRS with TIN Assignment",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    }
                  ],
                  "secondary": [
                    {
                      "id": "ARTICLES_OF_INCORPORATION",
                      "label": "Articles of Incorporation",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "MOA",
                      "label": "Memorandums of Association",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "CONSTITUTIONAL_DOCUMENT",
                      "label": "Constitutional document",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "LLC_AGREEMENT",
                      "label": "LLC Agreement",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company"
                      ]
                    },
                    {
                      "id": "OPERATING_AGREEMENT",
                      "label": "Operating Agreement",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "BUSINESS_REGISTRATION_CERT",
                      "label": "Business Registration Certificate",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    },
                    {
                      "id": "OTHER_GOV_REGISTRATION_DOCS",
                      "label": "Other Government/Regulatory Registration Documents",
                      "legalStructures": [
                        "Corporation",
                        "Limited Liability Company",
                        "Sole Proprietorship",
                        "Limited Partnership"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "ListOfIdTypes": {
        "summary": "List of id types for the Client",
        "description": "List of id types for the Client",
        "value": {
          "identificationTypes": [
            {
              "name": "EIN",
              "id_value_type": "NUMERIC",
              "id_value_length": 9,
              "type": "NUMERIC",
              "length": 9
            },
            {
              "name": "SSN",
              "id_value_type": "NUMERIC",
              "id_value_length": 9,
              "type": "NUMERIC",
              "length": 9
            },
            {
              "name": "ITIN",
              "id_value_type": "NUMERIC",
              "id_value_length": 9,
              "type": "NUMERIC",
              "length": 9
            }
          ]
        }
      },
      "IndustryCategoriesAndIndustryTypes": {
        "summary": "List of industry categories and industry types",
        "description": "List of industry categories and industry types",
        "value": {
          "metadata": {
            "page": 0,
            "limit": 25,
            "total_items": 23
          },
          "items": [
            {
              "industryCategory": "UNASSIGNED",
              "industryTypes": [
                "UNASSIGNED"
              ]
            },
            {
              "industryCategory": "Agriculture, Forestry, Fishing and Hunting",
              "industryTypes": [
                "Soybean Farming",
                "Oilseed (Except Soybean) Farming",
                "Dry Pea And Bean Farming",
                "Wheat Farming",
                "Corn Farming",
                "Rice Farming",
                "Oilseed And Grain Combination Farming",
                "All Other Grain Farming",
                "Potato Farming",
                "Other Vegetable (Except Potato) And Melon Farming",
                "Orange Groves",
                "Citrus (Except Orange) Groves",
                "Apple Orchards",
                "Grape Vineyards",
                "Strawberry Farming",
                "Berry (Except Strawberry) Farming",
                "Tree Nut Farming",
                "Fruit And Tree Nut Combination Farming",
                "Other Noncitrus Fruit Farming",
                "Mushroom Production",
                "Other Food Crops Grown Under Cover",
                "Nursery And Tree Production",
                "Floriculture Production",
                "Tobacco Farming",
                "Cotton Farming",
                "Sugarcane Farming",
                "Hay Farming",
                "Sugar Beet Farming",
                "Peanut Farming",
                "All Other Miscellaneous Crop Farming",
                "Beef Cattle Ranching And Farming",
                "Cattle Feedlots",
                "Dairy Cattle And Milk Production",
                "Dual-Purpose Cattle Ranching And Farming",
                "Hog And Pig Farming",
                "Chicken Egg Production",
                "Broilers And Other Meat Type Chicken Production",
                "Turkey Production",
                "Poultry Hatcheries",
                "Other Poultry Production",
                "Sheep Farming",
                "Goat Farming",
                "Finfish Farming And Fish Hatcheries",
                "Shellfish Farming",
                "Other Aquaculture",
                "Apiculture",
                "Horses And Other Equine Production",
                "Fur-Bearing Animal And Rabbit Production",
                "All Other Animal Production",
                "Timber Tract Operations",
                "Forest Nurseries And Gathering Of Forest Products",
                "Logging",
                "Finfish Fishing",
                "Shellfish Fishing",
                "Other Marine Fishing",
                "Hunting And Trapping",
                "Cotton Ginning",
                "Soil Preparation Planting And Cultivating",
                "Crop Harvesting Primarily By Machine",
                "Postharvest Crop Activities (Except Cotton Ginning)",
                "Farm Labor Contractors And Crew Leaders",
                "Farm Management Services",
                "Support Activities For Animal Production",
                "Support Activities For Forestry"
              ]
            },
            {
              "industryCategory": "Mining, Quarrying, and Oil and Gas Extraction",
              "industryTypes": [
                "Crude Petroleum Extraction",
                "Bituminous Coal And Lignite Surface Mining",
                "Bituminous Coal Underground Mining",
                "Anthracite Mining",
                "Iron Ore Mining",
                "Gold Ore Mining",
                "Silver Ore Mining",
                "Uranium-Radium-Vanadium Ore Mining",
                "All Other Metal Ore Mining",
                "Dimension Stone Mining And Quarrying",
                "Crushed And Broken Limestone Mining And Quarrying",
                "Crushed And Broken Granite Mining And Quarrying",
                "Other Crushed And Broken Stone Mining And Quarrying",
                "Construction Sand And Gravel Mining",
                "Industrial Sand Mining",
                "Kaolin And Ball Clay Mining",
                "Clay And Ceramic And Refractory Minerals Mining",
                "Potash Soda And Borate Mineral Mining",
                "Phosphate Rock Mining",
                "Other Chemical And Fertilizer Mineral Mining",
                "All Other Non-Metallic Mineral Mining",
                "Drilling Oil And Gas Wells",
                "Support Activities For Oil And Gas Operations",
                "Support Activities For Coal Mining",
                "Support Activities For Metal Mining",
                "Support Activities For Non-Metallic Minerals (Except Fuels)",
                "Natural Gas Extraction",
                "Copper, Nickel, Lead, and Zinc Mining",
                "Oilfield Service",
                "Engineering Contractors",
                "Natural Gas Extraction And Liquification",
                "Integrated Oil and Gas",
                "Diversified Mining",
                "Diamond And Precious Stone Mining"
              ]
            },
            {
              "industryCategory": "Utilities",
              "industryTypes": [
                "Hydroelectric Power Generation",
                "Fossil Fuel Electric Power Generation",
                "Nuclear Electric Power Generation",
                "Solar Electric Power Generation",
                "Wind Electric Power Generation",
                "Geothermal Electric Power Generation",
                "Biomass Electric Power Generation",
                "Other Electric Power Generation",
                "Electric Bulk Power Transmission And Control",
                "Electric Power Distribution",
                "Natural Gas Distribution",
                "Water Supply And Irrigation Systems",
                "Sewage Treatment Facilities",
                "Steam And Air-Conditioning Supply",
                "Integrated Utility",
                "Merchant Energy"
              ]
            },
            {
              "industryCategory": "Construction",
              "industryTypes": [
                "New Single-Family Housing Construct (ex For-Sale Builders) ",
                "New Multifamily Housing Construct (ex For-Sale Builders) ",
                "New Housing For-Sale Builders ",
                "Residential Remodelers",
                "Industrial Building Construction (Except Operative Builders)",
                "Comml & Instit Bldg Construction (Except Operative Builders)",
                "Water And Sewer Line And Related Structures Construction",
                "Oil And Gas Pipeline And Related Structures Construction",
                "Power & Communication Line & Related Structures Construction",
                "Land Subdivision",
                "Highway Street And Bridge Construction",
                "Other Heavy And Civil Engineering Construction",
                "Poured Concrete Foundation And Structure Contractors",
                "Structural Steel And Precast Concrete Contractors",
                "Framing Contractors",
                "Masonry Contractors",
                "Glass And Glazing Contractors",
                "Roofing Contractors",
                "Siding Contractors",
                "Other Foundation Structure and Building Exterior Contract",
                "Electrical Contractors",
                "Plumbing Heating And Air-Conditioning Contractors",
                "Other Building Equipment Contractors",
                "Drywall and Insulation Contractors ",
                "Painting And Wall Covering Contractors",
                "Flooring Contractors",
                "Tile And Terrazzo Contractors",
                "Finish Carpentry Contractors",
                "Other Building Finishing Contractors",
                "Site Preparation Contractors",
                "All Other Specialty Trade Contractors",
                "Residential Building Construction (Exc Operative Builders)",
                "New Housing Operative Builders (Single Family And Condo)",
                "Apartment Construction Operative Builders (Apartment)",
                "Industrial/Warehouse Operative Builders (Industrial)",
                "Office Operative Builders (Office Buildings)",
                "Retail Operative Builders (Retail Buildings)",
                "Hotel Operative Builders (Hotels)",
                "Residential Land Subdividing (Sale To Home Builders)",
                "Commercial Land Subdividing (Sale To Commercial Builders)"
              ]
            },
            {
              "industryCategory": "Manufacturing",
              "industryTypes": [
                "Dog And Cat Food Manufacturing",
                "Other Animal Food Manufacturing",
                "Flour Milling",
                "Rice Milling",
                "Malt Manufacturing",
                "Wet Corn Milling",
                "Soybean and Other Oilseed Processing",
                "Fats And Oils Refining And Blending",
                "Breakfast Cereal Manufacturing",
                "Beet Sugar Manufacturing",
                "Cane Sugar Manufacturing",
                "Non-Chocolate Confectionery Manufacturing",
                "Chocolate and Confectionery Manufacturing from Cacao Beans",
                "Confectionery Manufacturing from Purchased Chocolate",
                "Frozen Fruit Juice And Vegetable Manufacturing",
                "Frozen Specialty Food Manufacturing",
                "Fruit And Vegetable Canning",
                "Specialty Canning",
                "Dried And Dehydrated Food Manufacturing",
                "Fluid Milk Manufacturing",
                "Creamery Butter Manufacturing",
                "Cheese Manufacturing",
                "Dry Condensed And Evaporated Dairy Product Manufacturing",
                "Ice Cream And Frozen Dessert Manufacturing",
                "Animal (Except Poultry) Slaughtering",
                "Meat Processed From Carcasses",
                "Rendering And Meat By-Product Processing",
                "Poultry Processing",
                "Seafood Product Preparation And Packaging",
                "Retail Bakeries",
                "Commercial Bakeries",
                "Frozen Bakery Product Manufacturing",
                "Cookie And Cracker Manufacturing",
                "Dry Pasta Dough and Flour Mixes Manuf from Purchased Flour",
                "Tortilla Manufacturing",
                "Roasted Nuts And Peanut Butter Manufacturing",
                "Other Snack Food Manufacturing",
                "Coffee And Tea Manufacturing",
                "Flavoring Syrup And Concentrate Manufacturing",
                "Mayonnaise Dressing And Other Prepared Sauce Manufacturing",
                "Spice And Extract Manufacturing",
                "Perishable Prepared Food Manufacturing",
                "All Other Miscellaneous Food Manufacturing",
                "Soft Drink Manufacturing",
                "Bottled Water Manufacturing",
                "Ice Manufacturing",
                "Breweries",
                "Wineries",
                "Distilleries",
                "Tobacco Manufacturing",
                "Fiber Yarn And Thread Mills",
                "Broadwoven Fabric Mills",
                "Narrow Fabric Mills And Schiffli Machine Embroidery",
                "Nonwoven Fabric Mills",
                "Knit Fabric Mills",
                "Textile And Fabric Finishing Mills",
                "Fabric Coating Mills",
                "Carpet And Rug Mills",
                "Curtain And Linen Mills",
                "Textile Bag And Canvas Mills",
                "Rope Cordage Twine Tire Cord and Tire Fabric Mills",
                "All Other Miscellaneous Textile Product Mills",
                "Hosiery And Sock Mills",
                "Other Apparel Knitting Mills",
                "Cut And Sew Apparel Contractors",
                "Men'S And Boys' Cut And Sew Apparel Manufacturing",
                "Women's Girls' and Infants' Cut and Sew Apparel Manufact",
                "Other Cut and Sew Apparel Manufacturing",
                "Apparel Accessories And Other Apparel Manufacturing",
                "Leather And Hide Tanning And Finishing",
                "Footwear Manufacturing",
                "Women's Handbag And Purse Manufacturing",
                "All Other Leather Good and Allied Product Manufacturing",
                "Sawmills",
                "Wood Preservation",
                "Hardwood Veneer And Plywood Manufacturing",
                "Softwood Veneer And Plywood Manufacturing",
                "Engineered Wood Member (Except Truss) Manufacturing",
                "Truss Manufacturing",
                "Reconstituted Wood Product Manufacturing",
                "Wood Window And Door Manufacturing",
                "Cut Stock Resawing Lumber And Planing",
                "Other Millwork (Including Flooring )",
                "Wood Container And Pallet Manufacturing",
                "Manufactured Home (Mobile Home) Manufacturing",
                "Prefabricated Wood Building Manufacturing",
                "All Other Miscellaneous Wood Product Manufacturing ",
                "Pulp Mills",
                "Paper (Except Newsprint) Mills",
                "Newsprint Mills",
                "Paperboard Mills",
                "Corrugated And Solid Fiber Box Manufacturing",
                "Folding Paperboard Box Manufacturing",
                "Other Paperboard Container Manufacturing",
                "Paper Bag And Coated And Treated Paper Manufacturing",
                "Stationery Product Manufacturing",
                "Sanitary Paper Product Manufacturing",
                "All Other Converted Paper Product Manufacturing",
                "Commercial Printing (except Screen and Books) ",
                "Commercial Screen Printing",
                "Book Printing",
                "Support Activities For Printing",
                "Petroleum Refineries",
                "Asphalt Paving Mixture And Block Manufacturing",
                "Asphalt Shingle And Coating Materials Manufacturing",
                "Petroleum Lubricating Oil And Grease Manufacturing",
                "All Other Petroleum And Coal Products Manufacturing",
                "Petrochemical Manufacturing",
                "Industrial Gas Manufacturing",
                "Synthetic Dye And Pigment Manufacturing",
                "Other Basic Inorganic Chemical Manufacturing",
                "Ethyl Alcohol Manufacturing",
                "Cyclic Crude, Intermediate, and Gum and Wood Chemical Manufacturing",
                "All Other Basic Organic Chemical Manufacturing",
                "Plastics Material And Resin Manufacturing",
                "Synthetic Rubber Manufacturing",
                "Artificial And Synthetic Fibers And Filaments Manufacturing",
                "Nitrogenous Fertilizer Manufacturing",
                "Phosphatic Fertilizer Manufacturing",
                "Fertilizer (Mixing Only) Manufacturing",
                "Pesticide And Other Agricultural Chemical Manufacturing",
                "Medicinal And Botanical Manufacturing",
                "Pharmaceutical Preparation Manufacturing",
                "In-Vitro Diagnostic Substance Manufacturing",
                "Biological Product (Except Diagnostic) Manufacturing",
                "Paint And Coating Manufacturing",
                "Adhesive Manufacturing",
                "Soap And Other Detergent Manufacturing",
                "Polish And Other Sanitation Good Manufacturing",
                "Surface Active Agent Manufacturing",
                "Toilet Preparation Manufacturing",
                "Printing Ink Manufacturing",
                "Explosives Manufacturing",
                "Custom Compounding Of Purchased Resin",
                "Photographic Film Paper Plate And Chemical Manufacturing",
                "All Other Miscellaneous Chemical Product Manufacturing",
                "Plastics Bag and Pouch Manufacturing",
                "Plastics Packaging Film & Sheet (Inc Laminated) Manufacturing",
                "Unlaminated Plastics Film and Sheet (except Packaging) Manufacturing",
                "Unlaminated Plastics Profile Shape Manufacturing",
                "Plastics Pipe And Pipe Fitting Manufacturing",
                "Laminated Plastics Plate, Sheet (except Packaging), and Shape Manufacturing",
                "Polystyrene Foam Product Manufacturing",
                "Urethane and Other Foam Product (except Polystyrene) Manufacturing",
                "Plastics Bottle Manufacturing",
                "Plastics Plumbing Fixture Manufacturing",
                "All Other Plastics Product Manufacturing ",
                "Tire Manufacturing (Except Retreading)",
                "Tire Retreading",
                "Rubber And Plastics Hoses And Belting Manufacturing",
                "Rubber Product Manufacturing For Mechanical Use",
                "All Other Rubber Product Manufacturing",
                "Pottery Ceramics And Plumbing Fixture Manufacturing",
                "Clay Building Material And Refractories Manufacturing",
                "Flat Glass Manufacturing",
                "Other Pressed And Blown Glass And Glassware Manufacturing",
                "Glass Container Manufacturing",
                "Glass Product Manufacturing Made Of Purchased Glass",
                "Cement Manufacturing",
                "Ready-Mix Concrete Manufacturing",
                "Concrete Block And Brick Manufacturing",
                "Concrete Pipe Manufacturing",
                "Other Concrete Product Manufacturing",
                "Lime Manufacturing",
                "Gypsum And Gypsum Product Manufacturing",
                "Abrasive Product Manufacturing",
                "Cut Stone And Stone Product Manufacturing",
                "Ground Or Treated Mineral And Earth Manufacturing",
                "Mineral Wool Manufacturing",
                "All Other Miscellaneous Nonmetallic Mineral Product Manufacturing",
                "Iron And Steel Mills And Ferroalloy Manufacturing",
                "Iron and Steel Pipe and Tube Manufacturing from Purchased Steel",
                "Cold-Rolled Steel Shape Manufacturing",
                "Steel Wire Drawing",
                "Alumina Refining and Primary Aluminum Production",
                "Secondary Smelting And Alloying Of Aluminum",
                "Aluminum Sheet Plate And Foil Manufacturing",
                "Other Aluminum Rolling Drawing and Extruding",
                "Nonferrous Metal (Except Aluminum) Smelting And Refining",
                "Copper Rolling Drawing Extruding And Alloying",
                "Nonferrous Metal (except Copper and Aluminum) Rolling, Drawing, and Extruding",
                "Secondary Smelting, Refining, and Alloying of Nonferrous Metal (except Copper and Aluminum)",
                "Iron Foundries",
                "Steel Investment Foundries",
                "Steel Foundries (Except Investment)",
                "Nonferrous Metal Die-Casting Foundries",
                "Aluminum Foundries",
                "Other Nonferrous Metal Foundries (except Die-Casting)",
                "Iron And Steel Forging",
                "Nonferrous Forging",
                "Custom Roll Forming",
                "Powder Metallurgy Part Manufacturing",
                "Metal Crown Closure and Other Metal Stamping (ex Automotive)",
                "Metal Kitchen Cookware, Utensil, Cutlery, and Flatware (except Precious) Manufacturing",
                "Saw Blade and Handtool Manufacturing",
                "Prefabricated Metal Building And Component Manufacturing",
                "Fabricated Structural Metal Manufacturing",
                "Plate Work Manufacturing",
                "Metal Window And Door Manufacturing",
                "Sheet Metal Work Manufacturing",
                "Ornamental And Architectural Metal Work Manufacturing",
                "Power Boiler And Heat Exchanger Manufacturing",
                "Metal Tank (Heavy Gauge) Manufacturing",
                "Metal Can Manufacturing",
                "Other Metal Container Manufacturing",
                "Hardware Manufacturing",
                "Spring Manufacturing",
                "Other Fabricated Wire Product Manufacturing",
                "Machine Shops",
                "Precision Turned Product Manufacturing",
                "Bolt Nut Screw Rivet And Washer Manufacturing",
                "Metal Heat Treating",
                "Metal Coating, Engraving (except Jewelry and Silverware), and Allied Services to Manufacturers",
                "Electroplating Plating Polishing Anodizing And Coloring",
                "Industrial Valve Manufacturing",
                "Fluid Power Valve And Hose Fitting Manufacturing",
                "Plumbing Fixture Fitting And Trim Manufacturing",
                "Other Metal Valve And Pipe Fitting Manufacturing",
                "Ball And Roller Bearing Manufacturing",
                "Small Arms Ammunition Manufacturing",
                "Ammunition (Except Small Arms) Manufacturing",
                "Small Arms Ordnance and Ordnance Accessories Manufacturing ",
                "Fabricated Pipe And Pipe Fitting Manufacturing",
                "All Other Miscellaneous Fabricated Metal Product Manufact",
                "Farm Machinery And Equipment Manufacturing",
                "Lawn and Garden Tractor and Home Lawn and Garden Equipment Manufacturing",
                "Construction Machinery Manufacturing",
                "Mining Machinery And Equipment Manufacturing",
                "Oil And Gas Field Machinery And Equipment Manufacturing",
                "Food Product Machinery Manufacturing",
                "Semiconductor Machinery Manufacturing",
                "Sawmill Woodworking and Paper Machinery Manufacturing",
                "Printing Machinery and Equipment Manufacturing",
                "Other Industrial Machinery Manufacturing",
                "Optical Instrument And Lens Manufacturing",
                "Photographic and Photocopying Equipment Manufacturing",
                "Other Commercial and Service Industry Machinery Manufacturing",
                "Industrial and Commercial Fan and Blower and Air Purification Equipment Manufacturing",
                "Heating Equipment (except Warm Air Furnaces) Manufacturing",
                "Air-Conditioning and Warm Air Heating Equipment and Commercial and Industrial Refrigeration Equipment Manufacturing",
                "Industrial Mold Manufacturing",
                "Special Die And Tool Die Set Jig And Fixture Manufacturing",
                "Cutting Tool And Machine Tool Accessory Manufacturing",
                "Machine Tool Manufacturing",
                "Rolling Mill and Other Metalworking Machinery Manufacturing",
                "Turbine And Turbine Generator Set Unit Manufacturing",
                "Speed Changer, Industrial High-Speed Drive, and Gear Manufacturing",
                "Mechanical Power Transmission Equipment Manufacturing",
                "Other Engine Equipment Manufacturing",
                "Air And Gas Compressor Manufacturing",
                "Elevator And Moving Stairway Manufacturing",
                "Conveyor And Conveying Equipment Manufacturing",
                "Overhead Traveling Crane, Hoist, and Monorail System Manufacturing",
                "Industrial Truck, Tractor, Trailer, and Stacker Machinery Manufacturing",
                "Power-Driven Hand Tool Manufacturing",
                "Welding And Soldering Equipment Manufacturing",
                "Packaging Machinery Manufacturing",
                "Industrial Process Furnace And Oven Manufacturing",
                "Fluid Power Cylinder And Actuator Manufacturing",
                "Fluid Power Pump And Motor Manufacturing",
                "Scale and Balance Manufacturing",
                "All Other General Purpose Machinery Manufacturing",
                "Electronic Computer Manufacturing",
                "Computer Storage Device Manufacturing",
                "Computer Terminal and Other Computer Peripheral Equipment Manufacturing",
                "Telephone Apparatus Manufacturing",
                "Radio and Television Broadcasting and Wireless Communications Equipment Manufacturing",
                "Other Communications Equipment Manufacturing",
                "Audio And Video Equipment Manufacturing",
                "Printed Circuit Board Manufacturing",
                "Semiconductor And Related Device Manufacturing",
                "Capacitor, Resistor, Coil, Transformer, and Other Inductor Manufacturing",
                "Electronic Connector Manufacturing",
                "Printed Circuit Assembly (Electronic Assembly) Manufacturing",
                "Other Electronic Component Manufacturing ",
                "Electromedical And Electrotherapeutic Apparatus Manufacturin",
                "Search, Detection, Navigation, Guidance, Aeronautical, and Nautical System and Instrument Manufacturing",
                "Automatic Environmental Control Manufacturing for Residential, Commercial, and Appliance Use",
                " Instruments and Related Products Manufacturing for Measuring, Displaying, and Controlling Industrial Process Variables",
                "Totalizing Fluid Meter And Counting Device Manufacturing",
                "Instrument Manufacturing for Measuring and Testing Electricity and Electrical Signals",
                "Analytical Laboratory Instrument Manufacturing",
                "Irradiation Apparatus Manufacturing",
                "Other Measuring and Controlling Device Manufacturing ",
                "Blank Magnetic and Optical Recording Media Manufacturing ",
                "Software and Other Prerecorded Compact Disc, Tape, and Record Reproducing",
                "Electric Lamp Bulb And Part Manufacturing",
                "Residential Electric Lighting Fixture Manufacturing",
                "Commercial, Industrial, and Institutional Electric Lighting Fixture Manufacturing",
                "Other Lighting Equipment Manufacturing",
                "Small Electrical Appliance Manufacturing",
                "Power Distribution And Specialty Transformer Manufacturing",
                "Motor And Generator Manufacturing",
                "Switchgear And Switchboard Apparatus Manufacturing",
                "Relay And Industrial Control Manufacturing",
                "Storage Battery Manufacturing",
                "Dry And Wet Primary Battery Manufacturing",
                "Fiber Optic Cable Manufacturing",
                "Other Communication And Energy Wire Manufacturing",
                "Current-Carrying Wiring Device Manufacturing",
                "Noncurrent-Carrying Wiring Device Manufacturing",
                "Carbon And Graphite Product Manufacturing",
                "All Other Miscellaneous Electrical Equipment and Component Manufacturing",
                "Automobile Manufacturing",
                "Light Truck And Utility Vehicle Manufacturing",
                "Heavy Duty Truck Manufacturing",
                "Motor Vehicle Body Manufacturing",
                "Truck Trailer Manufacturing",
                "Motor Home Manufacturing",
                "Travel Trailer And Camper Manufacturing",
                "Motor Vehicle Gasoline Engine And Engine Parts Manufacturing",
                "Motor Vehicle Electrical and Electronic Equipment Manufacturing",
                "Motor Vehicle Steering and Suspension Components (except Spring) Manufacturing",
                "Motor Vehicle Brake System Manufacturing",
                "Motor Vehicle Transmission and Power Train Parts Manufacturing",
                "Motor Vehicle Fabric Accessories And Seat Manufacturing",
                "Motor Vehicle Metal Stamping",
                "Other Motor Vehicle Parts Manufacturing",
                "Aircraft Manufacturing",
                "Aircraft Engine And Engine Parts Manufacturing",
                "Other Aircraft Part And Auxiliary Equipment Manufacturing",
                "Guided Missile And Space Vehicle Manufacturing",
                "Guided Missile and Space Vehicle Propulsion Unit and Propulsion Unit Parts Manufacturing",
                "Other Guided Missile and Space Vehicle Parts and Auxiliary Equipment Manufacturing",
                "Railroad Rolling Stock Manufacturing",
                "Ship Building And Repairing",
                "Boat Building",
                "Motorcycle Bicycle And Parts Manufacturing",
                "Military Armored Vehicle, Tank, and Tank Component Manufacturing",
                "All Other Transportation Equipment Manufacturing",
                "Wood Kitchen Cabinet And Counter Top Manufacturing",
                "Upholstered Household Furniture Manufacturing",
                "Nonupholstered Wood Household Furniture Manufacturing",
                "Metal Household Furniture Manufacturing",
                "Household Furniture (Except Wood And Metal) Manufacturing",
                "Institutional Furniture Manufacturing",
                "Wood Office Furniture Manufacturing",
                "Custom Architectural Woodwork And Millwork Manufacturing",
                "Nonwood Office Furniture Manufacturing",
                "Showcase Partition Shelving And Locker Manufacturing",
                "Mattress Manufacturing",
                "Blind And Shade Manufacturing",
                "Surgical And Medical Instrument Manufacturing",
                "Surgical Appliance And Supplies Manufacturing",
                "Dental Equipment And Supplies Manufacturing",
                "Ophthalmic Goods Manufacturing",
                "Dental Laboratories",
                "Jewelry And Silverware Manufacturing",
                "Sporting And Athletic Goods Manufacturing",
                "Doll Toy And Game Manufacturing",
                "Office Supplies (Except Paper) Manufacturing",
                "Sign Manufacturing",
                "Gasket Packing And Sealing Device Manufacturing",
                "Musical Instrument Manufacturing",
                "Fastener Button Needle And Pin Manufacturing",
                "Broom Brush And Mop Manufacturing",
                "Burial Casket Manufacturing",
                "All Other Miscellaneous Manufacturing",
                "Measuring, Dispensing, and Other Pumping Equipment Manufacturing",
                "Major Household Appliance Manufacturing"
              ]
            },
            {
              "industryCategory": "Wholesale Trade",
              "industryTypes": [
                "Automobile And Other Motor Vehicle Merchant Wholesalers",
                "Motor Vehicle Supplies And New Parts Merchant Wholesalers",
                "Tire And Tube Merchant Wholesalers",
                "Motor Vehicle Parts (Used) Merchant Wholesalers",
                "Furniture Merchant Wholesalers",
                "Home Furnishing Merchant Wholesalers",
                "Lumber Plywood Millwork & Wood Panel Merchant Wholesalers",
                "Brick, Stone, and Related Construction Material Merchant Wholesalers",
                "Roofing Siding And Insulation Material Merchant Wholesalers",
                "Other Construction Material Merchant Wholesalers",
                "Photographic Equipment And Supplies Merchant Wholesalers",
                "Office Equipment Merchant Wholesalers",
                "Computer and Computer Peripheral Equipment and Software Merchant Wholesalers",
                "Other Commercial Equipment Merchant Wholesalers",
                "Medical, Dental, and Hospital Equipment and Supplies Merchant Wholesalers",
                "Ophthalmic Goods Merchant Wholesalers",
                "Other Professional Equipment and Supplies Merchant Wholesalers",
                "Metal Service Centers And Other Metal Merchant Wholesalers",
                "Coal And Other Mineral And Ore Merchant Wholesalers",
                "Electrical Apparatus and Equipment, Wiring Supplies, and Related Equipment Merchant Wholesalers",
                "Household Appliances, Electric Housewares, and Consumer Electronics Merchant Wholesalers",
                "Other Electronic Parts And Equipment Merchant Wholesalers",
                "Hardware Merchant Wholesalers",
                "Plumbing and Heating Equipment and Supplies (Hydronics) Merchant Wholesalers",
                "Warm Air Heating and Air-Conditioning Equipment and Supplies Merchant Wholesalers",
                "Refrigeration Equipment And Supplies Merchant Wholesalers",
                "Construction and Mining (except Oil Well) Machinery and Equipment Merchant Wholesalers",
                "Farm and Garden Machinery and Equipment Merchant Wholesalers",
                "Industrial Machinery And Equipment Merchant Wholesalers",
                "Industrial Supplies Merchant Wholesalers",
                "Service Establishment Equipment and Supplies Merchant Wholesalers",
                "Transportation Equipment and Supplies (except Motor Vehicle) Merchant Wholesalers",
                "Sporting and Recreational Goods and Supplies Merchant Wholesalers",
                "Toy And Hobby Goods And Supplies Merchant Wholesalers",
                "Recyclable Material Merchant Wholesalers",
                "Jewelry, Watch, Precious Stone, and Precious Metal Merchant Wholesalers",
                "Other Miscellaneous Durable Goods Merchant Wholesalers",
                "Printing And Writing Paper Merchant Wholesalers",
                "Stationary And Office Supplies Merchant Wholesalers",
                "Industrial And Personal Service Paper Merchant Wholesalers",
                "Drugs and Druggists' Sundries Merchant Wholesalers",
                "Piece Goods, Notions, and Other Dry Goods Merchant Wholesalers",
                "Men's and Boys' Clothing and Furnishings Merchant Wholesalers",
                "Women's, Children's, and Infants' Clothing and Accessories Merchant Wholesalers",
                "Footwear Merchant Wholesalers",
                "General Line Grocery Merchant Wholesalers",
                "Packaged Frozen Food Merchant Wholesalers",
                "Dairy Product (Except Dried Or Canned) Merchant Wholesalers",
                "Poultry And Poultry Product Merchant Wholesalers",
                "Confectionery Merchant Wholesalers",
                "Fish And Seafood Merchant Wholesalers",
                "Meat And Meat Product Merchant Wholesalers",
                "Fresh Fruit And Vegetable Merchant Wholesalers",
                "Other Grocery And Related Products Merchant Wholesalers",
                "Grain And Field Bean Merchant Wholesalers",
                "Livestock Merchant Wholesalers",
                "Other Farm Product Raw Material Merchant Wholesalers",
                "Plastics Materials and Basic Forms and Shapes Merchant Wholesalers",
                "Other Chemical And Allied Products Merchant Wholesalers",
                "Petroleum Bulk Stations And Terminals",
                "Petroleum and Petroleum Products Merchant Wholesalers (except Bulk Stations and Terminals)",
                "Beer And Ale Merchant Wholesalers",
                "Wine And Distilled Alcoholic Beverage Merchant Wholesalers",
                "Farm Supplies Merchant Wholesalers",
                "Book Periodical And Newspaper Merchant Wholesalers",
                "Flower, Nursery Stock, and Florists' Supplies Merchant Wholesalers",
                "Tobacco And Tobacco Product Merchant Wholesalers",
                "Paint Varnish And Supplies Merchant Wholesalers",
                "Other Miscellaneous Nondurable Goods Merchant Wholesalers",
                "Business To Business Electronic Markets",
                "Wholesale Trade Agents And Brokers"
              ]
            },
            {
              "industryCategory": "Retail Trade",
              "industryTypes": [
                "New Car Dealers",
                "Used Car Dealers",
                "Recreational Vehicle Dealers",
                "Boat Dealers",
                "Motorcycle ATV and All Other Motor Vehicle Dealers",
                "Automotive Parts And Accessories Stores",
                "Tire Dealers",
                "Furniture Stores",
                "Floor Covering Stores",
                "Window Treatment Stores",
                "All Other Home Furnishings Stores",
                "Household Appliance Stores",
                "Electronics Stores",
                "Home Centers",
                "Paint And Wallpaper Stores",
                "Hardware Stores",
                "Other Building Material Dealers",
                "Outdoor Power Equipment Stores",
                "Nursery Garden Center And Farm Supply Stores",
                "Supermarkets And Other Grocery (Except Convenience) Stores",
                "Convenience Stores",
                "Meat Markets",
                "Fish And Seafood Markets",
                "Fruit And Vegetable Markets",
                "Baked Goods Stores",
                "Confectionery And Nut Stores",
                "All Other Specialty Food Stores",
                "Beer Wine And Liquor Stores",
                "Pharmacies And Drug Stores",
                "Cosmetics Beauty Supplies And Perfume Stores",
                "Optical Goods Stores",
                "Food (Health) Supplement Stores",
                "All Other Health And Personal Care Stores",
                "Gasoline Stations With Convenience Stores",
                "Other Gasoline Stations",
                "Men's Clothing Stores",
                "Women's Clothing Stores",
                "Children's and Infants' Clothing Stores",
                "Family Clothing Stores",
                "Clothing Accessories Stores",
                "Other Clothing Stores",
                "Shoe Stores",
                "Jewelry Stores",
                "Luggage And Leather Goods Stores"
              ]
            },
            {
              "industryCategory": "Sporting Goods, Hobby, Musical Instrument, and Book Stores",
              "industryTypes": [
                "Sporting Goods Stores",
                "Hobby Toy And Game Stores",
                "Sewing Needlework And Piece Goods Stores",
                "Musical Instrument And Supplies Stores",
                "Book Stores",
                "News Dealers And Newsstands",
                "Florists",
                "Office Supplies And Stationery Stores",
                "Gift Novelty And Souvenir Stores",
                "Used Merchandise Stores",
                "Pet And Pet Supplies Stores",
                "Art Dealers",
                "Manufactured (Mobile) Home Dealers",
                "Tobacco Stores",
                "All Other Miscellaneous Store Retailers (Ex Tobacco Stores)",
                "Vending Machine Operators",
                "Fuel Dealers",
                "Other Direct Selling Establishments",
                "Department Stores",
                "Warehouse Clubs and Supercenters",
                "All Other General Merchandise Stores",
                "Electronic Shopping and Mail-Order Houses"
              ]
            },
            {
              "industryCategory": "Transportation and Warehousing",
              "industryTypes": [
                "Scheduled Passenger Air Transportation",
                "Scheduled Freight Air Transportation",
                "Nonscheduled Chartered Passenger Air Transportation",
                "Nonscheduled Chartered Freight Air Transportation",
                "Other Nonscheduled Air Transportation",
                "Line-Haul Railroads",
                "Short Line Railroads",
                "Deep Sea Freight Transportation",
                "Deep Sea Passenger Transportation",
                "Coastal And Great Lakes Freight Transportation",
                "Coastal And Great Lakes Passenger Transportation",
                "Inland Water Freight Transportation",
                "Inland Water Passenger Transportation",
                "General Freight Trucking Local",
                "General Freight Trucking Long-Distance Truckload",
                "General Freight Trucking Long-Distance Less Than Truckload",
                "Used Household And Office Goods Moving",
                "Specialized Freight (Except Used Goods) Trucking Local",
                "Specialized Freight (Ex Used Goods) Trucking Long-Distance",
                "Mixed Mode Transit Systems",
                "Commuter Rail Systems",
                "Bus And Motor Vehicle Transit Systems",
                "Other Urban Transit Systems",
                "Interurban And Rural Bus Transportation",
                "Taxi Service",
                "Limousine Service",
                "School And Employee Bus Transportation",
                "Charter Bus Industry",
                "Special Needs Transportation",
                "All Other Transit And Ground Passenger Transportation",
                "Pipeline Transportation Of Crude Oil",
                "Pipeline Transportation Of Natural Gas",
                "Pipeline Transportation Of Refined Petroleum Products",
                "All Other Pipeline Transportation",
                "Scenic And Sightseeing Transportation Land",
                "Scenic And Sightseeing Transportation Water",
                "Scenic And Sightseeing Transportation Other",
                "Air Traffic Control",
                "Other Airport Operations",
                "Other Support Activities For Air Transportation",
                "Support Activities For Rail Transportation",
                "Port And Harbor Operations",
                "Marine Cargo Handling",
                "Navigational Services To Shipping",
                "Other Support Activities For Water Transportation",
                "Motor Vehicle Towing",
                "Other Support Activities For Road Transportation",
                "Freight Transportation Arrangement",
                "Packing And Crating",
                "All Other Support Activities For Transportation",
                "Postal Service",
                "Couriers",
                "Local Messengers And Local Delivery",
                "General Warehousing And Storage Facilities",
                "Refrigerated Warehousing And Storage Facilities",
                "Farm Product Warehousing And Storage Facilities",
                "Other Warehousing And Storage Facilities"
              ]
            },
            {
              "industryCategory": "Information",
              "industryTypes": [
                "Newspaper Publishers",
                "Periodical Publishers",
                "Book Publishers",
                "Directory And Mailing List Publishers",
                "Greeting Card Publishers",
                "All Other Publishers",
                "Software Publishers",
                "Motion Picture And Video Production",
                "Motion Picture And Video Distribution",
                "Motion Picture Theaters Except Drive-Ins.",
                "Drive-In Motion Picture Theaters",
                "Teleproduction And Other Post-Production Services",
                "Other Motion Picture And Video Industries",
                "Music Publishers",
                "Sound Recording Studios",
                "Other Sound Recording Industries",
                "Radio Networks",
                "Radio Stations",
                "Television Broadcasting",
                "Cable And Other Subscription Programming",
                "Satellite Telecommunications",
                "Telecom Resellers (including mobile virtual operators)",
                "All Other Telecommunications",
                "Data Processing Hosting And Related Services",
                "News Syndicates",
                "Libraries And Archives",
                "Internet Publishing and Broadcasting and Web Search Portals ",
                "All Other Information Services",
                "Record Production and Distribution",
                "Wired Telecommunications Carriers",
                "Wireless Telecommunications Carriers (Except Satellite)",
                "Local Exchange Carrier (Lec)",
                "Competitive Local Exchange Carrier (Clec)",
                "Long Distance Carrier - Traditional",
                "Long Distance Carrier - Emerging",
                "3rd Generation Wireless (3G)",
                "Internet Infrastructure Provider (Iip)",
                "Radio Broadcasting",
                "Internet Service Providers And Web Search Portals"
              ]
            },
            {
              "industryCategory": "Finance and Insurance",
              "industryTypes": [
                "Monetary Authorities - Central Bank",
                "Commercial Banking",
                "Savings Institutions",
                "Credit Unions",
                "Other Depository Credit Intermediation",
                "Credit Card Issuing",
                "Sales Financing",
                "Consumer Lending",
                "Real Estate Credit",
                "International Trade Financing",
                "Secondary Market Financing",
                "All Other Non-Depository Credit Intermediation",
                "Mortgage And Other Loan Brokers",
                "Financial Transactions Processing, Reserve, and Clearinghouse Activities",
                "Other Activities Related To Credit Intermediation",
                "Investment Banking And Securities Dealing",
                "Securities Brokerage",
                "Commodity Contracts Dealing",
                "Commodity Contracts Brokerage",
                "Securities And Commodity Exchanges",
                "Miscellaneous Intermediation",
                "Portfolio Management",
                "Investment Advice",
                "Trust Fiduciary And Custody Activities",
                "Miscellaneous Financial Investment Activities",
                "Direct Life Insurance Carriers",
                "Direct Health And Medical Insurance Carriers",
                "Direct Property And Casualty Insurance Carriers",
                "Direct Title Insurance Carriers",
                "Other Direct Insurance (Ex Life Health Medical) Carriers",
                "Reinsurance Carriers",
                "Insurance Agencies And Brokerages",
                "Claims Adjusters",
                "Third Party Administration For Insurance And Pension Funds",
                "All Other Insurance Related Activities",
                "Pension Funds",
                "Health And Welfare Funds",
                "Other Insurance Funds",
                "Open-End Investment Funds",
                "Trusts Estates And Agency Accounts",
                "Other Financial Vehicles",
                "Bancassurance",
                "Banks Operating Under An Off-Shore License",
                "Government Agency",
                "Government-Sponsored Agency",
                "Multilateral Credit Institution",
                "Student Loan Providers",
                "Commercial Lending",
                "Proprietary Trading Firm Non- Hedge Fund",
                "Hedge Fund Management",
                "Composite Insurer - Predominantly Life",
                "Composite Insurer - Predominantly Non-Life",
                "Monoline Insurers",
                "Corp Pension Funds",
                "Public Pension Funds",
                "Industrywide Pension Schemes",
                "Personal & Testamentary Trusts",
                "Institutional Trusts",
                "Mortgage Real Estate Investment Trusts",
                "HRF (Ucits Oe/Div 40 Act)",
                "Regulated Fds (All Other 40 ActCanadian Mutual FdsAus Fds)",
                "Other Mutual Funds (Cayman Isl Mut FdsCayman Isl Unit TrLl",
                "Clearinghouses",
                "Payment Systems",
                "Depositories",
                "Closed-End Investment Funds",
                "Hedge Funds",
                "SPV's Not Elsewhere Classified",
                "Private Equity Funds",
                "Personal Investment Companies"
              ]
            },
            {
              "industryCategory": "Real Estate and Rental and Leasing",
              "industryTypes": [
                "Lessors Of Residential Buildings And Dwellings",
                "Lessors Of Nonresidential Buildings (Except Miniwarehouses)",
                "Lessors Of Miniwarehouses And Self Storage Units",
                "Lessors Of Other Real Estate Property",
                "Offices Of Real Estate Agents And Brokers",
                "Residential Property Managers",
                "Nonresidential Property Managers",
                "Offices Of Real Estate Appraisers",
                "Other Activities Related To Real Estate",
                "Passenger Car Rental",
                "Passenger Car Leasing",
                "Truck Utility Trailer And Rv Rental And Leasing",
                "Consumer Electronics And Appliances Rental",
                "General Rental Centers",
                "Commercial Air, Rail, and Water Transportation Equipment Rental and Leasing",
                "Construction, Mining, and Forestry Machinery and Equipment Rental and Leasing",
                "Office Machinery And Equipment Rental And Leasing",
                "Other Commercial and Industrial Machinery and Equipment Rental and Leasing",
                "Owners And Lessors Of Other Non-Financial Assets",
                "Formal Wear and Costume Rental",
                "Video Tape and Disc Rental",
                "Home Health Equipment Rental",
                "Recreational Goods Rental",
                "All Other Consumer Goods Rental",
                "Lessors Of Apartments (Leasing Of Their Own Apt)",
                "Lessors Of Industrial/Warehouses (Leasing Ind Properties)",
                "Lessors Of Offices (Leasing Their Own Office Properties)",
                "Lessors Of Retail (Renting/Leasing Own Retail Properties)",
                "Lessors Of Senior Housing/Healthcare",
                "Residential Real Estate Opportunity Funds",
                "Commercial Real Estate Opportunity Funds",
                "Equity Real Estate Investment Trust"
              ]
            },
            {
              "industryCategory": "Professional, Scientific, and Technical Services",
              "industryTypes": [
                "Offices Of Lawyers",
                "Offices Of Notaries",
                "Title Abstract And Settlement Offices",
                "All Other Legal Services",
                "Offices Of Certified Public Accountants",
                "Tax Preparation Services",
                "Payroll Services",
                "Other Accounting Services",
                "Architectural Services",
                "Landscape Architectural Services",
                "Engineering Services",
                "Drafting Services",
                "Building Inspection Services",
                "Geophysical Surveying And Mapping Services",
                "Surveying And Mapping (Except Geophysical) Services",
                "Testing Laboratories",
                "Interior Design Services",
                "Industrial Design Services",
                "Graphic Design Services",
                "Other Specialized Design Services",
                "Custom Computer Programming Services",
                "Computer Systems Design Services",
                "Computer Facilities Management Services",
                "Other Computer Related Services",
                "Administrative Management and General Management Consulting Services",
                "Human Resources Consulting Services ",
                "Marketing Consulting Services",
                "Process, Physical Distribution, and Logistics Consulting Services",
                "Other Management Consulting Services",
                "Environmental Consulting Services",
                "Other Scientific And Technical Consulting Services",
                "Research And Development In Life Sciences",
                "Advertising Agencies",
                "Public Relations Agencies",
                "Media Buying Agencies",
                "Media Representatives",
                "Outdoor Advertising",
                "Direct Mail Advertising",
                "Advertising Material Distribution Services",
                "Other Services Related To Advertising",
                "Marketing Research And Public Opinion Polling",
                "Photography Studios Portrait",
                "Commercial Photography",
                "Translation And Interpretation Services",
                "Veterinary Services",
                "All Other Professional Scientific And Technical Services",
                "Research and Development in Nanotechnology",
                "Research and Development in Biotechnology (except Nanobiotechnology)",
                "Research and Development in the Physical, Engineering, and Life Sciences (except Nanotechnology and Biotechnology)",
                "Coupon Clipping Services"
              ]
            },
            {
              "industryCategory": "Management of Companies and Enterprises",
              "industryTypes": [
                "Offices Of Bank Holding Companies",
                "Offices Of Other Holding Companies",
                "Corporate Subsidiary And Regional Managing Offices"
              ]
            },
            {
              "industryCategory": "Administrative and Support and Waste Management and Remediation Services",
              "industryTypes": [
                "Office Administrative Services",
                "Facilities Support Services",
                "Employment Placement Agencies",
                "Executive Search Services",
                "Temporary Help Services",
                "Professional Employer Organizations",
                "Document Preparation Services",
                "Telephone Answering Services",
                "Telemarketing Bureaus and Other Contact Centers",
                "Private Mail Centers",
                "Other Business Service Centers (Including Copy Shops)",
                "Collection Agencies",
                "Credit Bureaus",
                "Repossession Services",
                "Court Reporting And Stenotype Services",
                "All Other Business Support Services",
                "Travel Agencies",
                "Tour Operators",
                "Convention And Visitors Bureaus",
                "All Other Travel Arrangement And Reservation Services",
                "Investigation Services",
                "Security Guards And Patrol Services",
                "Armored Car Services",
                "Security Systems Services (Except Locksmiths)",
                "Locksmiths",
                "Exterminating And Pest Control Services",
                "Janitorial Services",
                "Landscaping Services",
                "Carpet And Upholstery Cleaning Services",
                "Other Services To Buildings And Dwellings",
                "Packaging And Labeling Services",
                "Convention And Trade Show Organizers",
                "All Other Support Services",
                "Solid Waste Collection",
                "Hazardous Waste Collection",
                "Other Waste Collection",
                "Hazardous Waste Treatment And Disposal",
                "Solid Waste Landfill",
                "Solid Waste Combustors And Incinerators",
                "Other Nonhazardous Waste Treatment And Disposal",
                "Remediation Services",
                "Materials Recovery Facilities",
                "Septic Tank And Related Services",
                "All Other Miscellaneous Waste Management Services",
                "Secretarial Services And Company Formation Agents"
              ]
            },
            {
              "industryCategory": "Educational Services",
              "industryTypes": [
                "Elementary And Secondary Schools (Public)",
                "Junior Colleges (Public)",
                "Colleges Universities And Professional Schools (Public)",
                "Business And Secretarial Schools",
                "Computer Training",
                "Professional And Management Development Training",
                "Cosmetology And Barber Schools",
                "Flight Training",
                "Apprenticeship Training",
                "Other Technical And Trade Schools",
                "Fine Arts Schools",
                "Sports And Recreation Instruction",
                "Language Schools",
                "Exam Preparation And Tutoring",
                "Automobile Driving Schools",
                "All Other Miscellaneous Schools And Instruction",
                "Educational Support Services",
                "Elementary And Secondary Schools (Private)",
                "Junior Colleges (Private)",
                "Colleges Universities And Professional Schools (Private)"
              ]
            },
            {
              "industryCategory": "Health Care and Social Assistance",
              "industryTypes": [
                "Offices Of Physicians (Except Mental Health Specialists)",
                "Offices Of Physicians Mental Health Specialists",
                "Offices Of Dentists",
                "Offices Of Chiropractors",
                "Offices Of Optometrists",
                "Offices Of Mental Health Practitioners (Except Physicians)",
                "Office Of PhysicalOccupationalSpeech TherapistAudiologist",
                "Offices Of Podiatrists",
                "Offices Of All Other Miscellaneous Health Practitioners",
                "Family Planning Centers",
                "Outpatient Mental Health And Substance Abuse Centers",
                "Hmo Medical Centers",
                "Kidney Dialysis Centers",
                "Freestanding Ambulatory Surgical And Emergency Centers",
                "All Other Outpatient Care Centers",
                "Medical Laboratories",
                "Diagnostic Imaging Centers",
                "Home Health Care Services",
                "Ambulance Services",
                "Blood And Organ Banks",
                "All Other Miscellaneous Ambulatory Health Care Services",
                "General Medical And Surgical Hospitals",
                "Psychiatric And Substance Abuse Hospitals",
                "Specialty (except Psychiatric and Substance Abuse) Hospitals",
                "Nursing Care Facilities (Skilled Nursing Facilities) ",
                "Resi Intellectual and Developmental Disability Facilities ",
                "Residential Mental Health And Substance Abuse Facilities",
                "Continuing Care Retirement Communities",
                "Assisted Living Facilities for the Elderly ",
                "Other Residential Care Facilities",
                "Child And Youth Services",
                "Services For The Elderly And Persons With Disabilities",
                "Other Individual And Family Services",
                "Community Food Services",
                "Temporary Shelters",
                "Other Community Housing Services",
                "Emergency And Other Relief Services",
                "Vocational Rehabilitation Services",
                "Child Day Care Services",
                "Not-For-Profit Hospitals",
                "Pharmacy Benefit Managers, Institutional Pharmacies, and Large Chain Drug Stores"
              ]
            },
            {
              "industryCategory": "Arts, Entertainment, and Recreation",
              "industryTypes": [
                "Theater Companies And Dinner Theaters",
                "Dance Companies",
                "Musical Groups And Artists",
                "Other Performing Arts Companies",
                "Sports Teams And Clubs",
                "Race Tracks",
                "Other Spectator Sports",
                "Promoters Of Performg ArtSports&Similar Events W/Facilities",
                "Promoters Of Performg ArtSport&Similar Event W/O Facilities",
                "Agents/Mgrs For ArtistsAthletesEntertainersPublic Figures",
                "Independent Artists Writers And Performers",
                "Museums",
                "Historical Sites",
                "Zoos And Botanical Gardens",
                "Nature Parks And Other Similar Institutions",
                "Amusement And Theme Parks",
                "Amusement Arcades",
                "Casinos (Except Casino Hotels)",
                "Other Gambling Industries",
                "Golf Courses And Country Clubs",
                "Skiing Facilities",
                "Marinas",
                "Fitness And Recreational Sports Centers",
                "Bowling Centers",
                "All Other Amusement And Recreation Industries"
              ]
            },
            {
              "industryCategory": "Accommodation and Food Services",
              "industryTypes": [
                "Hotels (Except Casino Hotels) And Motels",
                "Casino Hotels",
                "Bed And Breakfast Inns",
                "All Other Traveler Accommodation",
                "Rv (Recreational Vehicle) Parks And Campgrounds",
                "Recreational And Vacation Camps",
                "Rooming And Boarding Houses",
                "Foodservice Contractors",
                "Caterers",
                "Mobile Foodservices",
                "Drinking Places (Alcoholic Beverages)",
                "Full-Service Restaurants",
                "Limited-Service Restaurants",
                "Cafeterias Grill Buffets and Buffets",
                "Snack and Nonalcoholic Beverage Bars"
              ]
            },
            {
              "industryCategory": "Other Services (except Public Administration)",
              "industryTypes": [
                "General Automotive Repair",
                "Automotive Exhaust System Repair",
                "Automotive Transmission Repair",
                "Other Automotive Mechanical And Electrical Repair And Maint",
                "Automotive Body Paint And Interior Repair And Maintenance",
                "Automotive Glass Replacement Shops",
                "Automotive Oil Change And Lubrication Shops",
                "Car Washes",
                "All Other Automotive Repair And Maintenance",
                "Consumer Electronics Repair And Maintenance",
                "Computer And Office Machine Repair And Maintenance",
                "Communication Equipment Repair And Maintenance",
                "Other Electronic And Precision Equipment Repair And Maint",
                "C&I Machinery/Equip (Ex Auto/Electronic) Repair/Maintenance",
                "Home And Garden Equipment Repair And Maintenance",
                "Appliance Repair And Maintenance",
                "Reupholstery And Furniture Repair",
                "Footwear And Leather Goods Repair",
                "Other Personal And Household Goods Repair And Maintenance",
                "Barber Shops",
                "Beauty Salons",
                "Nail Salons",
                "Diet And Weight Reducing Centers",
                "Other Personal Care Services",
                "Funeral Homes",
                "Cemeteries And Crematories",
                "Coin-Operated Laundries And Drycleaners",
                "Drycleaning And Laundry Services (Except Coin-Operated)",
                "Linen Supply",
                "Industrial Launderers",
                "Pet Care (Except Veterinary) Services",
                "Photo Finishing Laboratories (Except One-Hour)",
                "One-Hour Photo Finishing",
                "Parking Lots And Garages",
                "All Other Personal Services",
                "Religious Organizations",
                "Grantmaking Foundations",
                "Voluntary Health Organizations",
                "Other Grantmaking And Giving Services",
                "Human Rights Organizations",
                "Environment Conservation And Wildlife Organizations",
                "Other Social Advocacy Organizations",
                "Civic And Social Organizations",
                "Business Associations",
                "Professional Organizations",
                "Labor Unions And Similar Labor Organizations",
                "Political Organizations",
                "Other Similar Organizations",
                "Private Households",
                "Adult Oriented Other than Media",
                "Adult Oriented Media"
              ]
            },
            {
              "industryCategory": "Public Administration",
              "industryTypes": [
                "Executive Offices",
                "Legislative Bodies",
                "Public Finance",
                "Executive And Legislative Offices Combined",
                "American Indian And Alaska Native Tribal Governments",
                "All Other General Government",
                "Courts",
                "Police Protection",
                "Legal Counsel And Prosecution",
                "Correctional Institutions",
                "Parole Offices And Probation Offices",
                "Fire Protection",
                "All Other Justice Public Order And Safety",
                "Administration Of Education Programs",
                "Administration Of Public Health Programs",
                "Admin Of Social Human Resource & Income Maint Programs",
                "Administration Of Veteran'S Affairs",
                "Administration of Air and Water Resource and Solid Waste Management Programs",
                "Land Mineral Wildlife And Forest Conservation",
                "Administration Of Housing Programs",
                "Admin Of Urban Planning And Community & Rural Develop",
                "Administration Of General Economic Programs",
                "Regulation and Administration of Transportation Programs",
                "Regulation and Administration of Communications, Electric, Gas, and Other Utilities",
                "Regulation Of Agricultural Marketing And Commodities",
                "Regulation Licensing Inspection Of Misc Commercial Sectors",
                "Space Research And Technology",
                "National Security",
                "International Affairs",
                "Central Government",
                "Public Finance (Finance Ministries Treasury)",
                "Water Waste Water And Solid Waste Mgmt (Public Utilities)",
                "Surface Transportation And Facilities (Roads Rail Subway)",
                "Airport (Transportation)",
                "Electricity Utilities (Public Utilities)",
                "Other Central Government",
                "Municipal Airport",
                "Electrical Cooperative",
                "Municipality Owned Electrical Utilities",
                "City Or County Owned Hospitals"
              ]
            },
            {
              "industryCategory": "Individuals",
              "industryTypes": [
                "Individuals"
              ]
            }
          ]
        }
      },
      "ListOfCountrySubdivision": {
        "summary": "List of Country Subdivision for the client",
        "description": "List of Country Subdivision for the client",
        "value": {
          "subDivision": [
            {
              "name": "Alabama",
              "code": "AL"
            },
            {
              "name": "Alaska",
              "code": "AK"
            },
            {
              "name": "Arizona",
              "code": "AZ"
            },
            {
              "name": "Arkansas",
              "code": "AR"
            },
            {
              "name": "California",
              "code": "CA"
            },
            {
              "name": "Colorado",
              "code": "CO"
            },
            {
              "name": "Connecticut",
              "code": "CT"
            },
            {
              "name": "Delaware",
              "code": "DE"
            },
            {
              "name": "District of Columbia",
              "code": "DC"
            },
            {
              "name": "Florida",
              "code": "FL"
            },
            {
              "name": "Georgia",
              "code": "GA"
            },
            {
              "name": "Hawaii",
              "code": "HI"
            },
            {
              "name": "Idaho",
              "code": "ID"
            },
            {
              "name": "Illinois",
              "code": "IL"
            },
            {
              "name": "Indiana",
              "code": "IN"
            },
            {
              "name": "Iowa",
              "code": "IA"
            },
            {
              "name": "Kansas",
              "code": "KS"
            },
            {
              "name": "Kentucky",
              "code": "KY"
            },
            {
              "name": "Louisiana",
              "code": "LA"
            },
            {
              "name": "Maine",
              "code": "ME"
            },
            {
              "name": "Maryland",
              "code": "MD"
            },
            {
              "name": "Massachusetts",
              "code": "MA"
            },
            {
              "name": "Michigan",
              "code": "MI"
            },
            {
              "name": "Minnesota",
              "code": "MN"
            },
            {
              "name": "Mississippi",
              "code": "MS"
            },
            {
              "name": "Missouri",
              "code": "MO"
            },
            {
              "name": "Montana",
              "code": "MT"
            },
            {
              "name": "Nebraska",
              "code": "NE"
            },
            {
              "name": "Nevada",
              "code": "NV"
            },
            {
              "name": "New Hampshire",
              "code": "NH"
            },
            {
              "name": "New Jersey",
              "code": "NJ"
            },
            {
              "name": "New Mexico",
              "code": "NM"
            },
            {
              "name": "New York",
              "code": "NY"
            },
            {
              "name": "North Carolina",
              "code": "NC"
            },
            {
              "name": "North Dakota",
              "code": "ND"
            },
            {
              "name": "Ohio",
              "code": "OH"
            },
            {
              "name": "Oklahoma",
              "code": "OK"
            },
            {
              "name": "Oregon",
              "code": "OR"
            },
            {
              "name": "Pennsylvania",
              "code": "PA"
            },
            {
              "name": "Rhode Island",
              "code": "RI"
            },
            {
              "name": "South Carolina",
              "code": "SC"
            },
            {
              "name": "South Dakota",
              "code": "SD"
            },
            {
              "name": "Tennessee",
              "code": "TN"
            },
            {
              "name": "Texas",
              "code": "TX"
            },
            {
              "name": "Utah",
              "code": "UT"
            },
            {
              "name": "Vermont",
              "code": "VT"
            },
            {
              "name": "Virginia",
              "code": "VA"
            },
            {
              "name": "Washington",
              "code": "WA"
            },
            {
              "name": "West Virginia",
              "code": "WV"
            },
            {
              "name": "Wisconsin",
              "code": "WI"
            },
            {
              "name": "Wyoming",
              "code": "WY"
            }
          ],
          "countryCode": "US"
        }
      },
      "ListOfProducts": {
        "summary": "List of products for the client",
        "description": "List of products for the client",
        "value": {
          "products": [
            {
              "code": "EB",
              "name": "Embedded Banking"
            }
          ]
        }
      },
      "ListOfBusinessTypes": {
        "summary": "List of business types",
        "description": "List of business types",
        "value": {
          "businessTypes": [
            "Privately Owned Business",
            "Sole Proprietorship"
          ]
        }
      },
      "ListOfJobTitles": {
        "summary": "List of job titles that can be used for client onboarding",
        "description": "List of job titles that can be used for client onboarding",
        "value": {
          "jobTitles": [
            "CEO",
            "CFO",
            "COO",
            "Chairman",
            "Other",
            "President",
            "Senior Branch Manager"
          ]
        }
      },
      "ListOfPartyRoles": {
        "summary": "List of accepted party roles",
        "description": "List of accepted party roles",
        "value": {
          "partyRoles": [
            "CONTROLLER",
            "OWNER",
            "DECISION_MAKER"
          ]
        }
      },
      "ListOfAddressTypes": {
        "summary": "List of Address Types",
        "description": "List of Address Types",
        "value": {
          "addressTypes": [
            "Primary Residence",
            "Principal place of business"
          ]
        }
      },
      "ListOfAcceptedNatureOfOwnershipValues": {
        "summary": "List of accepted Nature Of Ownership values",
        "description": "List of accepted Nature Of Ownership values",
        "value": {
          "natureOfOwnerships": [
            "Direct",
            "Indirect"
          ]
        }
      },
      "ListOfAcceptedPartyTypes": {
        "summary": "List of accepted party types",
        "description": "List of accepted party types",
        "value": {
          "partyTypes": [
            "Individual",
            "Organization"
          ]
        }
      }
    }
  }
}
